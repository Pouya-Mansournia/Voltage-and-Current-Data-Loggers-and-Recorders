
Voltageandcurrentlogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083e0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  080084f0  080084f0  000184f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008858  08008858  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08008858  08008858  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008858  08008858  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008858  08008858  00018858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800885c  0800885c  0001885c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  200001e4  08008a44  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  08008a44  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d1f2  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000231c  00000000  00000000  0002d3ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d68  00000000  00000000  0002f720  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c30  00000000  00000000  00030488  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016401  00000000  00000000  000310b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ad52  00000000  00000000  000474b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00078070  00000000  00000000  0005220b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ca27b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004968  00000000  00000000  000ca2f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	080084d8 	.word	0x080084d8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	080084d8 	.word	0x080084d8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001034:	4b18      	ldr	r3, [pc, #96]	; (8001098 <MX_ADC1_Init+0x74>)
 8001036:	4a19      	ldr	r2, [pc, #100]	; (800109c <MX_ADC1_Init+0x78>)
 8001038:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800103a:	4b17      	ldr	r3, [pc, #92]	; (8001098 <MX_ADC1_Init+0x74>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001040:	4b15      	ldr	r3, [pc, #84]	; (8001098 <MX_ADC1_Init+0x74>)
 8001042:	2200      	movs	r2, #0
 8001044:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001046:	4b14      	ldr	r3, [pc, #80]	; (8001098 <MX_ADC1_Init+0x74>)
 8001048:	2200      	movs	r2, #0
 800104a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800104c:	4b12      	ldr	r3, [pc, #72]	; (8001098 <MX_ADC1_Init+0x74>)
 800104e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001052:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001054:	4b10      	ldr	r3, [pc, #64]	; (8001098 <MX_ADC1_Init+0x74>)
 8001056:	2200      	movs	r2, #0
 8001058:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800105a:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <MX_ADC1_Init+0x74>)
 800105c:	2201      	movs	r2, #1
 800105e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001060:	480d      	ldr	r0, [pc, #52]	; (8001098 <MX_ADC1_Init+0x74>)
 8001062:	f000 fe23 	bl	8001cac <HAL_ADC_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800106c:	f000 fb56 	bl	800171c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001070:	2304      	movs	r3, #4
 8001072:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001074:	2301      	movs	r3, #1
 8001076:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001078:	2305      	movs	r3, #5
 800107a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800107c:	1d3b      	adds	r3, r7, #4
 800107e:	4619      	mov	r1, r3
 8001080:	4805      	ldr	r0, [pc, #20]	; (8001098 <MX_ADC1_Init+0x74>)
 8001082:	f001 f8cb 	bl	800221c <HAL_ADC_ConfigChannel>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800108c:	f000 fb46 	bl	800171c <Error_Handler>
  }

}
 8001090:	bf00      	nop
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000218 	.word	0x20000218
 800109c:	40012400 	.word	0x40012400

080010a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 0310 	add.w	r3, r7, #16
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a14      	ldr	r2, [pc, #80]	; (800110c <HAL_ADC_MspInit+0x6c>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d121      	bne.n	8001104 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010c0:	4b13      	ldr	r3, [pc, #76]	; (8001110 <HAL_ADC_MspInit+0x70>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	4a12      	ldr	r2, [pc, #72]	; (8001110 <HAL_ADC_MspInit+0x70>)
 80010c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ca:	6193      	str	r3, [r2, #24]
 80010cc:	4b10      	ldr	r3, [pc, #64]	; (8001110 <HAL_ADC_MspInit+0x70>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d8:	4b0d      	ldr	r3, [pc, #52]	; (8001110 <HAL_ADC_MspInit+0x70>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	4a0c      	ldr	r2, [pc, #48]	; (8001110 <HAL_ADC_MspInit+0x70>)
 80010de:	f043 0304 	orr.w	r3, r3, #4
 80010e2:	6193      	str	r3, [r2, #24]
 80010e4:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <HAL_ADC_MspInit+0x70>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	f003 0304 	and.w	r3, r3, #4
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ACS712_CURRENT_Pin;
 80010f0:	2310      	movs	r3, #16
 80010f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f4:	2303      	movs	r3, #3
 80010f6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ACS712_CURRENT_GPIO_Port, &GPIO_InitStruct);
 80010f8:	f107 0310 	add.w	r3, r7, #16
 80010fc:	4619      	mov	r1, r3
 80010fe:	4805      	ldr	r0, [pc, #20]	; (8001114 <HAL_ADC_MspInit+0x74>)
 8001100:	f001 fb1e 	bl	8002740 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001104:	bf00      	nop
 8001106:	3720      	adds	r7, #32
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40012400 	.word	0x40012400
 8001110:	40021000 	.word	0x40021000
 8001114:	40010800 	.word	0x40010800

08001118 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111e:	f107 0310 	add.w	r3, r7, #16
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800112c:	4b48      	ldr	r3, [pc, #288]	; (8001250 <MX_GPIO_Init+0x138>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	4a47      	ldr	r2, [pc, #284]	; (8001250 <MX_GPIO_Init+0x138>)
 8001132:	f043 0310 	orr.w	r3, r3, #16
 8001136:	6193      	str	r3, [r2, #24]
 8001138:	4b45      	ldr	r3, [pc, #276]	; (8001250 <MX_GPIO_Init+0x138>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	f003 0310 	and.w	r3, r3, #16
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001144:	4b42      	ldr	r3, [pc, #264]	; (8001250 <MX_GPIO_Init+0x138>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	4a41      	ldr	r2, [pc, #260]	; (8001250 <MX_GPIO_Init+0x138>)
 800114a:	f043 0320 	orr.w	r3, r3, #32
 800114e:	6193      	str	r3, [r2, #24]
 8001150:	4b3f      	ldr	r3, [pc, #252]	; (8001250 <MX_GPIO_Init+0x138>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	f003 0320 	and.w	r3, r3, #32
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115c:	4b3c      	ldr	r3, [pc, #240]	; (8001250 <MX_GPIO_Init+0x138>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	4a3b      	ldr	r2, [pc, #236]	; (8001250 <MX_GPIO_Init+0x138>)
 8001162:	f043 0304 	orr.w	r3, r3, #4
 8001166:	6193      	str	r3, [r2, #24]
 8001168:	4b39      	ldr	r3, [pc, #228]	; (8001250 <MX_GPIO_Init+0x138>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001174:	4b36      	ldr	r3, [pc, #216]	; (8001250 <MX_GPIO_Init+0x138>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	4a35      	ldr	r2, [pc, #212]	; (8001250 <MX_GPIO_Init+0x138>)
 800117a:	f043 0308 	orr.w	r3, r3, #8
 800117e:	6193      	str	r3, [r2, #24]
 8001180:	4b33      	ldr	r3, [pc, #204]	; (8001250 <MX_GPIO_Init+0x138>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	f003 0308 	and.w	r3, r3, #8
 8001188:	603b      	str	r3, [r7, #0]
 800118a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800118c:	2200      	movs	r2, #0
 800118e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001192:	4830      	ldr	r0, [pc, #192]	; (8001254 <MX_GPIO_Init+0x13c>)
 8001194:	f001 fc45 	bl	8002a22 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001198:	2200      	movs	r2, #0
 800119a:	2102      	movs	r1, #2
 800119c:	482e      	ldr	r0, [pc, #184]	; (8001258 <MX_GPIO_Init+0x140>)
 800119e:	f001 fc40 	bl	8002a22 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELAY2_Pin|RELAY1_Pin, GPIO_PIN_RESET);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2118      	movs	r1, #24
 80011a6:	482d      	ldr	r0, [pc, #180]	; (800125c <MX_GPIO_Init+0x144>)
 80011a8:	f001 fc3b 	bl	8002a22 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b2:	2301      	movs	r3, #1
 80011b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ba:	2302      	movs	r3, #2
 80011bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011be:	f107 0310 	add.w	r3, r7, #16
 80011c2:	4619      	mov	r1, r3
 80011c4:	4823      	ldr	r0, [pc, #140]	; (8001254 <MX_GPIO_Init+0x13c>)
 80011c6:	f001 fabb 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80011ca:	2302      	movs	r3, #2
 80011cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ce:	2301      	movs	r3, #1
 80011d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2302      	movs	r3, #2
 80011d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80011da:	f107 0310 	add.w	r3, r7, #16
 80011de:	4619      	mov	r1, r3
 80011e0:	481d      	ldr	r0, [pc, #116]	; (8001258 <MX_GPIO_Init+0x140>)
 80011e2:	f001 faad 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SW01_Pin|STOP_BTN_Pin;
 80011e6:	23c0      	movs	r3, #192	; 0xc0
 80011e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f2:	f107 0310 	add.w	r3, r7, #16
 80011f6:	4619      	mov	r1, r3
 80011f8:	4817      	ldr	r0, [pc, #92]	; (8001258 <MX_GPIO_Init+0x140>)
 80011fa:	f001 faa1 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW02_Pin;
 80011fe:	2301      	movs	r3, #1
 8001200:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SW02_GPIO_Port, &GPIO_InitStruct);
 800120a:	f107 0310 	add.w	r3, r7, #16
 800120e:	4619      	mov	r1, r3
 8001210:	4812      	ldr	r0, [pc, #72]	; (800125c <MX_GPIO_Init+0x144>)
 8001212:	f001 fa95 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = current_Pin;
 8001216:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800121a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800121c:	2303      	movs	r3, #3
 800121e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(current_GPIO_Port, &GPIO_InitStruct);
 8001220:	f107 0310 	add.w	r3, r7, #16
 8001224:	4619      	mov	r1, r3
 8001226:	480c      	ldr	r0, [pc, #48]	; (8001258 <MX_GPIO_Init+0x140>)
 8001228:	f001 fa8a 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RELAY2_Pin|RELAY1_Pin;
 800122c:	2318      	movs	r3, #24
 800122e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001230:	2301      	movs	r3, #1
 8001232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2302      	movs	r3, #2
 800123a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123c:	f107 0310 	add.w	r3, r7, #16
 8001240:	4619      	mov	r1, r3
 8001242:	4806      	ldr	r0, [pc, #24]	; (800125c <MX_GPIO_Init+0x144>)
 8001244:	f001 fa7c 	bl	8002740 <HAL_GPIO_Init>

}
 8001248:	bf00      	nop
 800124a:	3720      	adds	r7, #32
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40021000 	.word	0x40021000
 8001254:	40011000 	.word	0x40011000
 8001258:	40010800 	.word	0x40010800
 800125c:	40010c00 	.word	0x40010c00

08001260 <__io_putchar>:
  #else
  #define PUTCHAR_PROTOTYPE int fputc(int ch,FILE *f)
  #endif

  PUTCHAR_PROTOTYPE
  {//                        "SALAM"       5 100
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1,(uint8_t*)&ch,1,100);
 8001268:	1d39      	adds	r1, r7, #4
 800126a:	2364      	movs	r3, #100	; 0x64
 800126c:	2201      	movs	r2, #1
 800126e:	4804      	ldr	r0, [pc, #16]	; (8001280 <__io_putchar+0x20>)
 8001270:	f002 fd63 	bl	8003d3a <HAL_UART_Transmit>

    return ch;
 8001274:	687b      	ldr	r3, [r7, #4]

  }
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000288 	.word	0x20000288

08001284 <HAL_TIM_PeriodElapsedCallback>:
bool    motor_run_set_counter_flag=false;
uint8_t motor_run_occord_interrupt_counter=0;


  void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
  {
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]

  	if(htim->Instance==TIM2)//interrupt evry 1000ms
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001294:	d17c      	bne.n	8001390 <HAL_TIM_PeriodElapsedCallback+0x10c>
  	{

  		//--------------------------------------------------------------------------------------------
  		if(left_set_counter_flag)
 8001296:	4b40      	ldr	r3, [pc, #256]	; (8001398 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d024      	beq.n	80012e8 <HAL_TIM_PeriodElapsedCallback+0x64>
  		{
  			    led_toggle;
 800129e:	2102      	movs	r1, #2
 80012a0:	483e      	ldr	r0, [pc, #248]	; (800139c <HAL_TIM_PeriodElapsedCallback+0x118>)
 80012a2:	f001 fbd6 	bl	8002a52 <HAL_GPIO_TogglePin>

				left_occord_interrupt_counter++;
 80012a6:	4b3e      	ldr	r3, [pc, #248]	; (80013a0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	3301      	adds	r3, #1
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4b3c      	ldr	r3, [pc, #240]	; (80013a0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80012b0:	701a      	strb	r2, [r3, #0]

				if((left_occord_interrupt_counter % 2 ) ==0)//if sec= 2,4,6
 80012b2:	4b3b      	ldr	r3, [pc, #236]	; (80013a0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d103      	bne.n	80012c8 <HAL_TIM_PeriodElapsedCallback+0x44>
				{
					motor_fanction(stop);
 80012c0:	2003      	movs	r0, #3
 80012c2:	f000 f9e3 	bl	800168c <motor_fanction>
 80012c6:	e002      	b.n	80012ce <HAL_TIM_PeriodElapsedCallback+0x4a>
				}
				else//if sec= 1,3,5 // first run
				{
					motor_fanction(left);
 80012c8:	2001      	movs	r0, #1
 80012ca:	f000 f9df 	bl	800168c <motor_fanction>
				}


				if(left_occord_interrupt_counter==6)//end of motor
 80012ce:	4b34      	ldr	r3, [pc, #208]	; (80013a0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b06      	cmp	r3, #6
 80012d4:	d108      	bne.n	80012e8 <HAL_TIM_PeriodElapsedCallback+0x64>
				{
					sec=0;
 80012d6:	4b33      	ldr	r3, [pc, #204]	; (80013a4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
					left_occord_interrupt_counter=0;
 80012dc:	4b30      	ldr	r3, [pc, #192]	; (80013a0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
					left_set_counter_flag=false;
 80012e2:	4b2d      	ldr	r3, [pc, #180]	; (8001398 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	701a      	strb	r2, [r3, #0]
  		 }


  		//--------------------------------------------- right fanction -------------------------

  		if(right_set_counter_flag)
 80012e8:	4b2f      	ldr	r3, [pc, #188]	; (80013a8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d024      	beq.n	800133a <HAL_TIM_PeriodElapsedCallback+0xb6>
  	    {
			   led_toggle;
 80012f0:	2102      	movs	r1, #2
 80012f2:	482a      	ldr	r0, [pc, #168]	; (800139c <HAL_TIM_PeriodElapsedCallback+0x118>)
 80012f4:	f001 fbad 	bl	8002a52 <HAL_GPIO_TogglePin>
				right_occord_interrupt_counter++;
 80012f8:	4b2c      	ldr	r3, [pc, #176]	; (80013ac <HAL_TIM_PeriodElapsedCallback+0x128>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	3301      	adds	r3, #1
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	4b2a      	ldr	r3, [pc, #168]	; (80013ac <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001302:	701a      	strb	r2, [r3, #0]

				if((right_occord_interrupt_counter % 2 ) ==0)//if sec= 2,4,6
 8001304:	4b29      	ldr	r3, [pc, #164]	; (80013ac <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b00      	cmp	r3, #0
 8001310:	d103      	bne.n	800131a <HAL_TIM_PeriodElapsedCallback+0x96>
				{
					motor_fanction(stop);
 8001312:	2003      	movs	r0, #3
 8001314:	f000 f9ba 	bl	800168c <motor_fanction>
 8001318:	e002      	b.n	8001320 <HAL_TIM_PeriodElapsedCallback+0x9c>
				}
				else//if sec= 1,3,5 // first run
				{
					motor_fanction(right);
 800131a:	2002      	movs	r0, #2
 800131c:	f000 f9b6 	bl	800168c <motor_fanction>
				}


				if(right_occord_interrupt_counter==6)//end of motor
 8001320:	4b22      	ldr	r3, [pc, #136]	; (80013ac <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b06      	cmp	r3, #6
 8001326:	d108      	bne.n	800133a <HAL_TIM_PeriodElapsedCallback+0xb6>
				{
					sec=0;
 8001328:	4b1e      	ldr	r3, [pc, #120]	; (80013a4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
					right_occord_interrupt_counter=0;
 800132e:	4b1f      	ldr	r3, [pc, #124]	; (80013ac <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]
					right_set_counter_flag=false;
 8001334:	4b1c      	ldr	r3, [pc, #112]	; (80013a8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001336:	2200      	movs	r2, #0
 8001338:	701a      	strb	r2, [r3, #0]
		 }

  		//------------------------------------------------------------------------------------------------------


  		if(motor_run_set_counter_flag)
 800133a:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d026      	beq.n	8001390 <HAL_TIM_PeriodElapsedCallback+0x10c>
  		  		{
  		  			    led_toggle;
 8001342:	2102      	movs	r1, #2
 8001344:	4815      	ldr	r0, [pc, #84]	; (800139c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001346:	f001 fb84 	bl	8002a52 <HAL_GPIO_TogglePin>

  		  			    motor_run_occord_interrupt_counter++;
 800134a:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	3301      	adds	r3, #1
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001354:	701a      	strb	r2, [r3, #0]

  						if((motor_run_occord_interrupt_counter % 2 ) ==0)//if sec= 2,4,6
 8001356:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	b2db      	uxtb	r3, r3
 8001360:	2b00      	cmp	r3, #0
 8001362:	d103      	bne.n	800136c <HAL_TIM_PeriodElapsedCallback+0xe8>
  						{
  							motor_fanction(right);
 8001364:	2002      	movs	r0, #2
 8001366:	f000 f991 	bl	800168c <motor_fanction>
 800136a:	e002      	b.n	8001372 <HAL_TIM_PeriodElapsedCallback+0xee>
  						}
  						else//if sec= 1,3,5 // first run
  						{
  							motor_fanction(left);
 800136c:	2001      	movs	r0, #1
 800136e:	f000 f98d 	bl	800168c <motor_fanction>
  						}


  						if(motor_run_occord_interrupt_counter==12)//end of motor 10 operation
 8001372:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b0c      	cmp	r3, #12
 8001378:	d10a      	bne.n	8001390 <HAL_TIM_PeriodElapsedCallback+0x10c>
  						{

  							led_OFF;
 800137a:	2200      	movs	r2, #0
 800137c:	2102      	movs	r1, #2
 800137e:	4807      	ldr	r0, [pc, #28]	; (800139c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001380:	f001 fb4f 	bl	8002a22 <HAL_GPIO_WritePin>
  							motor_run_occord_interrupt_counter=0;
 8001384:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001386:	2200      	movs	r2, #0
 8001388:	701a      	strb	r2, [r3, #0]
  							motor_run_set_counter_flag=false;
 800138a:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]
  		//printf("%d\n",get_val);


  	}

  }
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000204 	.word	0x20000204
 800139c:	40010800 	.word	0x40010800
 80013a0:	20000205 	.word	0x20000205
 80013a4:	20000200 	.word	0x20000200
 80013a8:	20000206 	.word	0x20000206
 80013ac:	20000207 	.word	0x20000207
 80013b0:	20000208 	.word	0x20000208
 80013b4:	20000209 	.word	0x20000209

080013b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013bc:	f000 fbf2 	bl	8001ba4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013c0:	f000 f87e 	bl	80014c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013c4:	f7ff fea8 	bl	8001118 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80013c8:	f000 fb50 	bl	8001a6c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80013cc:	f7ff fe2a 	bl	8001024 <MX_ADC1_Init>
  MX_TIM2_Init();
 80013d0:	f000 fada 	bl	8001988 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

 HAL_TIM_Base_Start_IT(&htim2);
 80013d4:	4834      	ldr	r0, [pc, #208]	; (80014a8 <main+0xf0>)
 80013d6:	f002 f90e 	bl	80035f6 <HAL_TIM_Base_Start_IT>
// relay2_on;
// HAL_Delay(500);
// relay1_off;
// relay2_off;

 offsetVoltage = read_adc1(ACS712_CHANNEL);;
 80013da:	2004      	movs	r0, #4
 80013dc:	f000 f92a 	bl	8001634 <read_adc1>
 80013e0:	4602      	mov	r2, r0
 80013e2:	4b32      	ldr	r3, [pc, #200]	; (80014ac <main+0xf4>)
 80013e4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {


		if(!left_btn)
 80013e6:	2140      	movs	r1, #64	; 0x40
 80013e8:	4831      	ldr	r0, [pc, #196]	; (80014b0 <main+0xf8>)
 80013ea:	f001 fb03 	bl	80029f4 <HAL_GPIO_ReadPin>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d122      	bne.n	800143a <main+0x82>
		{
			//------------ stop auto motor------------------------------------
			motor_fanction(stop);
 80013f4:	2003      	movs	r0, #3
 80013f6:	f000 f949 	bl	800168c <motor_fanction>
			motor_run_occord_interrupt_counter=0;
 80013fa:	4b2e      	ldr	r3, [pc, #184]	; (80014b4 <main+0xfc>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	701a      	strb	r2, [r3, #0]
			motor_run_set_counter_flag=false;
 8001400:	4b2d      	ldr	r3, [pc, #180]	; (80014b8 <main+0x100>)
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
			//--------------------------------------------------

			led_ON;
 8001406:	2201      	movs	r2, #1
 8001408:	2102      	movs	r1, #2
 800140a:	4829      	ldr	r0, [pc, #164]	; (80014b0 <main+0xf8>)
 800140c:	f001 fb09 	bl	8002a22 <HAL_GPIO_WritePin>
			motor_fanction(left);
 8001410:	2001      	movs	r0, #1
 8001412:	f000 f93b 	bl	800168c <motor_fanction>

			while(!left_btn)
 8001416:	e001      	b.n	800141c <main+0x64>
			{
				get_current_and_send();
 8001418:	f000 f8ae 	bl	8001578 <get_current_and_send>
			while(!left_btn)
 800141c:	2140      	movs	r1, #64	; 0x40
 800141e:	4824      	ldr	r0, [pc, #144]	; (80014b0 <main+0xf8>)
 8001420:	f001 fae8 	bl	80029f4 <HAL_GPIO_ReadPin>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f6      	beq.n	8001418 <main+0x60>
			}
			motor_fanction(stop);
 800142a:	2003      	movs	r0, #3
 800142c:	f000 f92e 	bl	800168c <motor_fanction>
			led_OFF;
 8001430:	2200      	movs	r2, #0
 8001432:	2102      	movs	r1, #2
 8001434:	481e      	ldr	r0, [pc, #120]	; (80014b0 <main+0xf8>)
 8001436:	f001 faf4 	bl	8002a22 <HAL_GPIO_WritePin>
		}




		if(!right_btn)
 800143a:	2101      	movs	r1, #1
 800143c:	481f      	ldr	r0, [pc, #124]	; (80014bc <main+0x104>)
 800143e:	f001 fad9 	bl	80029f4 <HAL_GPIO_ReadPin>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d122      	bne.n	800148e <main+0xd6>
		{
			//------------ stop auto motor------------------------------------
			motor_fanction(stop);
 8001448:	2003      	movs	r0, #3
 800144a:	f000 f91f 	bl	800168c <motor_fanction>
			motor_run_occord_interrupt_counter=0;
 800144e:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <main+0xfc>)
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]
			motor_run_set_counter_flag=false;
 8001454:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <main+0x100>)
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]
			//--------------------------------------------------

			led_ON;
 800145a:	2201      	movs	r2, #1
 800145c:	2102      	movs	r1, #2
 800145e:	4814      	ldr	r0, [pc, #80]	; (80014b0 <main+0xf8>)
 8001460:	f001 fadf 	bl	8002a22 <HAL_GPIO_WritePin>
			motor_fanction(right);
 8001464:	2002      	movs	r0, #2
 8001466:	f000 f911 	bl	800168c <motor_fanction>
			while(!right_btn)
 800146a:	e001      	b.n	8001470 <main+0xb8>
			{
				get_current_and_send();
 800146c:	f000 f884 	bl	8001578 <get_current_and_send>
			while(!right_btn)
 8001470:	2101      	movs	r1, #1
 8001472:	4812      	ldr	r0, [pc, #72]	; (80014bc <main+0x104>)
 8001474:	f001 fabe 	bl	80029f4 <HAL_GPIO_ReadPin>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0f6      	beq.n	800146c <main+0xb4>
			}
			motor_fanction(stop);
 800147e:	2003      	movs	r0, #3
 8001480:	f000 f904 	bl	800168c <motor_fanction>
			led_OFF;
 8001484:	2200      	movs	r2, #0
 8001486:	2102      	movs	r1, #2
 8001488:	4809      	ldr	r0, [pc, #36]	; (80014b0 <main+0xf8>)
 800148a:	f001 faca 	bl	8002a22 <HAL_GPIO_WritePin>
		}

		if(!stop_btn){
 800148e:	2180      	movs	r1, #128	; 0x80
 8001490:	4807      	ldr	r0, [pc, #28]	; (80014b0 <main+0xf8>)
 8001492:	f001 faaf 	bl	80029f4 <HAL_GPIO_ReadPin>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d102      	bne.n	80014a2 <main+0xea>
			motor_run_set_counter_flag=true;
 800149c:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <main+0x100>)
 800149e:	2201      	movs	r2, #1
 80014a0:	701a      	strb	r2, [r3, #0]
		}



		get_current_and_send();
 80014a2:	f000 f869 	bl	8001578 <get_current_and_send>
		if(!left_btn)
 80014a6:	e79e      	b.n	80013e6 <main+0x2e>
 80014a8:	20000248 	.word	0x20000248
 80014ac:	20000004 	.word	0x20000004
 80014b0:	40010800 	.word	0x40010800
 80014b4:	20000209 	.word	0x20000209
 80014b8:	20000208 	.word	0x20000208
 80014bc:	40010c00 	.word	0x40010c00

080014c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b094      	sub	sp, #80	; 0x50
 80014c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ca:	2228      	movs	r2, #40	; 0x28
 80014cc:	2100      	movs	r1, #0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f002 fe1a 	bl	8004108 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014f0:	2301      	movs	r3, #1
 80014f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014fa:	2300      	movs	r3, #0
 80014fc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014fe:	2301      	movs	r3, #1
 8001500:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001502:	2302      	movs	r3, #2
 8001504:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001506:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800150a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800150c:	2300      	movs	r3, #0
 800150e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001510:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001514:	4618      	mov	r0, r3
 8001516:	f001 fab5 	bl	8002a84 <HAL_RCC_OscConfig>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001520:	f000 f8fc 	bl	800171c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001524:	230f      	movs	r3, #15
 8001526:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001528:	2302      	movs	r3, #2
 800152a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800152c:	2300      	movs	r3, #0
 800152e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001530:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001534:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001536:	2300      	movs	r3, #0
 8001538:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	2100      	movs	r1, #0
 8001540:	4618      	mov	r0, r3
 8001542:	f001 fd1f 	bl	8002f84 <HAL_RCC_ClockConfig>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800154c:	f000 f8e6 	bl	800171c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001550:	2302      	movs	r3, #2
 8001552:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	4618      	mov	r0, r3
 800155c:	f001 feae 	bl	80032bc <HAL_RCCEx_PeriphCLKConfig>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001566:	f000 f8d9 	bl	800171c <Error_Handler>
  }
}
 800156a:	bf00      	nop
 800156c:	3750      	adds	r7, #80	; 0x50
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	0000      	movs	r0, r0
 8001574:	0000      	movs	r0, r0
	...

08001578 <get_current_and_send>:

/* USER CODE BEGIN 4 */


void get_current_and_send()
{
 8001578:	b590      	push	{r4, r7, lr}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
//    char buff[20];
//	int sensitivity = 66;
 	int adcValue= 0;
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
	int offsetVoltage = 2500;
 8001582:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001586:	60bb      	str	r3, [r7, #8]
	float adcVoltage = 0;
 8001588:	f04f 0300 	mov.w	r3, #0
 800158c:	607b      	str	r3, [r7, #4]
	float currentValue = 0;
 800158e:	f04f 0300 	mov.w	r3, #0
 8001592:	603b      	str	r3, [r7, #0]
//
//	adcValue=adcValue/10;



	adcValue=read_adc1(ACS712_CHANNEL);
 8001594:	2004      	movs	r0, #4
 8001596:	f000 f84d 	bl	8001634 <read_adc1>
 800159a:	60f8      	str	r0, [r7, #12]
	//printf("%d\n",adcValue);


	adcVoltage=(adcValue*4096.0)/3300;
 800159c:	68f8      	ldr	r0, [r7, #12]
 800159e:	f7fe ff31 	bl	8000404 <__aeabi_i2d>
 80015a2:	f04f 0200 	mov.w	r2, #0
 80015a6:	4b20      	ldr	r3, [pc, #128]	; (8001628 <get_current_and_send+0xb0>)
 80015a8:	f7fe ff96 	bl	80004d8 <__aeabi_dmul>
 80015ac:	4603      	mov	r3, r0
 80015ae:	460c      	mov	r4, r1
 80015b0:	4618      	mov	r0, r3
 80015b2:	4621      	mov	r1, r4
 80015b4:	a31a      	add	r3, pc, #104	; (adr r3, 8001620 <get_current_and_send+0xa8>)
 80015b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ba:	f7ff f8b7 	bl	800072c <__aeabi_ddiv>
 80015be:	4603      	mov	r3, r0
 80015c0:	460c      	mov	r4, r1
 80015c2:	4618      	mov	r0, r3
 80015c4:	4621      	mov	r1, r4
 80015c6:	f7ff fa7f 	bl	8000ac8 <__aeabi_d2f>
 80015ca:	4603      	mov	r3, r0
 80015cc:	607b      	str	r3, [r7, #4]
	currentValue = ((adcVoltage - (float)offsetVoltage) / (float)sensitivity);
 80015ce:	68b8      	ldr	r0, [r7, #8]
 80015d0:	f7ff fb84 	bl	8000cdc <__aeabi_i2f>
 80015d4:	4603      	mov	r3, r0
 80015d6:	4619      	mov	r1, r3
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff fac9 	bl	8000b70 <__aeabi_fsub>
 80015de:	4603      	mov	r3, r0
 80015e0:	461c      	mov	r4, r3
 80015e2:	4b12      	ldr	r3, [pc, #72]	; (800162c <get_current_and_send+0xb4>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff fb78 	bl	8000cdc <__aeabi_i2f>
 80015ec:	4603      	mov	r3, r0
 80015ee:	4619      	mov	r1, r3
 80015f0:	4620      	mov	r0, r4
 80015f2:	f7ff fc7b 	bl	8000eec <__aeabi_fdiv>
 80015f6:	4603      	mov	r3, r0
 80015f8:	603b      	str	r3, [r7, #0]
//	sensor1_current = (((float)milivoltage - (float)offsetVoltage) / (float)sensitivity);

//	sprintf(buff,"%4.2f",currentValue);
//	printf(buff);
//	printf("\n");
	printf("%04.2f\n",currentValue);
 80015fa:	6838      	ldr	r0, [r7, #0]
 80015fc:	f7fe ff14 	bl	8000428 <__aeabi_f2d>
 8001600:	4603      	mov	r3, r0
 8001602:	460c      	mov	r4, r1
 8001604:	461a      	mov	r2, r3
 8001606:	4623      	mov	r3, r4
 8001608:	4809      	ldr	r0, [pc, #36]	; (8001630 <get_current_and_send+0xb8>)
 800160a:	f003 fbb5 	bl	8004d78 <iprintf>
    HAL_Delay(5);
 800160e:	2005      	movs	r0, #5
 8001610:	f000 fb2a 	bl	8001c68 <HAL_Delay>

}
 8001614:	bf00      	nop
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	bd90      	pop	{r4, r7, pc}
 800161c:	f3af 8000 	nop.w
 8001620:	00000000 	.word	0x00000000
 8001624:	40a9c800 	.word	0x40a9c800
 8001628:	40b00000 	.word	0x40b00000
 800162c:	20000000 	.word	0x20000000
 8001630:	080084f0 	.word	0x080084f0

08001634 <read_adc1>:




int read_adc1(uint8_t ch)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]

    int raw_val=0;
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]

	if(ch==ACS712_CHANNEL)
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	2b04      	cmp	r3, #4
 8001646:	d11a      	bne.n	800167e <read_adc1+0x4a>
	{

		hadc1.Init.NbrOfDiscConversion=2;
 8001648:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <read_adc1+0x54>)
 800164a:	2202      	movs	r2, #2
 800164c:	619a      	str	r2, [r3, #24]
		HAL_ADC_Init(&hadc1);
 800164e:	480e      	ldr	r0, [pc, #56]	; (8001688 <read_adc1+0x54>)
 8001650:	f000 fb2c 	bl	8001cac <HAL_ADC_Init>
		HAL_ADC_Start(&hadc1);
 8001654:	480c      	ldr	r0, [pc, #48]	; (8001688 <read_adc1+0x54>)
 8001656:	f000 fc01 	bl	8001e5c <HAL_ADC_Start>
		 HAL_Delay(5);
 800165a:	2005      	movs	r0, #5
 800165c:	f000 fb04 	bl	8001c68 <HAL_Delay>

		//while( HAL_ADC_PollForConversion(&hadc1,100)!=HAL_OK ){}


				if(HAL_ADC_PollForConversion(&hadc1,50)==HAL_OK)
 8001660:	2132      	movs	r1, #50	; 0x32
 8001662:	4809      	ldr	r0, [pc, #36]	; (8001688 <read_adc1+0x54>)
 8001664:	f000 fcd4 	bl	8002010 <HAL_ADC_PollForConversion>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d104      	bne.n	8001678 <read_adc1+0x44>
				{
				raw_val=HAL_ADC_GetValue(&hadc1);
 800166e:	4806      	ldr	r0, [pc, #24]	; (8001688 <read_adc1+0x54>)
 8001670:	f000 fdc8 	bl	8002204 <HAL_ADC_GetValue>
 8001674:	4603      	mov	r3, r0
 8001676:	60fb      	str	r3, [r7, #12]
				//AL_Delay(10);



				}
		HAL_ADC_Stop(&hadc1);
 8001678:	4803      	ldr	r0, [pc, #12]	; (8001688 <read_adc1+0x54>)
 800167a:	f000 fc9d 	bl	8001fb8 <HAL_ADC_Stop>

	}

return raw_val;
 800167e:	68fb      	ldr	r3, [r7, #12]

}
 8001680:	4618      	mov	r0, r3
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000218 	.word	0x20000218

0800168c <motor_fanction>:

void motor_fanction(uint8_t dir)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	71fb      	strb	r3, [r7, #7]

	//left relay 1

		if(dir==right)
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	2b02      	cmp	r3, #2
 800169a:	d114      	bne.n	80016c6 <motor_fanction+0x3a>
		{
			relay1_off;
 800169c:	2200      	movs	r2, #0
 800169e:	2110      	movs	r1, #16
 80016a0:	481d      	ldr	r0, [pc, #116]	; (8001718 <motor_fanction+0x8c>)
 80016a2:	f001 f9be 	bl	8002a22 <HAL_GPIO_WritePin>
			relay1_off;
 80016a6:	2200      	movs	r2, #0
 80016a8:	2110      	movs	r1, #16
 80016aa:	481b      	ldr	r0, [pc, #108]	; (8001718 <motor_fanction+0x8c>)
 80016ac:	f001 f9b9 	bl	8002a22 <HAL_GPIO_WritePin>
			relay1_off;
 80016b0:	2200      	movs	r2, #0
 80016b2:	2110      	movs	r1, #16
 80016b4:	4818      	ldr	r0, [pc, #96]	; (8001718 <motor_fanction+0x8c>)
 80016b6:	f001 f9b4 	bl	8002a22 <HAL_GPIO_WritePin>


			relay2_on;
 80016ba:	2201      	movs	r2, #1
 80016bc:	2108      	movs	r1, #8
 80016be:	4816      	ldr	r0, [pc, #88]	; (8001718 <motor_fanction+0x8c>)
 80016c0:	f001 f9af 	bl	8002a22 <HAL_GPIO_WritePin>
		{
			relay1_off;
			relay2_off;
		}

}
 80016c4:	e024      	b.n	8001710 <motor_fanction+0x84>
		else if(dir==left)
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d114      	bne.n	80016f6 <motor_fanction+0x6a>
			relay2_off;
 80016cc:	2200      	movs	r2, #0
 80016ce:	2108      	movs	r1, #8
 80016d0:	4811      	ldr	r0, [pc, #68]	; (8001718 <motor_fanction+0x8c>)
 80016d2:	f001 f9a6 	bl	8002a22 <HAL_GPIO_WritePin>
			relay2_off;
 80016d6:	2200      	movs	r2, #0
 80016d8:	2108      	movs	r1, #8
 80016da:	480f      	ldr	r0, [pc, #60]	; (8001718 <motor_fanction+0x8c>)
 80016dc:	f001 f9a1 	bl	8002a22 <HAL_GPIO_WritePin>
			relay2_off;
 80016e0:	2200      	movs	r2, #0
 80016e2:	2108      	movs	r1, #8
 80016e4:	480c      	ldr	r0, [pc, #48]	; (8001718 <motor_fanction+0x8c>)
 80016e6:	f001 f99c 	bl	8002a22 <HAL_GPIO_WritePin>
			relay1_on;
 80016ea:	2201      	movs	r2, #1
 80016ec:	2110      	movs	r1, #16
 80016ee:	480a      	ldr	r0, [pc, #40]	; (8001718 <motor_fanction+0x8c>)
 80016f0:	f001 f997 	bl	8002a22 <HAL_GPIO_WritePin>
}
 80016f4:	e00c      	b.n	8001710 <motor_fanction+0x84>
		else if(dir==stop)
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	2b03      	cmp	r3, #3
 80016fa:	d109      	bne.n	8001710 <motor_fanction+0x84>
			relay1_off;
 80016fc:	2200      	movs	r2, #0
 80016fe:	2110      	movs	r1, #16
 8001700:	4805      	ldr	r0, [pc, #20]	; (8001718 <motor_fanction+0x8c>)
 8001702:	f001 f98e 	bl	8002a22 <HAL_GPIO_WritePin>
			relay2_off;
 8001706:	2200      	movs	r2, #0
 8001708:	2108      	movs	r1, #8
 800170a:	4803      	ldr	r0, [pc, #12]	; (8001718 <motor_fanction+0x8c>)
 800170c:	f001 f989 	bl	8002a22 <HAL_GPIO_WritePin>
}
 8001710:	bf00      	nop
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40010c00 	.word	0x40010c00

0800171c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr

08001728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800172e:	4b15      	ldr	r3, [pc, #84]	; (8001784 <HAL_MspInit+0x5c>)
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	4a14      	ldr	r2, [pc, #80]	; (8001784 <HAL_MspInit+0x5c>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6193      	str	r3, [r2, #24]
 800173a:	4b12      	ldr	r3, [pc, #72]	; (8001784 <HAL_MspInit+0x5c>)
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001746:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <HAL_MspInit+0x5c>)
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	4a0e      	ldr	r2, [pc, #56]	; (8001784 <HAL_MspInit+0x5c>)
 800174c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001750:	61d3      	str	r3, [r2, #28]
 8001752:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <HAL_MspInit+0x5c>)
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800175e:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <HAL_MspInit+0x60>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	4a04      	ldr	r2, [pc, #16]	; (8001788 <HAL_MspInit+0x60>)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800177a:	bf00      	nop
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr
 8001784:	40021000 	.word	0x40021000
 8001788:	40010000 	.word	0x40010000

0800178c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800179c:	e7fe      	b.n	800179c <HardFault_Handler+0x4>

0800179e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a2:	e7fe      	b.n	80017a2 <MemManage_Handler+0x4>

080017a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <BusFault_Handler+0x4>

080017aa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017ae:	e7fe      	b.n	80017ae <UsageFault_Handler+0x4>

080017b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr

080017bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr

080017c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr

080017d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017d8:	f000 fa2a 	bl	8001c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}

080017e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017e4:	4802      	ldr	r0, [pc, #8]	; (80017f0 <TIM2_IRQHandler+0x10>)
 80017e6:	f001 ff29 	bl	800363c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000248 	.word	0x20000248

080017f4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
 8001804:	e00a      	b.n	800181c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001806:	f3af 8000 	nop.w
 800180a:	4601      	mov	r1, r0
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	1c5a      	adds	r2, r3, #1
 8001810:	60ba      	str	r2, [r7, #8]
 8001812:	b2ca      	uxtb	r2, r1
 8001814:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	3301      	adds	r3, #1
 800181a:	617b      	str	r3, [r7, #20]
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	429a      	cmp	r2, r3
 8001822:	dbf0      	blt.n	8001806 <_read+0x12>
	}

return len;
 8001824:	687b      	ldr	r3, [r7, #4]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3718      	adds	r7, #24
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b086      	sub	sp, #24
 8001832:	af00      	add	r7, sp, #0
 8001834:	60f8      	str	r0, [r7, #12]
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
 800183e:	e009      	b.n	8001854 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	1c5a      	adds	r2, r3, #1
 8001844:	60ba      	str	r2, [r7, #8]
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fd09 	bl	8001260 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	3301      	adds	r3, #1
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	429a      	cmp	r2, r3
 800185a:	dbf1      	blt.n	8001840 <_write+0x12>
	}
	return len;
 800185c:	687b      	ldr	r3, [r7, #4]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <_close>:

int _close(int file)
{
 8001866:	b480      	push	{r7}
 8001868:	b083      	sub	sp, #12
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
	return -1;
 800186e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001872:	4618      	mov	r0, r3
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800188c:	605a      	str	r2, [r3, #4]
	return 0;
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr

0800189a <_isatty>:

int _isatty(int file)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
	return 1;
 80018a2:	2301      	movs	r3, #1
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr

080018ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b085      	sub	sp, #20
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	60f8      	str	r0, [r7, #12]
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
	return 0;
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr
	...

080018c8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <_sbrk+0x50>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d102      	bne.n	80018de <_sbrk+0x16>
		heap_end = &end;
 80018d8:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <_sbrk+0x50>)
 80018da:	4a10      	ldr	r2, [pc, #64]	; (800191c <_sbrk+0x54>)
 80018dc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80018de:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <_sbrk+0x50>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80018e4:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <_sbrk+0x50>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4413      	add	r3, r2
 80018ec:	466a      	mov	r2, sp
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d907      	bls.n	8001902 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80018f2:	f002 fbdf 	bl	80040b4 <__errno>
 80018f6:	4602      	mov	r2, r0
 80018f8:	230c      	movs	r3, #12
 80018fa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80018fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001900:	e006      	b.n	8001910 <_sbrk+0x48>
	}

	heap_end += incr;
 8001902:	4b05      	ldr	r3, [pc, #20]	; (8001918 <_sbrk+0x50>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	4a03      	ldr	r2, [pc, #12]	; (8001918 <_sbrk+0x50>)
 800190c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800190e:	68fb      	ldr	r3, [r7, #12]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3710      	adds	r7, #16
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	2000020c 	.word	0x2000020c
 800191c:	200002d0 	.word	0x200002d0

08001920 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001924:	4b15      	ldr	r3, [pc, #84]	; (800197c <SystemInit+0x5c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a14      	ldr	r2, [pc, #80]	; (800197c <SystemInit+0x5c>)
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001930:	4b12      	ldr	r3, [pc, #72]	; (800197c <SystemInit+0x5c>)
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	4911      	ldr	r1, [pc, #68]	; (800197c <SystemInit+0x5c>)
 8001936:	4b12      	ldr	r3, [pc, #72]	; (8001980 <SystemInit+0x60>)
 8001938:	4013      	ands	r3, r2
 800193a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800193c:	4b0f      	ldr	r3, [pc, #60]	; (800197c <SystemInit+0x5c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a0e      	ldr	r2, [pc, #56]	; (800197c <SystemInit+0x5c>)
 8001942:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800194a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800194c:	4b0b      	ldr	r3, [pc, #44]	; (800197c <SystemInit+0x5c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a0a      	ldr	r2, [pc, #40]	; (800197c <SystemInit+0x5c>)
 8001952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001956:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <SystemInit+0x5c>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	4a07      	ldr	r2, [pc, #28]	; (800197c <SystemInit+0x5c>)
 800195e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001962:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001964:	4b05      	ldr	r3, [pc, #20]	; (800197c <SystemInit+0x5c>)
 8001966:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800196a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800196c:	4b05      	ldr	r3, [pc, #20]	; (8001984 <SystemInit+0x64>)
 800196e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001972:	609a      	str	r2, [r3, #8]
#endif 
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr
 800197c:	40021000 	.word	0x40021000
 8001980:	f8ff0000 	.word	0xf8ff0000
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800198e:	f107 0308 	add.w	r3, r7, #8
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	609a      	str	r2, [r3, #8]
 800199a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800199c:	463b      	mov	r3, r7
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80019a4:	4b1e      	ldr	r3, [pc, #120]	; (8001a20 <MX_TIM2_Init+0x98>)
 80019a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000-1;
 80019ac:	4b1c      	ldr	r3, [pc, #112]	; (8001a20 <MX_TIM2_Init+0x98>)
 80019ae:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80019b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b4:	4b1a      	ldr	r3, [pc, #104]	; (8001a20 <MX_TIM2_Init+0x98>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80019ba:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <MX_TIM2_Init+0x98>)
 80019bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c2:	4b17      	ldr	r3, [pc, #92]	; (8001a20 <MX_TIM2_Init+0x98>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c8:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <MX_TIM2_Init+0x98>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019ce:	4814      	ldr	r0, [pc, #80]	; (8001a20 <MX_TIM2_Init+0x98>)
 80019d0:	f001 fde6 	bl	80035a0 <HAL_TIM_Base_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80019da:	f7ff fe9f 	bl	800171c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019e4:	f107 0308 	add.w	r3, r7, #8
 80019e8:	4619      	mov	r1, r3
 80019ea:	480d      	ldr	r0, [pc, #52]	; (8001a20 <MX_TIM2_Init+0x98>)
 80019ec:	f001 ff2e 	bl	800384c <HAL_TIM_ConfigClockSource>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80019f6:	f7ff fe91 	bl	800171c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019fa:	2300      	movs	r3, #0
 80019fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019fe:	2300      	movs	r3, #0
 8001a00:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a02:	463b      	mov	r3, r7
 8001a04:	4619      	mov	r1, r3
 8001a06:	4806      	ldr	r0, [pc, #24]	; (8001a20 <MX_TIM2_Init+0x98>)
 8001a08:	f002 f8f4 	bl	8003bf4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001a12:	f7ff fe83 	bl	800171c <Error_Handler>
  }

}
 8001a16:	bf00      	nop
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000248 	.word	0x20000248

08001a24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a34:	d113      	bne.n	8001a5e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a36:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <HAL_TIM_Base_MspInit+0x44>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	4a0b      	ldr	r2, [pc, #44]	; (8001a68 <HAL_TIM_Base_MspInit+0x44>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	61d3      	str	r3, [r2, #28]
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <HAL_TIM_Base_MspInit+0x44>)
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2100      	movs	r1, #0
 8001a52:	201c      	movs	r0, #28
 8001a54:	f000 fe3d 	bl	80026d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a58:	201c      	movs	r0, #28
 8001a5a:	f000 fe56 	bl	800270a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001a5e:	bf00      	nop
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40021000 	.word	0x40021000

08001a6c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001a70:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <MX_USART1_UART_Init+0x4c>)
 8001a72:	4a12      	ldr	r2, [pc, #72]	; (8001abc <MX_USART1_UART_Init+0x50>)
 8001a74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a76:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <MX_USART1_UART_Init+0x4c>)
 8001a78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a7e:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <MX_USART1_UART_Init+0x4c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a84:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <MX_USART1_UART_Init+0x4c>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <MX_USART1_UART_Init+0x4c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a90:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <MX_USART1_UART_Init+0x4c>)
 8001a92:	220c      	movs	r2, #12
 8001a94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a96:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <MX_USART1_UART_Init+0x4c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <MX_USART1_UART_Init+0x4c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001aa2:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <MX_USART1_UART_Init+0x4c>)
 8001aa4:	f002 f8fc 	bl	8003ca0 <HAL_UART_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001aae:	f7ff fe35 	bl	800171c <Error_Handler>
  }

}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000288 	.word	0x20000288
 8001abc:	40013800 	.word	0x40013800

08001ac0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	f107 0310 	add.w	r3, r7, #16
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a1c      	ldr	r2, [pc, #112]	; (8001b4c <HAL_UART_MspInit+0x8c>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d131      	bne.n	8001b44 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ae0:	4b1b      	ldr	r3, [pc, #108]	; (8001b50 <HAL_UART_MspInit+0x90>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	4a1a      	ldr	r2, [pc, #104]	; (8001b50 <HAL_UART_MspInit+0x90>)
 8001ae6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aea:	6193      	str	r3, [r2, #24]
 8001aec:	4b18      	ldr	r3, [pc, #96]	; (8001b50 <HAL_UART_MspInit+0x90>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af8:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <HAL_UART_MspInit+0x90>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	4a14      	ldr	r2, [pc, #80]	; (8001b50 <HAL_UART_MspInit+0x90>)
 8001afe:	f043 0304 	orr.w	r3, r3, #4
 8001b02:	6193      	str	r3, [r2, #24]
 8001b04:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <HAL_UART_MspInit+0x90>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1e:	f107 0310 	add.w	r3, r7, #16
 8001b22:	4619      	mov	r1, r3
 8001b24:	480b      	ldr	r0, [pc, #44]	; (8001b54 <HAL_UART_MspInit+0x94>)
 8001b26:	f000 fe0b 	bl	8002740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b38:	f107 0310 	add.w	r3, r7, #16
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4805      	ldr	r0, [pc, #20]	; (8001b54 <HAL_UART_MspInit+0x94>)
 8001b40:	f000 fdfe 	bl	8002740 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001b44:	bf00      	nop
 8001b46:	3720      	adds	r7, #32
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40013800 	.word	0x40013800
 8001b50:	40021000 	.word	0x40021000
 8001b54:	40010800 	.word	0x40010800

08001b58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001b58:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001b5a:	e003      	b.n	8001b64 <LoopCopyDataInit>

08001b5c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001b5c:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001b5e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001b60:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001b62:	3104      	adds	r1, #4

08001b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001b64:	480a      	ldr	r0, [pc, #40]	; (8001b90 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001b66:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001b68:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001b6a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001b6c:	d3f6      	bcc.n	8001b5c <CopyDataInit>
  ldr r2, =_sbss
 8001b6e:	4a0a      	ldr	r2, [pc, #40]	; (8001b98 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001b70:	e002      	b.n	8001b78 <LoopFillZerobss>

08001b72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001b72:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001b74:	f842 3b04 	str.w	r3, [r2], #4

08001b78 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001b78:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001b7a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001b7c:	d3f9      	bcc.n	8001b72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b7e:	f7ff fecf 	bl	8001920 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b82:	f002 fa9d 	bl	80040c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b86:	f7ff fc17 	bl	80013b8 <main>
  bx lr
 8001b8a:	4770      	bx	lr
  ldr r3, =_sidata
 8001b8c:	08008860 	.word	0x08008860
  ldr r0, =_sdata
 8001b90:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001b94:	200001e4 	.word	0x200001e4
  ldr r2, =_sbss
 8001b98:	200001e4 	.word	0x200001e4
  ldr r3, = _ebss
 8001b9c:	200002d0 	.word	0x200002d0

08001ba0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ba0:	e7fe      	b.n	8001ba0 <ADC1_2_IRQHandler>
	...

08001ba4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ba8:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <HAL_Init+0x28>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a07      	ldr	r2, [pc, #28]	; (8001bcc <HAL_Init+0x28>)
 8001bae:	f043 0310 	orr.w	r3, r3, #16
 8001bb2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb4:	2003      	movs	r0, #3
 8001bb6:	f000 fd81 	bl	80026bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bba:	2000      	movs	r0, #0
 8001bbc:	f000 f808 	bl	8001bd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bc0:	f7ff fdb2 	bl	8001728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40022000 	.word	0x40022000

08001bd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bd8:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <HAL_InitTick+0x54>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <HAL_InitTick+0x58>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	4619      	mov	r1, r3
 8001be2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f000 fd99 	bl	8002726 <HAL_SYSTICK_Config>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e00e      	b.n	8001c1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b0f      	cmp	r3, #15
 8001c02:	d80a      	bhi.n	8001c1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c04:	2200      	movs	r2, #0
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	f04f 30ff 	mov.w	r0, #4294967295
 8001c0c:	f000 fd61 	bl	80026d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c10:	4a06      	ldr	r2, [pc, #24]	; (8001c2c <HAL_InitTick+0x5c>)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
 8001c18:	e000      	b.n	8001c1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20000008 	.word	0x20000008
 8001c28:	20000010 	.word	0x20000010
 8001c2c:	2000000c 	.word	0x2000000c

08001c30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c34:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <HAL_IncTick+0x1c>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <HAL_IncTick+0x20>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4413      	add	r3, r2
 8001c40:	4a03      	ldr	r2, [pc, #12]	; (8001c50 <HAL_IncTick+0x20>)
 8001c42:	6013      	str	r3, [r2, #0]
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr
 8001c4c:	20000010 	.word	0x20000010
 8001c50:	200002c8 	.word	0x200002c8

08001c54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  return uwTick;
 8001c58:	4b02      	ldr	r3, [pc, #8]	; (8001c64 <HAL_GetTick+0x10>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr
 8001c64:	200002c8 	.word	0x200002c8

08001c68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c70:	f7ff fff0 	bl	8001c54 <HAL_GetTick>
 8001c74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c80:	d005      	beq.n	8001c8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <HAL_Delay+0x40>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	461a      	mov	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c8e:	bf00      	nop
 8001c90:	f7ff ffe0 	bl	8001c54 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d8f7      	bhi.n	8001c90 <HAL_Delay+0x28>
  {
  }
}
 8001ca0:	bf00      	nop
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20000010 	.word	0x20000010

08001cac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e0be      	b.n	8001e4c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d109      	bne.n	8001cf0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff f9d8 	bl	80010a0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 fbdd 	bl	80024b0 <ADC_ConversionStop_Disable>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfe:	f003 0310 	and.w	r3, r3, #16
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f040 8099 	bne.w	8001e3a <HAL_ADC_Init+0x18e>
 8001d08:	7dfb      	ldrb	r3, [r7, #23]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f040 8095 	bne.w	8001e3a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d14:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d18:	f023 0302 	bic.w	r3, r3, #2
 8001d1c:	f043 0202 	orr.w	r2, r3, #2
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d2c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	7b1b      	ldrb	r3, [r3, #12]
 8001d32:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d34:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d44:	d003      	beq.n	8001d4e <HAL_ADC_Init+0xa2>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d102      	bne.n	8001d54 <HAL_ADC_Init+0xa8>
 8001d4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d52:	e000      	b.n	8001d56 <HAL_ADC_Init+0xaa>
 8001d54:	2300      	movs	r3, #0
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	7d1b      	ldrb	r3, [r3, #20]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d119      	bne.n	8001d98 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	7b1b      	ldrb	r3, [r3, #12]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d109      	bne.n	8001d80 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	3b01      	subs	r3, #1
 8001d72:	035a      	lsls	r2, r3, #13
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	e00b      	b.n	8001d98 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d84:	f043 0220 	orr.w	r2, r3, #32
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d90:	f043 0201 	orr.w	r2, r3, #1
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	430a      	orrs	r2, r1
 8001daa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689a      	ldr	r2, [r3, #8]
 8001db2:	4b28      	ldr	r3, [pc, #160]	; (8001e54 <HAL_ADC_Init+0x1a8>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6812      	ldr	r2, [r2, #0]
 8001dba:	68b9      	ldr	r1, [r7, #8]
 8001dbc:	430b      	orrs	r3, r1
 8001dbe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dc8:	d003      	beq.n	8001dd2 <HAL_ADC_Init+0x126>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d104      	bne.n	8001ddc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	051b      	lsls	r3, r3, #20
 8001dda:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689a      	ldr	r2, [r3, #8]
 8001df6:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <HAL_ADC_Init+0x1ac>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d10b      	bne.n	8001e18 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0a:	f023 0303 	bic.w	r3, r3, #3
 8001e0e:	f043 0201 	orr.w	r2, r3, #1
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e16:	e018      	b.n	8001e4a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1c:	f023 0312 	bic.w	r3, r3, #18
 8001e20:	f043 0210 	orr.w	r2, r3, #16
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2c:	f043 0201 	orr.w	r2, r3, #1
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e38:	e007      	b.n	8001e4a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3e:	f043 0210 	orr.w	r2, r3, #16
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	ffe1f7fd 	.word	0xffe1f7fd
 8001e58:	ff1f0efe 	.word	0xff1f0efe

08001e5c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e64:	2300      	movs	r3, #0
 8001e66:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d101      	bne.n	8001e76 <HAL_ADC_Start+0x1a>
 8001e72:	2302      	movs	r3, #2
 8001e74:	e098      	b.n	8001fa8 <HAL_ADC_Start+0x14c>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 fac4 	bl	800240c <ADC_Enable>
 8001e84:	4603      	mov	r3, r0
 8001e86:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001e88:	7bfb      	ldrb	r3, [r7, #15]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f040 8087 	bne.w	8001f9e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e98:	f023 0301 	bic.w	r3, r3, #1
 8001e9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a41      	ldr	r2, [pc, #260]	; (8001fb0 <HAL_ADC_Start+0x154>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d105      	bne.n	8001eba <HAL_ADC_Start+0x5e>
 8001eae:	4b41      	ldr	r3, [pc, #260]	; (8001fb4 <HAL_ADC_Start+0x158>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d115      	bne.n	8001ee6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d026      	beq.n	8001f22 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001edc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ee4:	e01d      	b.n	8001f22 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a2f      	ldr	r2, [pc, #188]	; (8001fb4 <HAL_ADC_Start+0x158>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d004      	beq.n	8001f06 <HAL_ADC_Start+0xaa>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a2b      	ldr	r2, [pc, #172]	; (8001fb0 <HAL_ADC_Start+0x154>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d10d      	bne.n	8001f22 <HAL_ADC_Start+0xc6>
 8001f06:	4b2b      	ldr	r3, [pc, #172]	; (8001fb4 <HAL_ADC_Start+0x158>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d007      	beq.n	8001f22 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f16:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f1a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d006      	beq.n	8001f3c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f32:	f023 0206 	bic.w	r2, r3, #6
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f3a:	e002      	b.n	8001f42 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f06f 0202 	mvn.w	r2, #2
 8001f52:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001f5e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f62:	d113      	bne.n	8001f8c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001f68:	4a11      	ldr	r2, [pc, #68]	; (8001fb0 <HAL_ADC_Start+0x154>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d105      	bne.n	8001f7a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001f6e:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <HAL_ADC_Start+0x158>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d108      	bne.n	8001f8c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001f88:	609a      	str	r2, [r3, #8]
 8001f8a:	e00c      	b.n	8001fa6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	e003      	b.n	8001fa6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40012800 	.word	0x40012800
 8001fb4:	40012400 	.word	0x40012400

08001fb8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d101      	bne.n	8001fd2 <HAL_ADC_Stop+0x1a>
 8001fce:	2302      	movs	r3, #2
 8001fd0:	e01a      	b.n	8002008 <HAL_ADC_Stop+0x50>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 fa68 	bl	80024b0 <ADC_ConversionStop_Disable>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d109      	bne.n	8001ffe <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ff2:	f023 0301 	bic.w	r3, r3, #1
 8001ff6:	f043 0201 	orr.w	r2, r3, #1
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002006:	7bfb      	ldrb	r3, [r7, #15]
}
 8002008:	4618      	mov	r0, r3
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002010:	b590      	push	{r4, r7, lr}
 8002012:	b087      	sub	sp, #28
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800201e:	2300      	movs	r3, #0
 8002020:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002022:	2300      	movs	r3, #0
 8002024:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002026:	f7ff fe15 	bl	8001c54 <HAL_GetTick>
 800202a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00b      	beq.n	8002052 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203e:	f043 0220 	orr.w	r2, r3, #32
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e0c8      	b.n	80021e4 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205c:	2b00      	cmp	r3, #0
 800205e:	d12a      	bne.n	80020b6 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002066:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800206a:	2b00      	cmp	r3, #0
 800206c:	d123      	bne.n	80020b6 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800206e:	e01a      	b.n	80020a6 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002076:	d016      	beq.n	80020a6 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d007      	beq.n	800208e <HAL_ADC_PollForConversion+0x7e>
 800207e:	f7ff fde9 	bl	8001c54 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	429a      	cmp	r2, r3
 800208c:	d20b      	bcs.n	80020a6 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002092:	f043 0204 	orr.w	r2, r3, #4
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e09e      	b.n	80021e4 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0dd      	beq.n	8002070 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80020b4:	e06c      	b.n	8002190 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80020b6:	4b4d      	ldr	r3, [pc, #308]	; (80021ec <HAL_ADC_PollForConversion+0x1dc>)
 80020b8:	681c      	ldr	r4, [r3, #0]
 80020ba:	2002      	movs	r0, #2
 80020bc:	f001 f9b4 	bl	8003428 <HAL_RCCEx_GetPeriphCLKFreq>
 80020c0:	4603      	mov	r3, r0
 80020c2:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6919      	ldr	r1, [r3, #16]
 80020cc:	4b48      	ldr	r3, [pc, #288]	; (80021f0 <HAL_ADC_PollForConversion+0x1e0>)
 80020ce:	400b      	ands	r3, r1
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d118      	bne.n	8002106 <HAL_ADC_PollForConversion+0xf6>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68d9      	ldr	r1, [r3, #12]
 80020da:	4b46      	ldr	r3, [pc, #280]	; (80021f4 <HAL_ADC_PollForConversion+0x1e4>)
 80020dc:	400b      	ands	r3, r1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d111      	bne.n	8002106 <HAL_ADC_PollForConversion+0xf6>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6919      	ldr	r1, [r3, #16]
 80020e8:	4b43      	ldr	r3, [pc, #268]	; (80021f8 <HAL_ADC_PollForConversion+0x1e8>)
 80020ea:	400b      	ands	r3, r1
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d108      	bne.n	8002102 <HAL_ADC_PollForConversion+0xf2>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68d9      	ldr	r1, [r3, #12]
 80020f6:	4b41      	ldr	r3, [pc, #260]	; (80021fc <HAL_ADC_PollForConversion+0x1ec>)
 80020f8:	400b      	ands	r3, r1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_ADC_PollForConversion+0xf2>
 80020fe:	2314      	movs	r3, #20
 8002100:	e020      	b.n	8002144 <HAL_ADC_PollForConversion+0x134>
 8002102:	2329      	movs	r3, #41	; 0x29
 8002104:	e01e      	b.n	8002144 <HAL_ADC_PollForConversion+0x134>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6919      	ldr	r1, [r3, #16]
 800210c:	4b3a      	ldr	r3, [pc, #232]	; (80021f8 <HAL_ADC_PollForConversion+0x1e8>)
 800210e:	400b      	ands	r3, r1
 8002110:	2b00      	cmp	r3, #0
 8002112:	d106      	bne.n	8002122 <HAL_ADC_PollForConversion+0x112>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68d9      	ldr	r1, [r3, #12]
 800211a:	4b38      	ldr	r3, [pc, #224]	; (80021fc <HAL_ADC_PollForConversion+0x1ec>)
 800211c:	400b      	ands	r3, r1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00d      	beq.n	800213e <HAL_ADC_PollForConversion+0x12e>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6919      	ldr	r1, [r3, #16]
 8002128:	4b35      	ldr	r3, [pc, #212]	; (8002200 <HAL_ADC_PollForConversion+0x1f0>)
 800212a:	400b      	ands	r3, r1
 800212c:	2b00      	cmp	r3, #0
 800212e:	d108      	bne.n	8002142 <HAL_ADC_PollForConversion+0x132>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68d9      	ldr	r1, [r3, #12]
 8002136:	4b32      	ldr	r3, [pc, #200]	; (8002200 <HAL_ADC_PollForConversion+0x1f0>)
 8002138:	400b      	ands	r3, r1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_ADC_PollForConversion+0x132>
 800213e:	2354      	movs	r3, #84	; 0x54
 8002140:	e000      	b.n	8002144 <HAL_ADC_PollForConversion+0x134>
 8002142:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002144:	fb02 f303 	mul.w	r3, r2, r3
 8002148:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800214a:	e01d      	b.n	8002188 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002152:	d016      	beq.n	8002182 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d007      	beq.n	800216a <HAL_ADC_PollForConversion+0x15a>
 800215a:	f7ff fd7b 	bl	8001c54 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d20b      	bcs.n	8002182 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216e:	f043 0204 	orr.w	r2, r3, #4
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e030      	b.n	80021e4 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	3301      	adds	r3, #1
 8002186:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	429a      	cmp	r2, r3
 800218e:	d8dd      	bhi.n	800214c <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f06f 0212 	mvn.w	r2, #18
 8002198:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80021b0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80021b4:	d115      	bne.n	80021e2 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d111      	bne.n	80021e2 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d105      	bne.n	80021e2 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021da:	f043 0201 	orr.w	r2, r3, #1
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	371c      	adds	r7, #28
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd90      	pop	{r4, r7, pc}
 80021ec:	20000008 	.word	0x20000008
 80021f0:	24924924 	.word	0x24924924
 80021f4:	00924924 	.word	0x00924924
 80021f8:	12492492 	.word	0x12492492
 80021fc:	00492492 	.word	0x00492492
 8002200:	00249249 	.word	0x00249249

08002204 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002212:	4618      	mov	r0, r3
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr

0800221c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002226:	2300      	movs	r3, #0
 8002228:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800222a:	2300      	movs	r3, #0
 800222c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002234:	2b01      	cmp	r3, #1
 8002236:	d101      	bne.n	800223c <HAL_ADC_ConfigChannel+0x20>
 8002238:	2302      	movs	r3, #2
 800223a:	e0dc      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x1da>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b06      	cmp	r3, #6
 800224a:	d81c      	bhi.n	8002286 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685a      	ldr	r2, [r3, #4]
 8002256:	4613      	mov	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	3b05      	subs	r3, #5
 800225e:	221f      	movs	r2, #31
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	4019      	ands	r1, r3
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	6818      	ldr	r0, [r3, #0]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	3b05      	subs	r3, #5
 8002278:	fa00 f203 	lsl.w	r2, r0, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	430a      	orrs	r2, r1
 8002282:	635a      	str	r2, [r3, #52]	; 0x34
 8002284:	e03c      	b.n	8002300 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b0c      	cmp	r3, #12
 800228c:	d81c      	bhi.n	80022c8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	4613      	mov	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	3b23      	subs	r3, #35	; 0x23
 80022a0:	221f      	movs	r2, #31
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	43db      	mvns	r3, r3
 80022a8:	4019      	ands	r1, r3
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	6818      	ldr	r0, [r3, #0]
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	3b23      	subs	r3, #35	; 0x23
 80022ba:	fa00 f203 	lsl.w	r2, r0, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	631a      	str	r2, [r3, #48]	; 0x30
 80022c6:	e01b      	b.n	8002300 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	4613      	mov	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	3b41      	subs	r3, #65	; 0x41
 80022da:	221f      	movs	r2, #31
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	4019      	ands	r1, r3
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	6818      	ldr	r0, [r3, #0]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	4613      	mov	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	3b41      	subs	r3, #65	; 0x41
 80022f4:	fa00 f203 	lsl.w	r2, r0, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	430a      	orrs	r2, r1
 80022fe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2b09      	cmp	r3, #9
 8002306:	d91c      	bls.n	8002342 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68d9      	ldr	r1, [r3, #12]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	4613      	mov	r3, r2
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	4413      	add	r3, r2
 8002318:	3b1e      	subs	r3, #30
 800231a:	2207      	movs	r2, #7
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	4019      	ands	r1, r3
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	6898      	ldr	r0, [r3, #8]
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	4613      	mov	r3, r2
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	4413      	add	r3, r2
 8002332:	3b1e      	subs	r3, #30
 8002334:	fa00 f203 	lsl.w	r2, r0, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	60da      	str	r2, [r3, #12]
 8002340:	e019      	b.n	8002376 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6919      	ldr	r1, [r3, #16]
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4613      	mov	r3, r2
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	4413      	add	r3, r2
 8002352:	2207      	movs	r2, #7
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	4019      	ands	r1, r3
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	6898      	ldr	r0, [r3, #8]
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4613      	mov	r3, r2
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4413      	add	r3, r2
 800236a:	fa00 f203 	lsl.w	r2, r0, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	430a      	orrs	r2, r1
 8002374:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2b10      	cmp	r3, #16
 800237c:	d003      	beq.n	8002386 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002382:	2b11      	cmp	r3, #17
 8002384:	d132      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a1d      	ldr	r2, [pc, #116]	; (8002400 <HAL_ADC_ConfigChannel+0x1e4>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d125      	bne.n	80023dc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d126      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80023ac:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2b10      	cmp	r3, #16
 80023b4:	d11a      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023b6:	4b13      	ldr	r3, [pc, #76]	; (8002404 <HAL_ADC_ConfigChannel+0x1e8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a13      	ldr	r2, [pc, #76]	; (8002408 <HAL_ADC_ConfigChannel+0x1ec>)
 80023bc:	fba2 2303 	umull	r2, r3, r2, r3
 80023c0:	0c9a      	lsrs	r2, r3, #18
 80023c2:	4613      	mov	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023cc:	e002      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	3b01      	subs	r3, #1
 80023d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f9      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x1b2>
 80023da:	e007      	b.n	80023ec <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e0:	f043 0220 	orr.w	r2, r3, #32
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bc80      	pop	{r7}
 80023fe:	4770      	bx	lr
 8002400:	40012400 	.word	0x40012400
 8002404:	20000008 	.word	0x20000008
 8002408:	431bde83 	.word	0x431bde83

0800240c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002414:	2300      	movs	r3, #0
 8002416:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002418:	2300      	movs	r3, #0
 800241a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b01      	cmp	r3, #1
 8002428:	d039      	beq.n	800249e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f042 0201 	orr.w	r2, r2, #1
 8002438:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800243a:	4b1b      	ldr	r3, [pc, #108]	; (80024a8 <ADC_Enable+0x9c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a1b      	ldr	r2, [pc, #108]	; (80024ac <ADC_Enable+0xa0>)
 8002440:	fba2 2303 	umull	r2, r3, r2, r3
 8002444:	0c9b      	lsrs	r3, r3, #18
 8002446:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002448:	e002      	b.n	8002450 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	3b01      	subs	r3, #1
 800244e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1f9      	bne.n	800244a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002456:	f7ff fbfd 	bl	8001c54 <HAL_GetTick>
 800245a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800245c:	e018      	b.n	8002490 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800245e:	f7ff fbf9 	bl	8001c54 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d911      	bls.n	8002490 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002470:	f043 0210 	orr.w	r2, r3, #16
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247c:	f043 0201 	orr.w	r2, r3, #1
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e007      	b.n	80024a0 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b01      	cmp	r3, #1
 800249c:	d1df      	bne.n	800245e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	20000008 	.word	0x20000008
 80024ac:	431bde83 	.word	0x431bde83

080024b0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d127      	bne.n	800251a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 0201 	bic.w	r2, r2, #1
 80024d8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024da:	f7ff fbbb 	bl	8001c54 <HAL_GetTick>
 80024de:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80024e0:	e014      	b.n	800250c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80024e2:	f7ff fbb7 	bl	8001c54 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d90d      	bls.n	800250c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f4:	f043 0210 	orr.w	r2, r3, #16
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002500:	f043 0201 	orr.w	r2, r3, #1
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e007      	b.n	800251c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b01      	cmp	r3, #1
 8002518:	d0e3      	beq.n	80024e2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002534:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <__NVIC_SetPriorityGrouping+0x44>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002540:	4013      	ands	r3, r2
 8002542:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800254c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002556:	4a04      	ldr	r2, [pc, #16]	; (8002568 <__NVIC_SetPriorityGrouping+0x44>)
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	60d3      	str	r3, [r2, #12]
}
 800255c:	bf00      	nop
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	e000ed00 	.word	0xe000ed00

0800256c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002570:	4b04      	ldr	r3, [pc, #16]	; (8002584 <__NVIC_GetPriorityGrouping+0x18>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	0a1b      	lsrs	r3, r3, #8
 8002576:	f003 0307 	and.w	r3, r3, #7
}
 800257a:	4618      	mov	r0, r3
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	e000ed00 	.word	0xe000ed00

08002588 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002596:	2b00      	cmp	r3, #0
 8002598:	db0b      	blt.n	80025b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800259a:	79fb      	ldrb	r3, [r7, #7]
 800259c:	f003 021f 	and.w	r2, r3, #31
 80025a0:	4906      	ldr	r1, [pc, #24]	; (80025bc <__NVIC_EnableIRQ+0x34>)
 80025a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a6:	095b      	lsrs	r3, r3, #5
 80025a8:	2001      	movs	r0, #1
 80025aa:	fa00 f202 	lsl.w	r2, r0, r2
 80025ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr
 80025bc:	e000e100 	.word	0xe000e100

080025c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	6039      	str	r1, [r7, #0]
 80025ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	db0a      	blt.n	80025ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	490c      	ldr	r1, [pc, #48]	; (800260c <__NVIC_SetPriority+0x4c>)
 80025da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025de:	0112      	lsls	r2, r2, #4
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	440b      	add	r3, r1
 80025e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025e8:	e00a      	b.n	8002600 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	4908      	ldr	r1, [pc, #32]	; (8002610 <__NVIC_SetPriority+0x50>)
 80025f0:	79fb      	ldrb	r3, [r7, #7]
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	3b04      	subs	r3, #4
 80025f8:	0112      	lsls	r2, r2, #4
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	440b      	add	r3, r1
 80025fe:	761a      	strb	r2, [r3, #24]
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	bc80      	pop	{r7}
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	e000e100 	.word	0xe000e100
 8002610:	e000ed00 	.word	0xe000ed00

08002614 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002614:	b480      	push	{r7}
 8002616:	b089      	sub	sp, #36	; 0x24
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f1c3 0307 	rsb	r3, r3, #7
 800262e:	2b04      	cmp	r3, #4
 8002630:	bf28      	it	cs
 8002632:	2304      	movcs	r3, #4
 8002634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	3304      	adds	r3, #4
 800263a:	2b06      	cmp	r3, #6
 800263c:	d902      	bls.n	8002644 <NVIC_EncodePriority+0x30>
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3b03      	subs	r3, #3
 8002642:	e000      	b.n	8002646 <NVIC_EncodePriority+0x32>
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002648:	f04f 32ff 	mov.w	r2, #4294967295
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43da      	mvns	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	401a      	ands	r2, r3
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800265c:	f04f 31ff 	mov.w	r1, #4294967295
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	fa01 f303 	lsl.w	r3, r1, r3
 8002666:	43d9      	mvns	r1, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800266c:	4313      	orrs	r3, r2
         );
}
 800266e:	4618      	mov	r0, r3
 8002670:	3724      	adds	r7, #36	; 0x24
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr

08002678 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3b01      	subs	r3, #1
 8002684:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002688:	d301      	bcc.n	800268e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800268a:	2301      	movs	r3, #1
 800268c:	e00f      	b.n	80026ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800268e:	4a0a      	ldr	r2, [pc, #40]	; (80026b8 <SysTick_Config+0x40>)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3b01      	subs	r3, #1
 8002694:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002696:	210f      	movs	r1, #15
 8002698:	f04f 30ff 	mov.w	r0, #4294967295
 800269c:	f7ff ff90 	bl	80025c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026a0:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <SysTick_Config+0x40>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026a6:	4b04      	ldr	r3, [pc, #16]	; (80026b8 <SysTick_Config+0x40>)
 80026a8:	2207      	movs	r2, #7
 80026aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	e000e010 	.word	0xe000e010

080026bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f7ff ff2d 	bl	8002524 <__NVIC_SetPriorityGrouping>
}
 80026ca:	bf00      	nop
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b086      	sub	sp, #24
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	4603      	mov	r3, r0
 80026da:	60b9      	str	r1, [r7, #8]
 80026dc:	607a      	str	r2, [r7, #4]
 80026de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026e4:	f7ff ff42 	bl	800256c <__NVIC_GetPriorityGrouping>
 80026e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	68b9      	ldr	r1, [r7, #8]
 80026ee:	6978      	ldr	r0, [r7, #20]
 80026f0:	f7ff ff90 	bl	8002614 <NVIC_EncodePriority>
 80026f4:	4602      	mov	r2, r0
 80026f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026fa:	4611      	mov	r1, r2
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff ff5f 	bl	80025c0 <__NVIC_SetPriority>
}
 8002702:	bf00      	nop
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b082      	sub	sp, #8
 800270e:	af00      	add	r7, sp, #0
 8002710:	4603      	mov	r3, r0
 8002712:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff ff35 	bl	8002588 <__NVIC_EnableIRQ>
}
 800271e:	bf00      	nop
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b082      	sub	sp, #8
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7ff ffa2 	bl	8002678 <SysTick_Config>
 8002734:	4603      	mov	r3, r0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
	...

08002740 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002740:	b480      	push	{r7}
 8002742:	b08b      	sub	sp, #44	; 0x2c
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800274a:	2300      	movs	r3, #0
 800274c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800274e:	2300      	movs	r3, #0
 8002750:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002752:	e127      	b.n	80029a4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002754:	2201      	movs	r2, #1
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	69fa      	ldr	r2, [r7, #28]
 8002764:	4013      	ands	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	429a      	cmp	r2, r3
 800276e:	f040 8116 	bne.w	800299e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b12      	cmp	r3, #18
 8002778:	d034      	beq.n	80027e4 <HAL_GPIO_Init+0xa4>
 800277a:	2b12      	cmp	r3, #18
 800277c:	d80d      	bhi.n	800279a <HAL_GPIO_Init+0x5a>
 800277e:	2b02      	cmp	r3, #2
 8002780:	d02b      	beq.n	80027da <HAL_GPIO_Init+0x9a>
 8002782:	2b02      	cmp	r3, #2
 8002784:	d804      	bhi.n	8002790 <HAL_GPIO_Init+0x50>
 8002786:	2b00      	cmp	r3, #0
 8002788:	d031      	beq.n	80027ee <HAL_GPIO_Init+0xae>
 800278a:	2b01      	cmp	r3, #1
 800278c:	d01c      	beq.n	80027c8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800278e:	e048      	b.n	8002822 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002790:	2b03      	cmp	r3, #3
 8002792:	d043      	beq.n	800281c <HAL_GPIO_Init+0xdc>
 8002794:	2b11      	cmp	r3, #17
 8002796:	d01b      	beq.n	80027d0 <HAL_GPIO_Init+0x90>
          break;
 8002798:	e043      	b.n	8002822 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800279a:	4a89      	ldr	r2, [pc, #548]	; (80029c0 <HAL_GPIO_Init+0x280>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d026      	beq.n	80027ee <HAL_GPIO_Init+0xae>
 80027a0:	4a87      	ldr	r2, [pc, #540]	; (80029c0 <HAL_GPIO_Init+0x280>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d806      	bhi.n	80027b4 <HAL_GPIO_Init+0x74>
 80027a6:	4a87      	ldr	r2, [pc, #540]	; (80029c4 <HAL_GPIO_Init+0x284>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d020      	beq.n	80027ee <HAL_GPIO_Init+0xae>
 80027ac:	4a86      	ldr	r2, [pc, #536]	; (80029c8 <HAL_GPIO_Init+0x288>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d01d      	beq.n	80027ee <HAL_GPIO_Init+0xae>
          break;
 80027b2:	e036      	b.n	8002822 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80027b4:	4a85      	ldr	r2, [pc, #532]	; (80029cc <HAL_GPIO_Init+0x28c>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d019      	beq.n	80027ee <HAL_GPIO_Init+0xae>
 80027ba:	4a85      	ldr	r2, [pc, #532]	; (80029d0 <HAL_GPIO_Init+0x290>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d016      	beq.n	80027ee <HAL_GPIO_Init+0xae>
 80027c0:	4a84      	ldr	r2, [pc, #528]	; (80029d4 <HAL_GPIO_Init+0x294>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d013      	beq.n	80027ee <HAL_GPIO_Init+0xae>
          break;
 80027c6:	e02c      	b.n	8002822 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	623b      	str	r3, [r7, #32]
          break;
 80027ce:	e028      	b.n	8002822 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	3304      	adds	r3, #4
 80027d6:	623b      	str	r3, [r7, #32]
          break;
 80027d8:	e023      	b.n	8002822 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	3308      	adds	r3, #8
 80027e0:	623b      	str	r3, [r7, #32]
          break;
 80027e2:	e01e      	b.n	8002822 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	330c      	adds	r3, #12
 80027ea:	623b      	str	r3, [r7, #32]
          break;
 80027ec:	e019      	b.n	8002822 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d102      	bne.n	80027fc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027f6:	2304      	movs	r3, #4
 80027f8:	623b      	str	r3, [r7, #32]
          break;
 80027fa:	e012      	b.n	8002822 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d105      	bne.n	8002810 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002804:	2308      	movs	r3, #8
 8002806:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69fa      	ldr	r2, [r7, #28]
 800280c:	611a      	str	r2, [r3, #16]
          break;
 800280e:	e008      	b.n	8002822 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002810:	2308      	movs	r3, #8
 8002812:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	69fa      	ldr	r2, [r7, #28]
 8002818:	615a      	str	r2, [r3, #20]
          break;
 800281a:	e002      	b.n	8002822 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800281c:	2300      	movs	r3, #0
 800281e:	623b      	str	r3, [r7, #32]
          break;
 8002820:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	2bff      	cmp	r3, #255	; 0xff
 8002826:	d801      	bhi.n	800282c <HAL_GPIO_Init+0xec>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	e001      	b.n	8002830 <HAL_GPIO_Init+0xf0>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3304      	adds	r3, #4
 8002830:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	2bff      	cmp	r3, #255	; 0xff
 8002836:	d802      	bhi.n	800283e <HAL_GPIO_Init+0xfe>
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	e002      	b.n	8002844 <HAL_GPIO_Init+0x104>
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	3b08      	subs	r3, #8
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	210f      	movs	r1, #15
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	fa01 f303 	lsl.w	r3, r1, r3
 8002852:	43db      	mvns	r3, r3
 8002854:	401a      	ands	r2, r3
 8002856:	6a39      	ldr	r1, [r7, #32]
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	fa01 f303 	lsl.w	r3, r1, r3
 800285e:	431a      	orrs	r2, r3
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 8096 	beq.w	800299e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002872:	4b59      	ldr	r3, [pc, #356]	; (80029d8 <HAL_GPIO_Init+0x298>)
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	4a58      	ldr	r2, [pc, #352]	; (80029d8 <HAL_GPIO_Init+0x298>)
 8002878:	f043 0301 	orr.w	r3, r3, #1
 800287c:	6193      	str	r3, [r2, #24]
 800287e:	4b56      	ldr	r3, [pc, #344]	; (80029d8 <HAL_GPIO_Init+0x298>)
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	60bb      	str	r3, [r7, #8]
 8002888:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800288a:	4a54      	ldr	r2, [pc, #336]	; (80029dc <HAL_GPIO_Init+0x29c>)
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	089b      	lsrs	r3, r3, #2
 8002890:	3302      	adds	r3, #2
 8002892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002896:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	220f      	movs	r2, #15
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	43db      	mvns	r3, r3
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	4013      	ands	r3, r2
 80028ac:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a4b      	ldr	r2, [pc, #300]	; (80029e0 <HAL_GPIO_Init+0x2a0>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d013      	beq.n	80028de <HAL_GPIO_Init+0x19e>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a4a      	ldr	r2, [pc, #296]	; (80029e4 <HAL_GPIO_Init+0x2a4>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d00d      	beq.n	80028da <HAL_GPIO_Init+0x19a>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a49      	ldr	r2, [pc, #292]	; (80029e8 <HAL_GPIO_Init+0x2a8>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d007      	beq.n	80028d6 <HAL_GPIO_Init+0x196>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a48      	ldr	r2, [pc, #288]	; (80029ec <HAL_GPIO_Init+0x2ac>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d101      	bne.n	80028d2 <HAL_GPIO_Init+0x192>
 80028ce:	2303      	movs	r3, #3
 80028d0:	e006      	b.n	80028e0 <HAL_GPIO_Init+0x1a0>
 80028d2:	2304      	movs	r3, #4
 80028d4:	e004      	b.n	80028e0 <HAL_GPIO_Init+0x1a0>
 80028d6:	2302      	movs	r3, #2
 80028d8:	e002      	b.n	80028e0 <HAL_GPIO_Init+0x1a0>
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <HAL_GPIO_Init+0x1a0>
 80028de:	2300      	movs	r3, #0
 80028e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028e2:	f002 0203 	and.w	r2, r2, #3
 80028e6:	0092      	lsls	r2, r2, #2
 80028e8:	4093      	lsls	r3, r2
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028f0:	493a      	ldr	r1, [pc, #232]	; (80029dc <HAL_GPIO_Init+0x29c>)
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	089b      	lsrs	r3, r3, #2
 80028f6:	3302      	adds	r3, #2
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d006      	beq.n	8002918 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800290a:	4b39      	ldr	r3, [pc, #228]	; (80029f0 <HAL_GPIO_Init+0x2b0>)
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	4938      	ldr	r1, [pc, #224]	; (80029f0 <HAL_GPIO_Init+0x2b0>)
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	4313      	orrs	r3, r2
 8002914:	600b      	str	r3, [r1, #0]
 8002916:	e006      	b.n	8002926 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002918:	4b35      	ldr	r3, [pc, #212]	; (80029f0 <HAL_GPIO_Init+0x2b0>)
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	43db      	mvns	r3, r3
 8002920:	4933      	ldr	r1, [pc, #204]	; (80029f0 <HAL_GPIO_Init+0x2b0>)
 8002922:	4013      	ands	r3, r2
 8002924:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d006      	beq.n	8002940 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002932:	4b2f      	ldr	r3, [pc, #188]	; (80029f0 <HAL_GPIO_Init+0x2b0>)
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	492e      	ldr	r1, [pc, #184]	; (80029f0 <HAL_GPIO_Init+0x2b0>)
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	4313      	orrs	r3, r2
 800293c:	604b      	str	r3, [r1, #4]
 800293e:	e006      	b.n	800294e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002940:	4b2b      	ldr	r3, [pc, #172]	; (80029f0 <HAL_GPIO_Init+0x2b0>)
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	43db      	mvns	r3, r3
 8002948:	4929      	ldr	r1, [pc, #164]	; (80029f0 <HAL_GPIO_Init+0x2b0>)
 800294a:	4013      	ands	r3, r2
 800294c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d006      	beq.n	8002968 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800295a:	4b25      	ldr	r3, [pc, #148]	; (80029f0 <HAL_GPIO_Init+0x2b0>)
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	4924      	ldr	r1, [pc, #144]	; (80029f0 <HAL_GPIO_Init+0x2b0>)
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	4313      	orrs	r3, r2
 8002964:	608b      	str	r3, [r1, #8]
 8002966:	e006      	b.n	8002976 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002968:	4b21      	ldr	r3, [pc, #132]	; (80029f0 <HAL_GPIO_Init+0x2b0>)
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	43db      	mvns	r3, r3
 8002970:	491f      	ldr	r1, [pc, #124]	; (80029f0 <HAL_GPIO_Init+0x2b0>)
 8002972:	4013      	ands	r3, r2
 8002974:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d006      	beq.n	8002990 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002982:	4b1b      	ldr	r3, [pc, #108]	; (80029f0 <HAL_GPIO_Init+0x2b0>)
 8002984:	68da      	ldr	r2, [r3, #12]
 8002986:	491a      	ldr	r1, [pc, #104]	; (80029f0 <HAL_GPIO_Init+0x2b0>)
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	4313      	orrs	r3, r2
 800298c:	60cb      	str	r3, [r1, #12]
 800298e:	e006      	b.n	800299e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002990:	4b17      	ldr	r3, [pc, #92]	; (80029f0 <HAL_GPIO_Init+0x2b0>)
 8002992:	68da      	ldr	r2, [r3, #12]
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	43db      	mvns	r3, r3
 8002998:	4915      	ldr	r1, [pc, #84]	; (80029f0 <HAL_GPIO_Init+0x2b0>)
 800299a:	4013      	ands	r3, r2
 800299c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	3301      	adds	r3, #1
 80029a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	fa22 f303 	lsr.w	r3, r2, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f47f aed0 	bne.w	8002754 <HAL_GPIO_Init+0x14>
  }
}
 80029b4:	bf00      	nop
 80029b6:	372c      	adds	r7, #44	; 0x2c
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bc80      	pop	{r7}
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	10210000 	.word	0x10210000
 80029c4:	10110000 	.word	0x10110000
 80029c8:	10120000 	.word	0x10120000
 80029cc:	10310000 	.word	0x10310000
 80029d0:	10320000 	.word	0x10320000
 80029d4:	10220000 	.word	0x10220000
 80029d8:	40021000 	.word	0x40021000
 80029dc:	40010000 	.word	0x40010000
 80029e0:	40010800 	.word	0x40010800
 80029e4:	40010c00 	.word	0x40010c00
 80029e8:	40011000 	.word	0x40011000
 80029ec:	40011400 	.word	0x40011400
 80029f0:	40010400 	.word	0x40010400

080029f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	887b      	ldrh	r3, [r7, #2]
 8002a06:	4013      	ands	r3, r2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d002      	beq.n	8002a12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	73fb      	strb	r3, [r7, #15]
 8002a10:	e001      	b.n	8002a16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a12:	2300      	movs	r3, #0
 8002a14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr

08002a22 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	807b      	strh	r3, [r7, #2]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a32:	787b      	ldrb	r3, [r7, #1]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a38:	887a      	ldrh	r2, [r7, #2]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a3e:	e003      	b.n	8002a48 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a40:	887b      	ldrh	r3, [r7, #2]
 8002a42:	041a      	lsls	r2, r3, #16
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	611a      	str	r2, [r3, #16]
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bc80      	pop	{r7}
 8002a50:	4770      	bx	lr

08002a52 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b083      	sub	sp, #12
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68da      	ldr	r2, [r3, #12]
 8002a62:	887b      	ldrh	r3, [r7, #2]
 8002a64:	4013      	ands	r3, r2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a6a:	887a      	ldrh	r2, [r7, #2]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002a70:	e002      	b.n	8002a78 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a72:	887a      	ldrh	r2, [r7, #2]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	611a      	str	r2, [r3, #16]
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr
	...

08002a84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e26c      	b.n	8002f70 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 8087 	beq.w	8002bb2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002aa4:	4b92      	ldr	r3, [pc, #584]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 030c 	and.w	r3, r3, #12
 8002aac:	2b04      	cmp	r3, #4
 8002aae:	d00c      	beq.n	8002aca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ab0:	4b8f      	ldr	r3, [pc, #572]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f003 030c 	and.w	r3, r3, #12
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	d112      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x5e>
 8002abc:	4b8c      	ldr	r3, [pc, #560]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac8:	d10b      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aca:	4b89      	ldr	r3, [pc, #548]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d06c      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x12c>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d168      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e246      	b.n	8002f70 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aea:	d106      	bne.n	8002afa <HAL_RCC_OscConfig+0x76>
 8002aec:	4b80      	ldr	r3, [pc, #512]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a7f      	ldr	r2, [pc, #508]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002af2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af6:	6013      	str	r3, [r2, #0]
 8002af8:	e02e      	b.n	8002b58 <HAL_RCC_OscConfig+0xd4>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10c      	bne.n	8002b1c <HAL_RCC_OscConfig+0x98>
 8002b02:	4b7b      	ldr	r3, [pc, #492]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a7a      	ldr	r2, [pc, #488]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b0c:	6013      	str	r3, [r2, #0]
 8002b0e:	4b78      	ldr	r3, [pc, #480]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a77      	ldr	r2, [pc, #476]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b18:	6013      	str	r3, [r2, #0]
 8002b1a:	e01d      	b.n	8002b58 <HAL_RCC_OscConfig+0xd4>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b24:	d10c      	bne.n	8002b40 <HAL_RCC_OscConfig+0xbc>
 8002b26:	4b72      	ldr	r3, [pc, #456]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a71      	ldr	r2, [pc, #452]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b30:	6013      	str	r3, [r2, #0]
 8002b32:	4b6f      	ldr	r3, [pc, #444]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a6e      	ldr	r2, [pc, #440]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b3c:	6013      	str	r3, [r2, #0]
 8002b3e:	e00b      	b.n	8002b58 <HAL_RCC_OscConfig+0xd4>
 8002b40:	4b6b      	ldr	r3, [pc, #428]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a6a      	ldr	r2, [pc, #424]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b4a:	6013      	str	r3, [r2, #0]
 8002b4c:	4b68      	ldr	r3, [pc, #416]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a67      	ldr	r2, [pc, #412]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d013      	beq.n	8002b88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b60:	f7ff f878 	bl	8001c54 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b68:	f7ff f874 	bl	8001c54 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b64      	cmp	r3, #100	; 0x64
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e1fa      	b.n	8002f70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7a:	4b5d      	ldr	r3, [pc, #372]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0f0      	beq.n	8002b68 <HAL_RCC_OscConfig+0xe4>
 8002b86:	e014      	b.n	8002bb2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b88:	f7ff f864 	bl	8001c54 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b90:	f7ff f860 	bl	8001c54 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b64      	cmp	r3, #100	; 0x64
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e1e6      	b.n	8002f70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ba2:	4b53      	ldr	r3, [pc, #332]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f0      	bne.n	8002b90 <HAL_RCC_OscConfig+0x10c>
 8002bae:	e000      	b.n	8002bb2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d063      	beq.n	8002c86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bbe:	4b4c      	ldr	r3, [pc, #304]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f003 030c 	and.w	r3, r3, #12
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00b      	beq.n	8002be2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002bca:	4b49      	ldr	r3, [pc, #292]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f003 030c 	and.w	r3, r3, #12
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d11c      	bne.n	8002c10 <HAL_RCC_OscConfig+0x18c>
 8002bd6:	4b46      	ldr	r3, [pc, #280]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d116      	bne.n	8002c10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002be2:	4b43      	ldr	r3, [pc, #268]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d005      	beq.n	8002bfa <HAL_RCC_OscConfig+0x176>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d001      	beq.n	8002bfa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e1ba      	b.n	8002f70 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bfa:	4b3d      	ldr	r3, [pc, #244]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	4939      	ldr	r1, [pc, #228]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c0e:	e03a      	b.n	8002c86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d020      	beq.n	8002c5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c18:	4b36      	ldr	r3, [pc, #216]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1e:	f7ff f819 	bl	8001c54 <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c24:	e008      	b.n	8002c38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c26:	f7ff f815 	bl	8001c54 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e19b      	b.n	8002f70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c38:	4b2d      	ldr	r3, [pc, #180]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0f0      	beq.n	8002c26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c44:	4b2a      	ldr	r3, [pc, #168]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	4927      	ldr	r1, [pc, #156]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	600b      	str	r3, [r1, #0]
 8002c58:	e015      	b.n	8002c86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c5a:	4b26      	ldr	r3, [pc, #152]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c60:	f7fe fff8 	bl	8001c54 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c68:	f7fe fff4 	bl	8001c54 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e17a      	b.n	8002f70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c7a:	4b1d      	ldr	r3, [pc, #116]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f0      	bne.n	8002c68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0308 	and.w	r3, r3, #8
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d03a      	beq.n	8002d08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d019      	beq.n	8002cce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c9a:	4b17      	ldr	r3, [pc, #92]	; (8002cf8 <HAL_RCC_OscConfig+0x274>)
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ca0:	f7fe ffd8 	bl	8001c54 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ca8:	f7fe ffd4 	bl	8001c54 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e15a      	b.n	8002f70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cba:	4b0d      	ldr	r3, [pc, #52]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0f0      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002cc6:	2001      	movs	r0, #1
 8002cc8:	f000 fada 	bl	8003280 <RCC_Delay>
 8002ccc:	e01c      	b.n	8002d08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cce:	4b0a      	ldr	r3, [pc, #40]	; (8002cf8 <HAL_RCC_OscConfig+0x274>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd4:	f7fe ffbe 	bl	8001c54 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cda:	e00f      	b.n	8002cfc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cdc:	f7fe ffba 	bl	8001c54 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d908      	bls.n	8002cfc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e140      	b.n	8002f70 <HAL_RCC_OscConfig+0x4ec>
 8002cee:	bf00      	nop
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	42420000 	.word	0x42420000
 8002cf8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cfc:	4b9e      	ldr	r3, [pc, #632]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1e9      	bne.n	8002cdc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 80a6 	beq.w	8002e62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d16:	2300      	movs	r3, #0
 8002d18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d1a:	4b97      	ldr	r3, [pc, #604]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10d      	bne.n	8002d42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d26:	4b94      	ldr	r3, [pc, #592]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	4a93      	ldr	r2, [pc, #588]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d30:	61d3      	str	r3, [r2, #28]
 8002d32:	4b91      	ldr	r3, [pc, #580]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d3a:	60bb      	str	r3, [r7, #8]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d42:	4b8e      	ldr	r3, [pc, #568]	; (8002f7c <HAL_RCC_OscConfig+0x4f8>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d118      	bne.n	8002d80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d4e:	4b8b      	ldr	r3, [pc, #556]	; (8002f7c <HAL_RCC_OscConfig+0x4f8>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a8a      	ldr	r2, [pc, #552]	; (8002f7c <HAL_RCC_OscConfig+0x4f8>)
 8002d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d5a:	f7fe ff7b 	bl	8001c54 <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d60:	e008      	b.n	8002d74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d62:	f7fe ff77 	bl	8001c54 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b64      	cmp	r3, #100	; 0x64
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e0fd      	b.n	8002f70 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d74:	4b81      	ldr	r3, [pc, #516]	; (8002f7c <HAL_RCC_OscConfig+0x4f8>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0f0      	beq.n	8002d62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d106      	bne.n	8002d96 <HAL_RCC_OscConfig+0x312>
 8002d88:	4b7b      	ldr	r3, [pc, #492]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	4a7a      	ldr	r2, [pc, #488]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	6213      	str	r3, [r2, #32]
 8002d94:	e02d      	b.n	8002df2 <HAL_RCC_OscConfig+0x36e>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10c      	bne.n	8002db8 <HAL_RCC_OscConfig+0x334>
 8002d9e:	4b76      	ldr	r3, [pc, #472]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	4a75      	ldr	r2, [pc, #468]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002da4:	f023 0301 	bic.w	r3, r3, #1
 8002da8:	6213      	str	r3, [r2, #32]
 8002daa:	4b73      	ldr	r3, [pc, #460]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	4a72      	ldr	r2, [pc, #456]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002db0:	f023 0304 	bic.w	r3, r3, #4
 8002db4:	6213      	str	r3, [r2, #32]
 8002db6:	e01c      	b.n	8002df2 <HAL_RCC_OscConfig+0x36e>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	2b05      	cmp	r3, #5
 8002dbe:	d10c      	bne.n	8002dda <HAL_RCC_OscConfig+0x356>
 8002dc0:	4b6d      	ldr	r3, [pc, #436]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	4a6c      	ldr	r2, [pc, #432]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002dc6:	f043 0304 	orr.w	r3, r3, #4
 8002dca:	6213      	str	r3, [r2, #32]
 8002dcc:	4b6a      	ldr	r3, [pc, #424]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	4a69      	ldr	r2, [pc, #420]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002dd2:	f043 0301 	orr.w	r3, r3, #1
 8002dd6:	6213      	str	r3, [r2, #32]
 8002dd8:	e00b      	b.n	8002df2 <HAL_RCC_OscConfig+0x36e>
 8002dda:	4b67      	ldr	r3, [pc, #412]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	4a66      	ldr	r2, [pc, #408]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002de0:	f023 0301 	bic.w	r3, r3, #1
 8002de4:	6213      	str	r3, [r2, #32]
 8002de6:	4b64      	ldr	r3, [pc, #400]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	4a63      	ldr	r2, [pc, #396]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002dec:	f023 0304 	bic.w	r3, r3, #4
 8002df0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d015      	beq.n	8002e26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dfa:	f7fe ff2b 	bl	8001c54 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e00:	e00a      	b.n	8002e18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e02:	f7fe ff27 	bl	8001c54 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e0ab      	b.n	8002f70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e18:	4b57      	ldr	r3, [pc, #348]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0ee      	beq.n	8002e02 <HAL_RCC_OscConfig+0x37e>
 8002e24:	e014      	b.n	8002e50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e26:	f7fe ff15 	bl	8001c54 <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e2c:	e00a      	b.n	8002e44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e2e:	f7fe ff11 	bl	8001c54 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e095      	b.n	8002f70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e44:	4b4c      	ldr	r3, [pc, #304]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1ee      	bne.n	8002e2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e50:	7dfb      	ldrb	r3, [r7, #23]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d105      	bne.n	8002e62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e56:	4b48      	ldr	r3, [pc, #288]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	4a47      	ldr	r2, [pc, #284]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002e5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f000 8081 	beq.w	8002f6e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e6c:	4b42      	ldr	r3, [pc, #264]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f003 030c 	and.w	r3, r3, #12
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d061      	beq.n	8002f3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d146      	bne.n	8002f0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e80:	4b3f      	ldr	r3, [pc, #252]	; (8002f80 <HAL_RCC_OscConfig+0x4fc>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e86:	f7fe fee5 	bl	8001c54 <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e8e:	f7fe fee1 	bl	8001c54 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e067      	b.n	8002f70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ea0:	4b35      	ldr	r3, [pc, #212]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1f0      	bne.n	8002e8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb4:	d108      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002eb6:	4b30      	ldr	r3, [pc, #192]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	492d      	ldr	r1, [pc, #180]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ec8:	4b2b      	ldr	r3, [pc, #172]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a19      	ldr	r1, [r3, #32]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	430b      	orrs	r3, r1
 8002eda:	4927      	ldr	r1, [pc, #156]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ee0:	4b27      	ldr	r3, [pc, #156]	; (8002f80 <HAL_RCC_OscConfig+0x4fc>)
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee6:	f7fe feb5 	bl	8001c54 <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eee:	f7fe feb1 	bl	8001c54 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e037      	b.n	8002f70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f00:	4b1d      	ldr	r3, [pc, #116]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0f0      	beq.n	8002eee <HAL_RCC_OscConfig+0x46a>
 8002f0c:	e02f      	b.n	8002f6e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f0e:	4b1c      	ldr	r3, [pc, #112]	; (8002f80 <HAL_RCC_OscConfig+0x4fc>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f14:	f7fe fe9e 	bl	8001c54 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f1c:	f7fe fe9a 	bl	8001c54 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e020      	b.n	8002f70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f2e:	4b12      	ldr	r3, [pc, #72]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0x498>
 8002f3a:	e018      	b.n	8002f6e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	69db      	ldr	r3, [r3, #28]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d101      	bne.n	8002f48 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e013      	b.n	8002f70 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f48:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <HAL_RCC_OscConfig+0x4f4>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d106      	bne.n	8002f6a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d001      	beq.n	8002f6e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e000      	b.n	8002f70 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3718      	adds	r7, #24
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	40007000 	.word	0x40007000
 8002f80:	42420060 	.word	0x42420060

08002f84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e0d0      	b.n	800313a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f98:	4b6a      	ldr	r3, [pc, #424]	; (8003144 <HAL_RCC_ClockConfig+0x1c0>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d910      	bls.n	8002fc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa6:	4b67      	ldr	r3, [pc, #412]	; (8003144 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f023 0207 	bic.w	r2, r3, #7
 8002fae:	4965      	ldr	r1, [pc, #404]	; (8003144 <HAL_RCC_ClockConfig+0x1c0>)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb6:	4b63      	ldr	r3, [pc, #396]	; (8003144 <HAL_RCC_ClockConfig+0x1c0>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0307 	and.w	r3, r3, #7
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d001      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e0b8      	b.n	800313a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d020      	beq.n	8003016 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0304 	and.w	r3, r3, #4
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d005      	beq.n	8002fec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fe0:	4b59      	ldr	r3, [pc, #356]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	4a58      	ldr	r2, [pc, #352]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0308 	and.w	r3, r3, #8
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d005      	beq.n	8003004 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ff8:	4b53      	ldr	r3, [pc, #332]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	4a52      	ldr	r2, [pc, #328]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003002:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003004:	4b50      	ldr	r3, [pc, #320]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	494d      	ldr	r1, [pc, #308]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 8003012:	4313      	orrs	r3, r2
 8003014:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d040      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d107      	bne.n	800303a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800302a:	4b47      	ldr	r3, [pc, #284]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d115      	bne.n	8003062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e07f      	b.n	800313a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b02      	cmp	r3, #2
 8003040:	d107      	bne.n	8003052 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003042:	4b41      	ldr	r3, [pc, #260]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d109      	bne.n	8003062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e073      	b.n	800313a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003052:	4b3d      	ldr	r3, [pc, #244]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e06b      	b.n	800313a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003062:	4b39      	ldr	r3, [pc, #228]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f023 0203 	bic.w	r2, r3, #3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	4936      	ldr	r1, [pc, #216]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 8003070:	4313      	orrs	r3, r2
 8003072:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003074:	f7fe fdee 	bl	8001c54 <HAL_GetTick>
 8003078:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800307a:	e00a      	b.n	8003092 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800307c:	f7fe fdea 	bl	8001c54 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	f241 3288 	movw	r2, #5000	; 0x1388
 800308a:	4293      	cmp	r3, r2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e053      	b.n	800313a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003092:	4b2d      	ldr	r3, [pc, #180]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f003 020c 	and.w	r2, r3, #12
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d1eb      	bne.n	800307c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030a4:	4b27      	ldr	r3, [pc, #156]	; (8003144 <HAL_RCC_ClockConfig+0x1c0>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d210      	bcs.n	80030d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b2:	4b24      	ldr	r3, [pc, #144]	; (8003144 <HAL_RCC_ClockConfig+0x1c0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f023 0207 	bic.w	r2, r3, #7
 80030ba:	4922      	ldr	r1, [pc, #136]	; (8003144 <HAL_RCC_ClockConfig+0x1c0>)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	4313      	orrs	r3, r2
 80030c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c2:	4b20      	ldr	r3, [pc, #128]	; (8003144 <HAL_RCC_ClockConfig+0x1c0>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0307 	and.w	r3, r3, #7
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d001      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e032      	b.n	800313a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d008      	beq.n	80030f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030e0:	4b19      	ldr	r3, [pc, #100]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	4916      	ldr	r1, [pc, #88]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d009      	beq.n	8003112 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030fe:	4b12      	ldr	r3, [pc, #72]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	490e      	ldr	r1, [pc, #56]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 800310e:	4313      	orrs	r3, r2
 8003110:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003112:	f000 f821 	bl	8003158 <HAL_RCC_GetSysClockFreq>
 8003116:	4601      	mov	r1, r0
 8003118:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	091b      	lsrs	r3, r3, #4
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	4a0a      	ldr	r2, [pc, #40]	; (800314c <HAL_RCC_ClockConfig+0x1c8>)
 8003124:	5cd3      	ldrb	r3, [r2, r3]
 8003126:	fa21 f303 	lsr.w	r3, r1, r3
 800312a:	4a09      	ldr	r2, [pc, #36]	; (8003150 <HAL_RCC_ClockConfig+0x1cc>)
 800312c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800312e:	4b09      	ldr	r3, [pc, #36]	; (8003154 <HAL_RCC_ClockConfig+0x1d0>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f7fe fd4c 	bl	8001bd0 <HAL_InitTick>

  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	40022000 	.word	0x40022000
 8003148:	40021000 	.word	0x40021000
 800314c:	08008520 	.word	0x08008520
 8003150:	20000008 	.word	0x20000008
 8003154:	2000000c 	.word	0x2000000c

08003158 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003158:	b490      	push	{r4, r7}
 800315a:	b08a      	sub	sp, #40	; 0x28
 800315c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800315e:	4b2a      	ldr	r3, [pc, #168]	; (8003208 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003160:	1d3c      	adds	r4, r7, #4
 8003162:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003164:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003168:	4b28      	ldr	r3, [pc, #160]	; (800320c <HAL_RCC_GetSysClockFreq+0xb4>)
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800316e:	2300      	movs	r3, #0
 8003170:	61fb      	str	r3, [r7, #28]
 8003172:	2300      	movs	r3, #0
 8003174:	61bb      	str	r3, [r7, #24]
 8003176:	2300      	movs	r3, #0
 8003178:	627b      	str	r3, [r7, #36]	; 0x24
 800317a:	2300      	movs	r3, #0
 800317c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800317e:	2300      	movs	r3, #0
 8003180:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003182:	4b23      	ldr	r3, [pc, #140]	; (8003210 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	f003 030c 	and.w	r3, r3, #12
 800318e:	2b04      	cmp	r3, #4
 8003190:	d002      	beq.n	8003198 <HAL_RCC_GetSysClockFreq+0x40>
 8003192:	2b08      	cmp	r3, #8
 8003194:	d003      	beq.n	800319e <HAL_RCC_GetSysClockFreq+0x46>
 8003196:	e02d      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003198:	4b1e      	ldr	r3, [pc, #120]	; (8003214 <HAL_RCC_GetSysClockFreq+0xbc>)
 800319a:	623b      	str	r3, [r7, #32]
      break;
 800319c:	e02d      	b.n	80031fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	0c9b      	lsrs	r3, r3, #18
 80031a2:	f003 030f 	and.w	r3, r3, #15
 80031a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80031aa:	4413      	add	r3, r2
 80031ac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80031b0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d013      	beq.n	80031e4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031bc:	4b14      	ldr	r3, [pc, #80]	; (8003210 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	0c5b      	lsrs	r3, r3, #17
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80031ca:	4413      	add	r3, r2
 80031cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80031d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	4a0f      	ldr	r2, [pc, #60]	; (8003214 <HAL_RCC_GetSysClockFreq+0xbc>)
 80031d6:	fb02 f203 	mul.w	r2, r2, r3
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e0:	627b      	str	r3, [r7, #36]	; 0x24
 80031e2:	e004      	b.n	80031ee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	4a0c      	ldr	r2, [pc, #48]	; (8003218 <HAL_RCC_GetSysClockFreq+0xc0>)
 80031e8:	fb02 f303 	mul.w	r3, r2, r3
 80031ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	623b      	str	r3, [r7, #32]
      break;
 80031f2:	e002      	b.n	80031fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031f4:	4b07      	ldr	r3, [pc, #28]	; (8003214 <HAL_RCC_GetSysClockFreq+0xbc>)
 80031f6:	623b      	str	r3, [r7, #32]
      break;
 80031f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031fa:	6a3b      	ldr	r3, [r7, #32]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3728      	adds	r7, #40	; 0x28
 8003200:	46bd      	mov	sp, r7
 8003202:	bc90      	pop	{r4, r7}
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	080084f8 	.word	0x080084f8
 800320c:	08008508 	.word	0x08008508
 8003210:	40021000 	.word	0x40021000
 8003214:	007a1200 	.word	0x007a1200
 8003218:	003d0900 	.word	0x003d0900

0800321c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003220:	4b02      	ldr	r3, [pc, #8]	; (800322c <HAL_RCC_GetHCLKFreq+0x10>)
 8003222:	681b      	ldr	r3, [r3, #0]
}
 8003224:	4618      	mov	r0, r3
 8003226:	46bd      	mov	sp, r7
 8003228:	bc80      	pop	{r7}
 800322a:	4770      	bx	lr
 800322c:	20000008 	.word	0x20000008

08003230 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003234:	f7ff fff2 	bl	800321c <HAL_RCC_GetHCLKFreq>
 8003238:	4601      	mov	r1, r0
 800323a:	4b05      	ldr	r3, [pc, #20]	; (8003250 <HAL_RCC_GetPCLK1Freq+0x20>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	0a1b      	lsrs	r3, r3, #8
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	4a03      	ldr	r2, [pc, #12]	; (8003254 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003246:	5cd3      	ldrb	r3, [r2, r3]
 8003248:	fa21 f303 	lsr.w	r3, r1, r3
}
 800324c:	4618      	mov	r0, r3
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40021000 	.word	0x40021000
 8003254:	08008530 	.word	0x08008530

08003258 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800325c:	f7ff ffde 	bl	800321c <HAL_RCC_GetHCLKFreq>
 8003260:	4601      	mov	r1, r0
 8003262:	4b05      	ldr	r3, [pc, #20]	; (8003278 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	0adb      	lsrs	r3, r3, #11
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	4a03      	ldr	r2, [pc, #12]	; (800327c <HAL_RCC_GetPCLK2Freq+0x24>)
 800326e:	5cd3      	ldrb	r3, [r2, r3]
 8003270:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003274:	4618      	mov	r0, r3
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40021000 	.word	0x40021000
 800327c:	08008530 	.word	0x08008530

08003280 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003288:	4b0a      	ldr	r3, [pc, #40]	; (80032b4 <RCC_Delay+0x34>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a0a      	ldr	r2, [pc, #40]	; (80032b8 <RCC_Delay+0x38>)
 800328e:	fba2 2303 	umull	r2, r3, r2, r3
 8003292:	0a5b      	lsrs	r3, r3, #9
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	fb02 f303 	mul.w	r3, r2, r3
 800329a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800329c:	bf00      	nop
  }
  while (Delay --);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	1e5a      	subs	r2, r3, #1
 80032a2:	60fa      	str	r2, [r7, #12]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1f9      	bne.n	800329c <RCC_Delay+0x1c>
}
 80032a8:	bf00      	nop
 80032aa:	3714      	adds	r7, #20
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bc80      	pop	{r7}
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	20000008 	.word	0x20000008
 80032b8:	10624dd3 	.word	0x10624dd3

080032bc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80032c4:	2300      	movs	r3, #0
 80032c6:	613b      	str	r3, [r7, #16]
 80032c8:	2300      	movs	r3, #0
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d07d      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80032d8:	2300      	movs	r3, #0
 80032da:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032dc:	4b4f      	ldr	r3, [pc, #316]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032de:	69db      	ldr	r3, [r3, #28]
 80032e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10d      	bne.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032e8:	4b4c      	ldr	r3, [pc, #304]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	4a4b      	ldr	r2, [pc, #300]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032f2:	61d3      	str	r3, [r2, #28]
 80032f4:	4b49      	ldr	r3, [pc, #292]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032f6:	69db      	ldr	r3, [r3, #28]
 80032f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fc:	60bb      	str	r3, [r7, #8]
 80032fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003300:	2301      	movs	r3, #1
 8003302:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003304:	4b46      	ldr	r3, [pc, #280]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330c:	2b00      	cmp	r3, #0
 800330e:	d118      	bne.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003310:	4b43      	ldr	r3, [pc, #268]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a42      	ldr	r2, [pc, #264]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800331a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800331c:	f7fe fc9a 	bl	8001c54 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003322:	e008      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003324:	f7fe fc96 	bl	8001c54 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b64      	cmp	r3, #100	; 0x64
 8003330:	d901      	bls.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e06d      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003336:	4b3a      	ldr	r3, [pc, #232]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0f0      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003342:	4b36      	ldr	r3, [pc, #216]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800334a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d02e      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	429a      	cmp	r2, r3
 800335e:	d027      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003360:	4b2e      	ldr	r3, [pc, #184]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003368:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800336a:	4b2e      	ldr	r3, [pc, #184]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800336c:	2201      	movs	r2, #1
 800336e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003370:	4b2c      	ldr	r3, [pc, #176]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003372:	2200      	movs	r2, #0
 8003374:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003376:	4a29      	ldr	r2, [pc, #164]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d014      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003386:	f7fe fc65 	bl	8001c54 <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800338c:	e00a      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800338e:	f7fe fc61 	bl	8001c54 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	f241 3288 	movw	r2, #5000	; 0x1388
 800339c:	4293      	cmp	r3, r2
 800339e:	d901      	bls.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e036      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a4:	4b1d      	ldr	r3, [pc, #116]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d0ee      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033b0:	4b1a      	ldr	r3, [pc, #104]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	4917      	ldr	r1, [pc, #92]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033c2:	7dfb      	ldrb	r3, [r7, #23]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d105      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033c8:	4b14      	ldr	r3, [pc, #80]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ca:	69db      	ldr	r3, [r3, #28]
 80033cc:	4a13      	ldr	r2, [pc, #76]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d008      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033e0:	4b0e      	ldr	r3, [pc, #56]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	490b      	ldr	r1, [pc, #44]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0310 	and.w	r3, r3, #16
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d008      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033fe:	4b07      	ldr	r3, [pc, #28]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	4904      	ldr	r1, [pc, #16]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800340c:	4313      	orrs	r3, r2
 800340e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3718      	adds	r7, #24
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	40021000 	.word	0x40021000
 8003420:	40007000 	.word	0x40007000
 8003424:	42420440 	.word	0x42420440

08003428 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003428:	b590      	push	{r4, r7, lr}
 800342a:	b08d      	sub	sp, #52	; 0x34
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003430:	4b55      	ldr	r3, [pc, #340]	; (8003588 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003432:	f107 040c 	add.w	r4, r7, #12
 8003436:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003438:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800343c:	4b53      	ldr	r3, [pc, #332]	; (800358c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800343e:	881b      	ldrh	r3, [r3, #0]
 8003440:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003442:	2300      	movs	r3, #0
 8003444:	627b      	str	r3, [r7, #36]	; 0x24
 8003446:	2300      	movs	r3, #0
 8003448:	62fb      	str	r3, [r7, #44]	; 0x2c
 800344a:	2300      	movs	r3, #0
 800344c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800344e:	2300      	movs	r3, #0
 8003450:	61fb      	str	r3, [r7, #28]
 8003452:	2300      	movs	r3, #0
 8003454:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b02      	cmp	r3, #2
 800345a:	d07f      	beq.n	800355c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800345c:	2b10      	cmp	r3, #16
 800345e:	d002      	beq.n	8003466 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8003460:	2b01      	cmp	r3, #1
 8003462:	d048      	beq.n	80034f6 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003464:	e08b      	b.n	800357e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8003466:	4b4a      	ldr	r3, [pc, #296]	; (8003590 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800346c:	4b48      	ldr	r3, [pc, #288]	; (8003590 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d07f      	beq.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	0c9b      	lsrs	r3, r3, #18
 800347c:	f003 030f 	and.w	r3, r3, #15
 8003480:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003484:	4413      	add	r3, r2
 8003486:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800348a:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d018      	beq.n	80034c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003496:	4b3e      	ldr	r3, [pc, #248]	; (8003590 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	0c5b      	lsrs	r3, r3, #17
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80034a4:	4413      	add	r3, r2
 80034a6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80034aa:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00d      	beq.n	80034d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80034b6:	4a37      	ldr	r2, [pc, #220]	; (8003594 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80034b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80034be:	6a3b      	ldr	r3, [r7, #32]
 80034c0:	fb02 f303 	mul.w	r3, r2, r3
 80034c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034c6:	e004      	b.n	80034d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	4a33      	ldr	r2, [pc, #204]	; (8003598 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80034cc:	fb02 f303 	mul.w	r3, r2, r3
 80034d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80034d2:	4b2f      	ldr	r3, [pc, #188]	; (8003590 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034de:	d102      	bne.n	80034e6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 80034e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80034e4:	e048      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 80034e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	4a2c      	ldr	r2, [pc, #176]	; (800359c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80034ec:	fba2 2303 	umull	r2, r3, r2, r3
 80034f0:	085b      	lsrs	r3, r3, #1
 80034f2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80034f4:	e040      	b.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 80034f6:	4b26      	ldr	r3, [pc, #152]	; (8003590 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003502:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003506:	d108      	bne.n	800351a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8003512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003516:	62bb      	str	r3, [r7, #40]	; 0x28
 8003518:	e01f      	b.n	800355a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003524:	d109      	bne.n	800353a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8003526:	4b1a      	ldr	r3, [pc, #104]	; (8003590 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8003532:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003536:	62bb      	str	r3, [r7, #40]	; 0x28
 8003538:	e00f      	b.n	800355a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003540:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003544:	d11a      	bne.n	800357c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003546:	4b12      	ldr	r3, [pc, #72]	; (8003590 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d014      	beq.n	800357c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8003552:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003556:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003558:	e010      	b.n	800357c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800355a:	e00f      	b.n	800357c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800355c:	f7ff fe7c 	bl	8003258 <HAL_RCC_GetPCLK2Freq>
 8003560:	4602      	mov	r2, r0
 8003562:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	0b9b      	lsrs	r3, r3, #14
 8003568:	f003 0303 	and.w	r3, r3, #3
 800356c:	3301      	adds	r3, #1
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	fbb2 f3f3 	udiv	r3, r2, r3
 8003574:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003576:	e002      	b.n	800357e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003578:	bf00      	nop
 800357a:	e000      	b.n	800357e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 800357c:	bf00      	nop
    }
  }
  return (frequency);
 800357e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003580:	4618      	mov	r0, r3
 8003582:	3734      	adds	r7, #52	; 0x34
 8003584:	46bd      	mov	sp, r7
 8003586:	bd90      	pop	{r4, r7, pc}
 8003588:	0800850c 	.word	0x0800850c
 800358c:	0800851c 	.word	0x0800851c
 8003590:	40021000 	.word	0x40021000
 8003594:	007a1200 	.word	0x007a1200
 8003598:	003d0900 	.word	0x003d0900
 800359c:	aaaaaaab 	.word	0xaaaaaaab

080035a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e01d      	b.n	80035ee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d106      	bne.n	80035cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7fe fa2c 	bl	8001a24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2202      	movs	r2, #2
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3304      	adds	r3, #4
 80035dc:	4619      	mov	r1, r3
 80035de:	4610      	mov	r0, r2
 80035e0:	f000 fa10 	bl	8003a04 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b085      	sub	sp, #20
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68da      	ldr	r2, [r3, #12]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f042 0201 	orr.w	r2, r2, #1
 800360c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2b06      	cmp	r3, #6
 800361e:	d007      	beq.n	8003630 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0201 	orr.w	r2, r2, #1
 800362e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr

0800363c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b02      	cmp	r3, #2
 8003650:	d122      	bne.n	8003698 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b02      	cmp	r3, #2
 800365e:	d11b      	bne.n	8003698 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f06f 0202 	mvn.w	r2, #2
 8003668:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2201      	movs	r2, #1
 800366e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	f003 0303 	and.w	r3, r3, #3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f9a4 	bl	80039cc <HAL_TIM_IC_CaptureCallback>
 8003684:	e005      	b.n	8003692 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f997 	bl	80039ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f9a6 	bl	80039de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	f003 0304 	and.w	r3, r3, #4
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	d122      	bne.n	80036ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f003 0304 	and.w	r3, r3, #4
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d11b      	bne.n	80036ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f06f 0204 	mvn.w	r2, #4
 80036bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2202      	movs	r2, #2
 80036c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f97a 	bl	80039cc <HAL_TIM_IC_CaptureCallback>
 80036d8:	e005      	b.n	80036e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f96d 	bl	80039ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 f97c 	bl	80039de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	2b08      	cmp	r3, #8
 80036f8:	d122      	bne.n	8003740 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f003 0308 	and.w	r3, r3, #8
 8003704:	2b08      	cmp	r3, #8
 8003706:	d11b      	bne.n	8003740 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f06f 0208 	mvn.w	r2, #8
 8003710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2204      	movs	r2, #4
 8003716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	f003 0303 	and.w	r3, r3, #3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f950 	bl	80039cc <HAL_TIM_IC_CaptureCallback>
 800372c:	e005      	b.n	800373a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f943 	bl	80039ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f952 	bl	80039de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	f003 0310 	and.w	r3, r3, #16
 800374a:	2b10      	cmp	r3, #16
 800374c:	d122      	bne.n	8003794 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	f003 0310 	and.w	r3, r3, #16
 8003758:	2b10      	cmp	r3, #16
 800375a:	d11b      	bne.n	8003794 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f06f 0210 	mvn.w	r2, #16
 8003764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2208      	movs	r2, #8
 800376a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f926 	bl	80039cc <HAL_TIM_IC_CaptureCallback>
 8003780:	e005      	b.n	800378e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f919 	bl	80039ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f928 	bl	80039de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d10e      	bne.n	80037c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d107      	bne.n	80037c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f06f 0201 	mvn.w	r2, #1
 80037b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7fd fd62 	bl	8001284 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ca:	2b80      	cmp	r3, #128	; 0x80
 80037cc:	d10e      	bne.n	80037ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d8:	2b80      	cmp	r3, #128	; 0x80
 80037da:	d107      	bne.n	80037ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 fa51 	bl	8003c8e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f6:	2b40      	cmp	r3, #64	; 0x40
 80037f8:	d10e      	bne.n	8003818 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003804:	2b40      	cmp	r3, #64	; 0x40
 8003806:	d107      	bne.n	8003818 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f8ec 	bl	80039f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	f003 0320 	and.w	r3, r3, #32
 8003822:	2b20      	cmp	r3, #32
 8003824:	d10e      	bne.n	8003844 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f003 0320 	and.w	r3, r3, #32
 8003830:	2b20      	cmp	r3, #32
 8003832:	d107      	bne.n	8003844 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f06f 0220 	mvn.w	r2, #32
 800383c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fa1c 	bl	8003c7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003844:	bf00      	nop
 8003846:	3708      	adds	r7, #8
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <HAL_TIM_ConfigClockSource+0x18>
 8003860:	2302      	movs	r3, #2
 8003862:	e0a6      	b.n	80039b2 <HAL_TIM_ConfigClockSource+0x166>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003882:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800388a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2b40      	cmp	r3, #64	; 0x40
 800389a:	d067      	beq.n	800396c <HAL_TIM_ConfigClockSource+0x120>
 800389c:	2b40      	cmp	r3, #64	; 0x40
 800389e:	d80b      	bhi.n	80038b8 <HAL_TIM_ConfigClockSource+0x6c>
 80038a0:	2b10      	cmp	r3, #16
 80038a2:	d073      	beq.n	800398c <HAL_TIM_ConfigClockSource+0x140>
 80038a4:	2b10      	cmp	r3, #16
 80038a6:	d802      	bhi.n	80038ae <HAL_TIM_ConfigClockSource+0x62>
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d06f      	beq.n	800398c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80038ac:	e078      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80038ae:	2b20      	cmp	r3, #32
 80038b0:	d06c      	beq.n	800398c <HAL_TIM_ConfigClockSource+0x140>
 80038b2:	2b30      	cmp	r3, #48	; 0x30
 80038b4:	d06a      	beq.n	800398c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80038b6:	e073      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80038b8:	2b70      	cmp	r3, #112	; 0x70
 80038ba:	d00d      	beq.n	80038d8 <HAL_TIM_ConfigClockSource+0x8c>
 80038bc:	2b70      	cmp	r3, #112	; 0x70
 80038be:	d804      	bhi.n	80038ca <HAL_TIM_ConfigClockSource+0x7e>
 80038c0:	2b50      	cmp	r3, #80	; 0x50
 80038c2:	d033      	beq.n	800392c <HAL_TIM_ConfigClockSource+0xe0>
 80038c4:	2b60      	cmp	r3, #96	; 0x60
 80038c6:	d041      	beq.n	800394c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80038c8:	e06a      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80038ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ce:	d066      	beq.n	800399e <HAL_TIM_ConfigClockSource+0x152>
 80038d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038d4:	d017      	beq.n	8003906 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80038d6:	e063      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6818      	ldr	r0, [r3, #0]
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	6899      	ldr	r1, [r3, #8]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f000 f965 	bl	8003bb6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038fa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	609a      	str	r2, [r3, #8]
      break;
 8003904:	e04c      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6818      	ldr	r0, [r3, #0]
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	6899      	ldr	r1, [r3, #8]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	f000 f94e 	bl	8003bb6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003928:	609a      	str	r2, [r3, #8]
      break;
 800392a:	e039      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6818      	ldr	r0, [r3, #0]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	6859      	ldr	r1, [r3, #4]
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	461a      	mov	r2, r3
 800393a:	f000 f8c5 	bl	8003ac8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2150      	movs	r1, #80	; 0x50
 8003944:	4618      	mov	r0, r3
 8003946:	f000 f91c 	bl	8003b82 <TIM_ITRx_SetConfig>
      break;
 800394a:	e029      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6818      	ldr	r0, [r3, #0]
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	6859      	ldr	r1, [r3, #4]
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	461a      	mov	r2, r3
 800395a:	f000 f8e3 	bl	8003b24 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2160      	movs	r1, #96	; 0x60
 8003964:	4618      	mov	r0, r3
 8003966:	f000 f90c 	bl	8003b82 <TIM_ITRx_SetConfig>
      break;
 800396a:	e019      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6818      	ldr	r0, [r3, #0]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	6859      	ldr	r1, [r3, #4]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	461a      	mov	r2, r3
 800397a:	f000 f8a5 	bl	8003ac8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2140      	movs	r1, #64	; 0x40
 8003984:	4618      	mov	r0, r3
 8003986:	f000 f8fc 	bl	8003b82 <TIM_ITRx_SetConfig>
      break;
 800398a:	e009      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4619      	mov	r1, r3
 8003996:	4610      	mov	r0, r2
 8003998:	f000 f8f3 	bl	8003b82 <TIM_ITRx_SetConfig>
      break;
 800399c:	e000      	b.n	80039a0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800399e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b083      	sub	sp, #12
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039c2:	bf00      	nop
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bc80      	pop	{r7}
 80039ca:	4770      	bx	lr

080039cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	bc80      	pop	{r7}
 80039dc:	4770      	bx	lr

080039de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039de:	b480      	push	{r7}
 80039e0:	b083      	sub	sp, #12
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bc80      	pop	{r7}
 80039ee:	4770      	bx	lr

080039f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bc80      	pop	{r7}
 8003a00:	4770      	bx	lr
	...

08003a04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a29      	ldr	r2, [pc, #164]	; (8003abc <TIM_Base_SetConfig+0xb8>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d00b      	beq.n	8003a34 <TIM_Base_SetConfig+0x30>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a22:	d007      	beq.n	8003a34 <TIM_Base_SetConfig+0x30>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a26      	ldr	r2, [pc, #152]	; (8003ac0 <TIM_Base_SetConfig+0xbc>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d003      	beq.n	8003a34 <TIM_Base_SetConfig+0x30>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a25      	ldr	r2, [pc, #148]	; (8003ac4 <TIM_Base_SetConfig+0xc0>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d108      	bne.n	8003a46 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a1c      	ldr	r2, [pc, #112]	; (8003abc <TIM_Base_SetConfig+0xb8>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d00b      	beq.n	8003a66 <TIM_Base_SetConfig+0x62>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a54:	d007      	beq.n	8003a66 <TIM_Base_SetConfig+0x62>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a19      	ldr	r2, [pc, #100]	; (8003ac0 <TIM_Base_SetConfig+0xbc>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d003      	beq.n	8003a66 <TIM_Base_SetConfig+0x62>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a18      	ldr	r2, [pc, #96]	; (8003ac4 <TIM_Base_SetConfig+0xc0>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d108      	bne.n	8003a78 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a07      	ldr	r2, [pc, #28]	; (8003abc <TIM_Base_SetConfig+0xb8>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d103      	bne.n	8003aac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	691a      	ldr	r2, [r3, #16]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	615a      	str	r2, [r3, #20]
}
 8003ab2:	bf00      	nop
 8003ab4:	3714      	adds	r7, #20
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bc80      	pop	{r7}
 8003aba:	4770      	bx	lr
 8003abc:	40012c00 	.word	0x40012c00
 8003ac0:	40000400 	.word	0x40000400
 8003ac4:	40000800 	.word	0x40000800

08003ac8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b087      	sub	sp, #28
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	f023 0201 	bic.w	r2, r3, #1
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003af2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	011b      	lsls	r3, r3, #4
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f023 030a 	bic.w	r3, r3, #10
 8003b04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	621a      	str	r2, [r3, #32]
}
 8003b1a:	bf00      	nop
 8003b1c:	371c      	adds	r7, #28
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bc80      	pop	{r7}
 8003b22:	4770      	bx	lr

08003b24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b087      	sub	sp, #28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	f023 0210 	bic.w	r2, r3, #16
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	031b      	lsls	r3, r3, #12
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b60:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	621a      	str	r2, [r3, #32]
}
 8003b78:	bf00      	nop
 8003b7a:	371c      	adds	r7, #28
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bc80      	pop	{r7}
 8003b80:	4770      	bx	lr

08003b82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b085      	sub	sp, #20
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	f043 0307 	orr.w	r3, r3, #7
 8003ba4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	609a      	str	r2, [r3, #8]
}
 8003bac:	bf00      	nop
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bc80      	pop	{r7}
 8003bb4:	4770      	bx	lr

08003bb6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b087      	sub	sp, #28
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	60f8      	str	r0, [r7, #12]
 8003bbe:	60b9      	str	r1, [r7, #8]
 8003bc0:	607a      	str	r2, [r7, #4]
 8003bc2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bd0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	021a      	lsls	r2, r3, #8
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	609a      	str	r2, [r3, #8]
}
 8003bea:	bf00      	nop
 8003bec:	371c      	adds	r7, #28
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bc80      	pop	{r7}
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d101      	bne.n	8003c0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	e032      	b.n	8003c72 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2202      	movs	r2, #2
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c44:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3714      	adds	r7, #20
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr

08003c7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bc80      	pop	{r7}
 8003c8c:	4770      	bx	lr

08003c8e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b083      	sub	sp, #12
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bc80      	pop	{r7}
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e03f      	b.n	8003d32 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d106      	bne.n	8003ccc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7fd fefa 	bl	8001ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2224      	movs	r2, #36	; 0x24
 8003cd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68da      	ldr	r2, [r3, #12]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ce2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 f90b 	bl	8003f00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	691a      	ldr	r2, [r3, #16]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cf8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	695a      	ldr	r2, [r3, #20]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2220      	movs	r2, #32
 8003d24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b088      	sub	sp, #32
 8003d3e:	af02      	add	r7, sp, #8
 8003d40:	60f8      	str	r0, [r7, #12]
 8003d42:	60b9      	str	r1, [r7, #8]
 8003d44:	603b      	str	r3, [r7, #0]
 8003d46:	4613      	mov	r3, r2
 8003d48:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b20      	cmp	r3, #32
 8003d58:	f040 8083 	bne.w	8003e62 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d002      	beq.n	8003d68 <HAL_UART_Transmit+0x2e>
 8003d62:	88fb      	ldrh	r3, [r7, #6]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e07b      	b.n	8003e64 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d101      	bne.n	8003d7a <HAL_UART_Transmit+0x40>
 8003d76:	2302      	movs	r3, #2
 8003d78:	e074      	b.n	8003e64 <HAL_UART_Transmit+0x12a>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2221      	movs	r2, #33	; 0x21
 8003d8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003d90:	f7fd ff60 	bl	8001c54 <HAL_GetTick>
 8003d94:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	88fa      	ldrh	r2, [r7, #6]
 8003d9a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	88fa      	ldrh	r2, [r7, #6]
 8003da0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003da2:	e042      	b.n	8003e2a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	3b01      	subs	r3, #1
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dba:	d122      	bne.n	8003e02 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	9300      	str	r3, [sp, #0]
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	2180      	movs	r1, #128	; 0x80
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f000 f850 	bl	8003e6c <UART_WaitOnFlagUntilTimeout>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e046      	b.n	8003e64 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	881b      	ldrh	r3, [r3, #0]
 8003dde:	461a      	mov	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003de8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d103      	bne.n	8003dfa <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	3302      	adds	r3, #2
 8003df6:	60bb      	str	r3, [r7, #8]
 8003df8:	e017      	b.n	8003e2a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	60bb      	str	r3, [r7, #8]
 8003e00:	e013      	b.n	8003e2a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	2180      	movs	r1, #128	; 0x80
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 f82d 	bl	8003e6c <UART_WaitOnFlagUntilTimeout>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e023      	b.n	8003e64 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	1c5a      	adds	r2, r3, #1
 8003e20:	60ba      	str	r2, [r7, #8]
 8003e22:	781a      	ldrb	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1b7      	bne.n	8003da4 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	2140      	movs	r1, #64	; 0x40
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 f814 	bl	8003e6c <UART_WaitOnFlagUntilTimeout>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e00a      	b.n	8003e64 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2220      	movs	r2, #32
 8003e52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	e000      	b.n	8003e64 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003e62:	2302      	movs	r3, #2
  }
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3718      	adds	r7, #24
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	603b      	str	r3, [r7, #0]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e7c:	e02c      	b.n	8003ed8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e84:	d028      	beq.n	8003ed8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d007      	beq.n	8003e9c <UART_WaitOnFlagUntilTimeout+0x30>
 8003e8c:	f7fd fee2 	bl	8001c54 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d21d      	bcs.n	8003ed8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68da      	ldr	r2, [r3, #12]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003eaa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	695a      	ldr	r2, [r3, #20]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0201 	bic.w	r2, r2, #1
 8003eba:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e00f      	b.n	8003ef8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	bf0c      	ite	eq
 8003ee8:	2301      	moveq	r3, #1
 8003eea:	2300      	movne	r3, #0
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	461a      	mov	r2, r3
 8003ef0:	79fb      	ldrb	r3, [r7, #7]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d0c3      	beq.n	8003e7e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68da      	ldr	r2, [r3, #12]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689a      	ldr	r2, [r3, #8]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003f3a:	f023 030c 	bic.w	r3, r3, #12
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	6812      	ldr	r2, [r2, #0]
 8003f42:	68f9      	ldr	r1, [r7, #12]
 8003f44:	430b      	orrs	r3, r1
 8003f46:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	699a      	ldr	r2, [r3, #24]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a52      	ldr	r2, [pc, #328]	; (80040ac <UART_SetConfig+0x1ac>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d14e      	bne.n	8004006 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f68:	f7ff f976 	bl	8003258 <HAL_RCC_GetPCLK2Freq>
 8003f6c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	4613      	mov	r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4413      	add	r3, r2
 8003f76:	009a      	lsls	r2, r3, #2
 8003f78:	441a      	add	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f84:	4a4a      	ldr	r2, [pc, #296]	; (80040b0 <UART_SetConfig+0x1b0>)
 8003f86:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8a:	095b      	lsrs	r3, r3, #5
 8003f8c:	0119      	lsls	r1, r3, #4
 8003f8e:	68ba      	ldr	r2, [r7, #8]
 8003f90:	4613      	mov	r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	009a      	lsls	r2, r3, #2
 8003f98:	441a      	add	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fa4:	4b42      	ldr	r3, [pc, #264]	; (80040b0 <UART_SetConfig+0x1b0>)
 8003fa6:	fba3 0302 	umull	r0, r3, r3, r2
 8003faa:	095b      	lsrs	r3, r3, #5
 8003fac:	2064      	movs	r0, #100	; 0x64
 8003fae:	fb00 f303 	mul.w	r3, r0, r3
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	011b      	lsls	r3, r3, #4
 8003fb6:	3332      	adds	r3, #50	; 0x32
 8003fb8:	4a3d      	ldr	r2, [pc, #244]	; (80040b0 <UART_SetConfig+0x1b0>)
 8003fba:	fba2 2303 	umull	r2, r3, r2, r3
 8003fbe:	095b      	lsrs	r3, r3, #5
 8003fc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fc4:	4419      	add	r1, r3
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4413      	add	r3, r2
 8003fce:	009a      	lsls	r2, r3, #2
 8003fd0:	441a      	add	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fdc:	4b34      	ldr	r3, [pc, #208]	; (80040b0 <UART_SetConfig+0x1b0>)
 8003fde:	fba3 0302 	umull	r0, r3, r3, r2
 8003fe2:	095b      	lsrs	r3, r3, #5
 8003fe4:	2064      	movs	r0, #100	; 0x64
 8003fe6:	fb00 f303 	mul.w	r3, r0, r3
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	011b      	lsls	r3, r3, #4
 8003fee:	3332      	adds	r3, #50	; 0x32
 8003ff0:	4a2f      	ldr	r2, [pc, #188]	; (80040b0 <UART_SetConfig+0x1b0>)
 8003ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff6:	095b      	lsrs	r3, r3, #5
 8003ff8:	f003 020f 	and.w	r2, r3, #15
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	440a      	add	r2, r1
 8004002:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004004:	e04d      	b.n	80040a2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8004006:	f7ff f913 	bl	8003230 <HAL_RCC_GetPCLK1Freq>
 800400a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	4613      	mov	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4413      	add	r3, r2
 8004014:	009a      	lsls	r2, r3, #2
 8004016:	441a      	add	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004022:	4a23      	ldr	r2, [pc, #140]	; (80040b0 <UART_SetConfig+0x1b0>)
 8004024:	fba2 2303 	umull	r2, r3, r2, r3
 8004028:	095b      	lsrs	r3, r3, #5
 800402a:	0119      	lsls	r1, r3, #4
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	4613      	mov	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4413      	add	r3, r2
 8004034:	009a      	lsls	r2, r3, #2
 8004036:	441a      	add	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004042:	4b1b      	ldr	r3, [pc, #108]	; (80040b0 <UART_SetConfig+0x1b0>)
 8004044:	fba3 0302 	umull	r0, r3, r3, r2
 8004048:	095b      	lsrs	r3, r3, #5
 800404a:	2064      	movs	r0, #100	; 0x64
 800404c:	fb00 f303 	mul.w	r3, r0, r3
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	011b      	lsls	r3, r3, #4
 8004054:	3332      	adds	r3, #50	; 0x32
 8004056:	4a16      	ldr	r2, [pc, #88]	; (80040b0 <UART_SetConfig+0x1b0>)
 8004058:	fba2 2303 	umull	r2, r3, r2, r3
 800405c:	095b      	lsrs	r3, r3, #5
 800405e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004062:	4419      	add	r1, r3
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	4613      	mov	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	4413      	add	r3, r2
 800406c:	009a      	lsls	r2, r3, #2
 800406e:	441a      	add	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	fbb2 f2f3 	udiv	r2, r2, r3
 800407a:	4b0d      	ldr	r3, [pc, #52]	; (80040b0 <UART_SetConfig+0x1b0>)
 800407c:	fba3 0302 	umull	r0, r3, r3, r2
 8004080:	095b      	lsrs	r3, r3, #5
 8004082:	2064      	movs	r0, #100	; 0x64
 8004084:	fb00 f303 	mul.w	r3, r0, r3
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	011b      	lsls	r3, r3, #4
 800408c:	3332      	adds	r3, #50	; 0x32
 800408e:	4a08      	ldr	r2, [pc, #32]	; (80040b0 <UART_SetConfig+0x1b0>)
 8004090:	fba2 2303 	umull	r2, r3, r2, r3
 8004094:	095b      	lsrs	r3, r3, #5
 8004096:	f003 020f 	and.w	r2, r3, #15
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	440a      	add	r2, r1
 80040a0:	609a      	str	r2, [r3, #8]
}
 80040a2:	bf00      	nop
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	40013800 	.word	0x40013800
 80040b0:	51eb851f 	.word	0x51eb851f

080040b4 <__errno>:
 80040b4:	4b01      	ldr	r3, [pc, #4]	; (80040bc <__errno+0x8>)
 80040b6:	6818      	ldr	r0, [r3, #0]
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	20000014 	.word	0x20000014

080040c0 <__libc_init_array>:
 80040c0:	b570      	push	{r4, r5, r6, lr}
 80040c2:	2500      	movs	r5, #0
 80040c4:	4e0c      	ldr	r6, [pc, #48]	; (80040f8 <__libc_init_array+0x38>)
 80040c6:	4c0d      	ldr	r4, [pc, #52]	; (80040fc <__libc_init_array+0x3c>)
 80040c8:	1ba4      	subs	r4, r4, r6
 80040ca:	10a4      	asrs	r4, r4, #2
 80040cc:	42a5      	cmp	r5, r4
 80040ce:	d109      	bne.n	80040e4 <__libc_init_array+0x24>
 80040d0:	f004 fa02 	bl	80084d8 <_init>
 80040d4:	2500      	movs	r5, #0
 80040d6:	4e0a      	ldr	r6, [pc, #40]	; (8004100 <__libc_init_array+0x40>)
 80040d8:	4c0a      	ldr	r4, [pc, #40]	; (8004104 <__libc_init_array+0x44>)
 80040da:	1ba4      	subs	r4, r4, r6
 80040dc:	10a4      	asrs	r4, r4, #2
 80040de:	42a5      	cmp	r5, r4
 80040e0:	d105      	bne.n	80040ee <__libc_init_array+0x2e>
 80040e2:	bd70      	pop	{r4, r5, r6, pc}
 80040e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040e8:	4798      	blx	r3
 80040ea:	3501      	adds	r5, #1
 80040ec:	e7ee      	b.n	80040cc <__libc_init_array+0xc>
 80040ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040f2:	4798      	blx	r3
 80040f4:	3501      	adds	r5, #1
 80040f6:	e7f2      	b.n	80040de <__libc_init_array+0x1e>
 80040f8:	08008858 	.word	0x08008858
 80040fc:	08008858 	.word	0x08008858
 8004100:	08008858 	.word	0x08008858
 8004104:	0800885c 	.word	0x0800885c

08004108 <memset>:
 8004108:	4603      	mov	r3, r0
 800410a:	4402      	add	r2, r0
 800410c:	4293      	cmp	r3, r2
 800410e:	d100      	bne.n	8004112 <memset+0xa>
 8004110:	4770      	bx	lr
 8004112:	f803 1b01 	strb.w	r1, [r3], #1
 8004116:	e7f9      	b.n	800410c <memset+0x4>

08004118 <__cvt>:
 8004118:	2b00      	cmp	r3, #0
 800411a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800411e:	461e      	mov	r6, r3
 8004120:	bfbb      	ittet	lt
 8004122:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004126:	461e      	movlt	r6, r3
 8004128:	2300      	movge	r3, #0
 800412a:	232d      	movlt	r3, #45	; 0x2d
 800412c:	b088      	sub	sp, #32
 800412e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004130:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8004134:	f027 0720 	bic.w	r7, r7, #32
 8004138:	2f46      	cmp	r7, #70	; 0x46
 800413a:	4614      	mov	r4, r2
 800413c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800413e:	700b      	strb	r3, [r1, #0]
 8004140:	d004      	beq.n	800414c <__cvt+0x34>
 8004142:	2f45      	cmp	r7, #69	; 0x45
 8004144:	d100      	bne.n	8004148 <__cvt+0x30>
 8004146:	3501      	adds	r5, #1
 8004148:	2302      	movs	r3, #2
 800414a:	e000      	b.n	800414e <__cvt+0x36>
 800414c:	2303      	movs	r3, #3
 800414e:	aa07      	add	r2, sp, #28
 8004150:	9204      	str	r2, [sp, #16]
 8004152:	aa06      	add	r2, sp, #24
 8004154:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004158:	e9cd 3500 	strd	r3, r5, [sp]
 800415c:	4622      	mov	r2, r4
 800415e:	4633      	mov	r3, r6
 8004160:	f001 fd96 	bl	8005c90 <_dtoa_r>
 8004164:	2f47      	cmp	r7, #71	; 0x47
 8004166:	4680      	mov	r8, r0
 8004168:	d102      	bne.n	8004170 <__cvt+0x58>
 800416a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800416c:	07db      	lsls	r3, r3, #31
 800416e:	d526      	bpl.n	80041be <__cvt+0xa6>
 8004170:	2f46      	cmp	r7, #70	; 0x46
 8004172:	eb08 0905 	add.w	r9, r8, r5
 8004176:	d111      	bne.n	800419c <__cvt+0x84>
 8004178:	f898 3000 	ldrb.w	r3, [r8]
 800417c:	2b30      	cmp	r3, #48	; 0x30
 800417e:	d10a      	bne.n	8004196 <__cvt+0x7e>
 8004180:	2200      	movs	r2, #0
 8004182:	2300      	movs	r3, #0
 8004184:	4620      	mov	r0, r4
 8004186:	4631      	mov	r1, r6
 8004188:	f7fc fc0e 	bl	80009a8 <__aeabi_dcmpeq>
 800418c:	b918      	cbnz	r0, 8004196 <__cvt+0x7e>
 800418e:	f1c5 0501 	rsb	r5, r5, #1
 8004192:	f8ca 5000 	str.w	r5, [sl]
 8004196:	f8da 3000 	ldr.w	r3, [sl]
 800419a:	4499      	add	r9, r3
 800419c:	2200      	movs	r2, #0
 800419e:	2300      	movs	r3, #0
 80041a0:	4620      	mov	r0, r4
 80041a2:	4631      	mov	r1, r6
 80041a4:	f7fc fc00 	bl	80009a8 <__aeabi_dcmpeq>
 80041a8:	b938      	cbnz	r0, 80041ba <__cvt+0xa2>
 80041aa:	2230      	movs	r2, #48	; 0x30
 80041ac:	9b07      	ldr	r3, [sp, #28]
 80041ae:	454b      	cmp	r3, r9
 80041b0:	d205      	bcs.n	80041be <__cvt+0xa6>
 80041b2:	1c59      	adds	r1, r3, #1
 80041b4:	9107      	str	r1, [sp, #28]
 80041b6:	701a      	strb	r2, [r3, #0]
 80041b8:	e7f8      	b.n	80041ac <__cvt+0x94>
 80041ba:	f8cd 901c 	str.w	r9, [sp, #28]
 80041be:	4640      	mov	r0, r8
 80041c0:	9b07      	ldr	r3, [sp, #28]
 80041c2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80041c4:	eba3 0308 	sub.w	r3, r3, r8
 80041c8:	6013      	str	r3, [r2, #0]
 80041ca:	b008      	add	sp, #32
 80041cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080041d0 <__exponent>:
 80041d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041d2:	2900      	cmp	r1, #0
 80041d4:	bfb4      	ite	lt
 80041d6:	232d      	movlt	r3, #45	; 0x2d
 80041d8:	232b      	movge	r3, #43	; 0x2b
 80041da:	4604      	mov	r4, r0
 80041dc:	bfb8      	it	lt
 80041de:	4249      	neglt	r1, r1
 80041e0:	2909      	cmp	r1, #9
 80041e2:	f804 2b02 	strb.w	r2, [r4], #2
 80041e6:	7043      	strb	r3, [r0, #1]
 80041e8:	dd21      	ble.n	800422e <__exponent+0x5e>
 80041ea:	f10d 0307 	add.w	r3, sp, #7
 80041ee:	461f      	mov	r7, r3
 80041f0:	260a      	movs	r6, #10
 80041f2:	fb91 f5f6 	sdiv	r5, r1, r6
 80041f6:	fb06 1115 	mls	r1, r6, r5, r1
 80041fa:	2d09      	cmp	r5, #9
 80041fc:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004200:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004204:	f103 32ff 	add.w	r2, r3, #4294967295
 8004208:	4629      	mov	r1, r5
 800420a:	dc09      	bgt.n	8004220 <__exponent+0x50>
 800420c:	3130      	adds	r1, #48	; 0x30
 800420e:	3b02      	subs	r3, #2
 8004210:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004214:	42bb      	cmp	r3, r7
 8004216:	4622      	mov	r2, r4
 8004218:	d304      	bcc.n	8004224 <__exponent+0x54>
 800421a:	1a10      	subs	r0, r2, r0
 800421c:	b003      	add	sp, #12
 800421e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004220:	4613      	mov	r3, r2
 8004222:	e7e6      	b.n	80041f2 <__exponent+0x22>
 8004224:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004228:	f804 2b01 	strb.w	r2, [r4], #1
 800422c:	e7f2      	b.n	8004214 <__exponent+0x44>
 800422e:	2330      	movs	r3, #48	; 0x30
 8004230:	4419      	add	r1, r3
 8004232:	7083      	strb	r3, [r0, #2]
 8004234:	1d02      	adds	r2, r0, #4
 8004236:	70c1      	strb	r1, [r0, #3]
 8004238:	e7ef      	b.n	800421a <__exponent+0x4a>
	...

0800423c <_printf_float>:
 800423c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004240:	b091      	sub	sp, #68	; 0x44
 8004242:	460c      	mov	r4, r1
 8004244:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004246:	4693      	mov	fp, r2
 8004248:	461e      	mov	r6, r3
 800424a:	4605      	mov	r5, r0
 800424c:	f002 fecc 	bl	8006fe8 <_localeconv_r>
 8004250:	6803      	ldr	r3, [r0, #0]
 8004252:	4618      	mov	r0, r3
 8004254:	9309      	str	r3, [sp, #36]	; 0x24
 8004256:	f7fb ff7b 	bl	8000150 <strlen>
 800425a:	2300      	movs	r3, #0
 800425c:	930e      	str	r3, [sp, #56]	; 0x38
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	900a      	str	r0, [sp, #40]	; 0x28
 8004262:	3307      	adds	r3, #7
 8004264:	f023 0307 	bic.w	r3, r3, #7
 8004268:	f103 0208 	add.w	r2, r3, #8
 800426c:	f894 8018 	ldrb.w	r8, [r4, #24]
 8004270:	f8d4 a000 	ldr.w	sl, [r4]
 8004274:	603a      	str	r2, [r7, #0]
 8004276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800427e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8004282:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004286:	930b      	str	r3, [sp, #44]	; 0x2c
 8004288:	f04f 32ff 	mov.w	r2, #4294967295
 800428c:	4ba6      	ldr	r3, [pc, #664]	; (8004528 <_printf_float+0x2ec>)
 800428e:	4638      	mov	r0, r7
 8004290:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004292:	f7fc fbbb 	bl	8000a0c <__aeabi_dcmpun>
 8004296:	bb68      	cbnz	r0, 80042f4 <_printf_float+0xb8>
 8004298:	f04f 32ff 	mov.w	r2, #4294967295
 800429c:	4ba2      	ldr	r3, [pc, #648]	; (8004528 <_printf_float+0x2ec>)
 800429e:	4638      	mov	r0, r7
 80042a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80042a2:	f7fc fb95 	bl	80009d0 <__aeabi_dcmple>
 80042a6:	bb28      	cbnz	r0, 80042f4 <_printf_float+0xb8>
 80042a8:	2200      	movs	r2, #0
 80042aa:	2300      	movs	r3, #0
 80042ac:	4638      	mov	r0, r7
 80042ae:	4649      	mov	r1, r9
 80042b0:	f7fc fb84 	bl	80009bc <__aeabi_dcmplt>
 80042b4:	b110      	cbz	r0, 80042bc <_printf_float+0x80>
 80042b6:	232d      	movs	r3, #45	; 0x2d
 80042b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042bc:	4f9b      	ldr	r7, [pc, #620]	; (800452c <_printf_float+0x2f0>)
 80042be:	4b9c      	ldr	r3, [pc, #624]	; (8004530 <_printf_float+0x2f4>)
 80042c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80042c4:	bf98      	it	ls
 80042c6:	461f      	movls	r7, r3
 80042c8:	2303      	movs	r3, #3
 80042ca:	f04f 0900 	mov.w	r9, #0
 80042ce:	6123      	str	r3, [r4, #16]
 80042d0:	f02a 0304 	bic.w	r3, sl, #4
 80042d4:	6023      	str	r3, [r4, #0]
 80042d6:	9600      	str	r6, [sp, #0]
 80042d8:	465b      	mov	r3, fp
 80042da:	aa0f      	add	r2, sp, #60	; 0x3c
 80042dc:	4621      	mov	r1, r4
 80042de:	4628      	mov	r0, r5
 80042e0:	f000 f9e2 	bl	80046a8 <_printf_common>
 80042e4:	3001      	adds	r0, #1
 80042e6:	f040 8090 	bne.w	800440a <_printf_float+0x1ce>
 80042ea:	f04f 30ff 	mov.w	r0, #4294967295
 80042ee:	b011      	add	sp, #68	; 0x44
 80042f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042f4:	463a      	mov	r2, r7
 80042f6:	464b      	mov	r3, r9
 80042f8:	4638      	mov	r0, r7
 80042fa:	4649      	mov	r1, r9
 80042fc:	f7fc fb86 	bl	8000a0c <__aeabi_dcmpun>
 8004300:	b110      	cbz	r0, 8004308 <_printf_float+0xcc>
 8004302:	4f8c      	ldr	r7, [pc, #560]	; (8004534 <_printf_float+0x2f8>)
 8004304:	4b8c      	ldr	r3, [pc, #560]	; (8004538 <_printf_float+0x2fc>)
 8004306:	e7db      	b.n	80042c0 <_printf_float+0x84>
 8004308:	6863      	ldr	r3, [r4, #4]
 800430a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800430e:	1c59      	adds	r1, r3, #1
 8004310:	a80d      	add	r0, sp, #52	; 0x34
 8004312:	a90e      	add	r1, sp, #56	; 0x38
 8004314:	d140      	bne.n	8004398 <_printf_float+0x15c>
 8004316:	2306      	movs	r3, #6
 8004318:	6063      	str	r3, [r4, #4]
 800431a:	f04f 0c00 	mov.w	ip, #0
 800431e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8004322:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004326:	6863      	ldr	r3, [r4, #4]
 8004328:	6022      	str	r2, [r4, #0]
 800432a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	463a      	mov	r2, r7
 8004332:	464b      	mov	r3, r9
 8004334:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004338:	4628      	mov	r0, r5
 800433a:	f7ff feed 	bl	8004118 <__cvt>
 800433e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8004342:	2b47      	cmp	r3, #71	; 0x47
 8004344:	4607      	mov	r7, r0
 8004346:	d109      	bne.n	800435c <_printf_float+0x120>
 8004348:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800434a:	1cd8      	adds	r0, r3, #3
 800434c:	db02      	blt.n	8004354 <_printf_float+0x118>
 800434e:	6862      	ldr	r2, [r4, #4]
 8004350:	4293      	cmp	r3, r2
 8004352:	dd47      	ble.n	80043e4 <_printf_float+0x1a8>
 8004354:	f1a8 0802 	sub.w	r8, r8, #2
 8004358:	fa5f f888 	uxtb.w	r8, r8
 800435c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004360:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004362:	d824      	bhi.n	80043ae <_printf_float+0x172>
 8004364:	3901      	subs	r1, #1
 8004366:	4642      	mov	r2, r8
 8004368:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800436c:	910d      	str	r1, [sp, #52]	; 0x34
 800436e:	f7ff ff2f 	bl	80041d0 <__exponent>
 8004372:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004374:	4681      	mov	r9, r0
 8004376:	1813      	adds	r3, r2, r0
 8004378:	2a01      	cmp	r2, #1
 800437a:	6123      	str	r3, [r4, #16]
 800437c:	dc02      	bgt.n	8004384 <_printf_float+0x148>
 800437e:	6822      	ldr	r2, [r4, #0]
 8004380:	07d1      	lsls	r1, r2, #31
 8004382:	d501      	bpl.n	8004388 <_printf_float+0x14c>
 8004384:	3301      	adds	r3, #1
 8004386:	6123      	str	r3, [r4, #16]
 8004388:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800438c:	2b00      	cmp	r3, #0
 800438e:	d0a2      	beq.n	80042d6 <_printf_float+0x9a>
 8004390:	232d      	movs	r3, #45	; 0x2d
 8004392:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004396:	e79e      	b.n	80042d6 <_printf_float+0x9a>
 8004398:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800439c:	f000 816e 	beq.w	800467c <_printf_float+0x440>
 80043a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80043a4:	d1b9      	bne.n	800431a <_printf_float+0xde>
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1b7      	bne.n	800431a <_printf_float+0xde>
 80043aa:	2301      	movs	r3, #1
 80043ac:	e7b4      	b.n	8004318 <_printf_float+0xdc>
 80043ae:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80043b2:	d119      	bne.n	80043e8 <_printf_float+0x1ac>
 80043b4:	2900      	cmp	r1, #0
 80043b6:	6863      	ldr	r3, [r4, #4]
 80043b8:	dd0c      	ble.n	80043d4 <_printf_float+0x198>
 80043ba:	6121      	str	r1, [r4, #16]
 80043bc:	b913      	cbnz	r3, 80043c4 <_printf_float+0x188>
 80043be:	6822      	ldr	r2, [r4, #0]
 80043c0:	07d2      	lsls	r2, r2, #31
 80043c2:	d502      	bpl.n	80043ca <_printf_float+0x18e>
 80043c4:	3301      	adds	r3, #1
 80043c6:	440b      	add	r3, r1
 80043c8:	6123      	str	r3, [r4, #16]
 80043ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043cc:	f04f 0900 	mov.w	r9, #0
 80043d0:	65a3      	str	r3, [r4, #88]	; 0x58
 80043d2:	e7d9      	b.n	8004388 <_printf_float+0x14c>
 80043d4:	b913      	cbnz	r3, 80043dc <_printf_float+0x1a0>
 80043d6:	6822      	ldr	r2, [r4, #0]
 80043d8:	07d0      	lsls	r0, r2, #31
 80043da:	d501      	bpl.n	80043e0 <_printf_float+0x1a4>
 80043dc:	3302      	adds	r3, #2
 80043de:	e7f3      	b.n	80043c8 <_printf_float+0x18c>
 80043e0:	2301      	movs	r3, #1
 80043e2:	e7f1      	b.n	80043c8 <_printf_float+0x18c>
 80043e4:	f04f 0867 	mov.w	r8, #103	; 0x67
 80043e8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80043ec:	4293      	cmp	r3, r2
 80043ee:	db05      	blt.n	80043fc <_printf_float+0x1c0>
 80043f0:	6822      	ldr	r2, [r4, #0]
 80043f2:	6123      	str	r3, [r4, #16]
 80043f4:	07d1      	lsls	r1, r2, #31
 80043f6:	d5e8      	bpl.n	80043ca <_printf_float+0x18e>
 80043f8:	3301      	adds	r3, #1
 80043fa:	e7e5      	b.n	80043c8 <_printf_float+0x18c>
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	bfcc      	ite	gt
 8004400:	2301      	movgt	r3, #1
 8004402:	f1c3 0302 	rsble	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	e7de      	b.n	80043c8 <_printf_float+0x18c>
 800440a:	6823      	ldr	r3, [r4, #0]
 800440c:	055a      	lsls	r2, r3, #21
 800440e:	d407      	bmi.n	8004420 <_printf_float+0x1e4>
 8004410:	6923      	ldr	r3, [r4, #16]
 8004412:	463a      	mov	r2, r7
 8004414:	4659      	mov	r1, fp
 8004416:	4628      	mov	r0, r5
 8004418:	47b0      	blx	r6
 800441a:	3001      	adds	r0, #1
 800441c:	d129      	bne.n	8004472 <_printf_float+0x236>
 800441e:	e764      	b.n	80042ea <_printf_float+0xae>
 8004420:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004424:	f240 80d7 	bls.w	80045d6 <_printf_float+0x39a>
 8004428:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800442c:	2200      	movs	r2, #0
 800442e:	2300      	movs	r3, #0
 8004430:	f7fc faba 	bl	80009a8 <__aeabi_dcmpeq>
 8004434:	b388      	cbz	r0, 800449a <_printf_float+0x25e>
 8004436:	2301      	movs	r3, #1
 8004438:	4a40      	ldr	r2, [pc, #256]	; (800453c <_printf_float+0x300>)
 800443a:	4659      	mov	r1, fp
 800443c:	4628      	mov	r0, r5
 800443e:	47b0      	blx	r6
 8004440:	3001      	adds	r0, #1
 8004442:	f43f af52 	beq.w	80042ea <_printf_float+0xae>
 8004446:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800444a:	429a      	cmp	r2, r3
 800444c:	db02      	blt.n	8004454 <_printf_float+0x218>
 800444e:	6823      	ldr	r3, [r4, #0]
 8004450:	07d8      	lsls	r0, r3, #31
 8004452:	d50e      	bpl.n	8004472 <_printf_float+0x236>
 8004454:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004458:	4659      	mov	r1, fp
 800445a:	4628      	mov	r0, r5
 800445c:	47b0      	blx	r6
 800445e:	3001      	adds	r0, #1
 8004460:	f43f af43 	beq.w	80042ea <_printf_float+0xae>
 8004464:	2700      	movs	r7, #0
 8004466:	f104 081a 	add.w	r8, r4, #26
 800446a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800446c:	3b01      	subs	r3, #1
 800446e:	42bb      	cmp	r3, r7
 8004470:	dc09      	bgt.n	8004486 <_printf_float+0x24a>
 8004472:	6823      	ldr	r3, [r4, #0]
 8004474:	079f      	lsls	r7, r3, #30
 8004476:	f100 80fd 	bmi.w	8004674 <_printf_float+0x438>
 800447a:	68e0      	ldr	r0, [r4, #12]
 800447c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800447e:	4298      	cmp	r0, r3
 8004480:	bfb8      	it	lt
 8004482:	4618      	movlt	r0, r3
 8004484:	e733      	b.n	80042ee <_printf_float+0xb2>
 8004486:	2301      	movs	r3, #1
 8004488:	4642      	mov	r2, r8
 800448a:	4659      	mov	r1, fp
 800448c:	4628      	mov	r0, r5
 800448e:	47b0      	blx	r6
 8004490:	3001      	adds	r0, #1
 8004492:	f43f af2a 	beq.w	80042ea <_printf_float+0xae>
 8004496:	3701      	adds	r7, #1
 8004498:	e7e7      	b.n	800446a <_printf_float+0x22e>
 800449a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800449c:	2b00      	cmp	r3, #0
 800449e:	dc2b      	bgt.n	80044f8 <_printf_float+0x2bc>
 80044a0:	2301      	movs	r3, #1
 80044a2:	4a26      	ldr	r2, [pc, #152]	; (800453c <_printf_float+0x300>)
 80044a4:	4659      	mov	r1, fp
 80044a6:	4628      	mov	r0, r5
 80044a8:	47b0      	blx	r6
 80044aa:	3001      	adds	r0, #1
 80044ac:	f43f af1d 	beq.w	80042ea <_printf_float+0xae>
 80044b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044b2:	b923      	cbnz	r3, 80044be <_printf_float+0x282>
 80044b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044b6:	b913      	cbnz	r3, 80044be <_printf_float+0x282>
 80044b8:	6823      	ldr	r3, [r4, #0]
 80044ba:	07d9      	lsls	r1, r3, #31
 80044bc:	d5d9      	bpl.n	8004472 <_printf_float+0x236>
 80044be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044c2:	4659      	mov	r1, fp
 80044c4:	4628      	mov	r0, r5
 80044c6:	47b0      	blx	r6
 80044c8:	3001      	adds	r0, #1
 80044ca:	f43f af0e 	beq.w	80042ea <_printf_float+0xae>
 80044ce:	f04f 0800 	mov.w	r8, #0
 80044d2:	f104 091a 	add.w	r9, r4, #26
 80044d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044d8:	425b      	negs	r3, r3
 80044da:	4543      	cmp	r3, r8
 80044dc:	dc01      	bgt.n	80044e2 <_printf_float+0x2a6>
 80044de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044e0:	e797      	b.n	8004412 <_printf_float+0x1d6>
 80044e2:	2301      	movs	r3, #1
 80044e4:	464a      	mov	r2, r9
 80044e6:	4659      	mov	r1, fp
 80044e8:	4628      	mov	r0, r5
 80044ea:	47b0      	blx	r6
 80044ec:	3001      	adds	r0, #1
 80044ee:	f43f aefc 	beq.w	80042ea <_printf_float+0xae>
 80044f2:	f108 0801 	add.w	r8, r8, #1
 80044f6:	e7ee      	b.n	80044d6 <_printf_float+0x29a>
 80044f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80044fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80044fc:	429a      	cmp	r2, r3
 80044fe:	bfa8      	it	ge
 8004500:	461a      	movge	r2, r3
 8004502:	2a00      	cmp	r2, #0
 8004504:	4690      	mov	r8, r2
 8004506:	dd07      	ble.n	8004518 <_printf_float+0x2dc>
 8004508:	4613      	mov	r3, r2
 800450a:	4659      	mov	r1, fp
 800450c:	463a      	mov	r2, r7
 800450e:	4628      	mov	r0, r5
 8004510:	47b0      	blx	r6
 8004512:	3001      	adds	r0, #1
 8004514:	f43f aee9 	beq.w	80042ea <_printf_float+0xae>
 8004518:	f104 031a 	add.w	r3, r4, #26
 800451c:	f04f 0a00 	mov.w	sl, #0
 8004520:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004524:	930b      	str	r3, [sp, #44]	; 0x2c
 8004526:	e015      	b.n	8004554 <_printf_float+0x318>
 8004528:	7fefffff 	.word	0x7fefffff
 800452c:	08008540 	.word	0x08008540
 8004530:	0800853c 	.word	0x0800853c
 8004534:	08008548 	.word	0x08008548
 8004538:	08008544 	.word	0x08008544
 800453c:	0800854c 	.word	0x0800854c
 8004540:	2301      	movs	r3, #1
 8004542:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004544:	4659      	mov	r1, fp
 8004546:	4628      	mov	r0, r5
 8004548:	47b0      	blx	r6
 800454a:	3001      	adds	r0, #1
 800454c:	f43f aecd 	beq.w	80042ea <_printf_float+0xae>
 8004550:	f10a 0a01 	add.w	sl, sl, #1
 8004554:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004558:	eba9 0308 	sub.w	r3, r9, r8
 800455c:	4553      	cmp	r3, sl
 800455e:	dcef      	bgt.n	8004540 <_printf_float+0x304>
 8004560:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004564:	429a      	cmp	r2, r3
 8004566:	444f      	add	r7, r9
 8004568:	db14      	blt.n	8004594 <_printf_float+0x358>
 800456a:	6823      	ldr	r3, [r4, #0]
 800456c:	07da      	lsls	r2, r3, #31
 800456e:	d411      	bmi.n	8004594 <_printf_float+0x358>
 8004570:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004572:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004574:	eba3 0209 	sub.w	r2, r3, r9
 8004578:	eba3 0901 	sub.w	r9, r3, r1
 800457c:	4591      	cmp	r9, r2
 800457e:	bfa8      	it	ge
 8004580:	4691      	movge	r9, r2
 8004582:	f1b9 0f00 	cmp.w	r9, #0
 8004586:	dc0d      	bgt.n	80045a4 <_printf_float+0x368>
 8004588:	2700      	movs	r7, #0
 800458a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800458e:	f104 081a 	add.w	r8, r4, #26
 8004592:	e018      	b.n	80045c6 <_printf_float+0x38a>
 8004594:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004598:	4659      	mov	r1, fp
 800459a:	4628      	mov	r0, r5
 800459c:	47b0      	blx	r6
 800459e:	3001      	adds	r0, #1
 80045a0:	d1e6      	bne.n	8004570 <_printf_float+0x334>
 80045a2:	e6a2      	b.n	80042ea <_printf_float+0xae>
 80045a4:	464b      	mov	r3, r9
 80045a6:	463a      	mov	r2, r7
 80045a8:	4659      	mov	r1, fp
 80045aa:	4628      	mov	r0, r5
 80045ac:	47b0      	blx	r6
 80045ae:	3001      	adds	r0, #1
 80045b0:	d1ea      	bne.n	8004588 <_printf_float+0x34c>
 80045b2:	e69a      	b.n	80042ea <_printf_float+0xae>
 80045b4:	2301      	movs	r3, #1
 80045b6:	4642      	mov	r2, r8
 80045b8:	4659      	mov	r1, fp
 80045ba:	4628      	mov	r0, r5
 80045bc:	47b0      	blx	r6
 80045be:	3001      	adds	r0, #1
 80045c0:	f43f ae93 	beq.w	80042ea <_printf_float+0xae>
 80045c4:	3701      	adds	r7, #1
 80045c6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80045ca:	1a9b      	subs	r3, r3, r2
 80045cc:	eba3 0309 	sub.w	r3, r3, r9
 80045d0:	42bb      	cmp	r3, r7
 80045d2:	dcef      	bgt.n	80045b4 <_printf_float+0x378>
 80045d4:	e74d      	b.n	8004472 <_printf_float+0x236>
 80045d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80045d8:	2a01      	cmp	r2, #1
 80045da:	dc01      	bgt.n	80045e0 <_printf_float+0x3a4>
 80045dc:	07db      	lsls	r3, r3, #31
 80045de:	d538      	bpl.n	8004652 <_printf_float+0x416>
 80045e0:	2301      	movs	r3, #1
 80045e2:	463a      	mov	r2, r7
 80045e4:	4659      	mov	r1, fp
 80045e6:	4628      	mov	r0, r5
 80045e8:	47b0      	blx	r6
 80045ea:	3001      	adds	r0, #1
 80045ec:	f43f ae7d 	beq.w	80042ea <_printf_float+0xae>
 80045f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045f4:	4659      	mov	r1, fp
 80045f6:	4628      	mov	r0, r5
 80045f8:	47b0      	blx	r6
 80045fa:	3001      	adds	r0, #1
 80045fc:	f107 0701 	add.w	r7, r7, #1
 8004600:	f43f ae73 	beq.w	80042ea <_printf_float+0xae>
 8004604:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004608:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800460a:	2200      	movs	r2, #0
 800460c:	f103 38ff 	add.w	r8, r3, #4294967295
 8004610:	2300      	movs	r3, #0
 8004612:	f7fc f9c9 	bl	80009a8 <__aeabi_dcmpeq>
 8004616:	b9c0      	cbnz	r0, 800464a <_printf_float+0x40e>
 8004618:	4643      	mov	r3, r8
 800461a:	463a      	mov	r2, r7
 800461c:	4659      	mov	r1, fp
 800461e:	4628      	mov	r0, r5
 8004620:	47b0      	blx	r6
 8004622:	3001      	adds	r0, #1
 8004624:	d10d      	bne.n	8004642 <_printf_float+0x406>
 8004626:	e660      	b.n	80042ea <_printf_float+0xae>
 8004628:	2301      	movs	r3, #1
 800462a:	4642      	mov	r2, r8
 800462c:	4659      	mov	r1, fp
 800462e:	4628      	mov	r0, r5
 8004630:	47b0      	blx	r6
 8004632:	3001      	adds	r0, #1
 8004634:	f43f ae59 	beq.w	80042ea <_printf_float+0xae>
 8004638:	3701      	adds	r7, #1
 800463a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800463c:	3b01      	subs	r3, #1
 800463e:	42bb      	cmp	r3, r7
 8004640:	dcf2      	bgt.n	8004628 <_printf_float+0x3ec>
 8004642:	464b      	mov	r3, r9
 8004644:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004648:	e6e4      	b.n	8004414 <_printf_float+0x1d8>
 800464a:	2700      	movs	r7, #0
 800464c:	f104 081a 	add.w	r8, r4, #26
 8004650:	e7f3      	b.n	800463a <_printf_float+0x3fe>
 8004652:	2301      	movs	r3, #1
 8004654:	e7e1      	b.n	800461a <_printf_float+0x3de>
 8004656:	2301      	movs	r3, #1
 8004658:	4642      	mov	r2, r8
 800465a:	4659      	mov	r1, fp
 800465c:	4628      	mov	r0, r5
 800465e:	47b0      	blx	r6
 8004660:	3001      	adds	r0, #1
 8004662:	f43f ae42 	beq.w	80042ea <_printf_float+0xae>
 8004666:	3701      	adds	r7, #1
 8004668:	68e3      	ldr	r3, [r4, #12]
 800466a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800466c:	1a9b      	subs	r3, r3, r2
 800466e:	42bb      	cmp	r3, r7
 8004670:	dcf1      	bgt.n	8004656 <_printf_float+0x41a>
 8004672:	e702      	b.n	800447a <_printf_float+0x23e>
 8004674:	2700      	movs	r7, #0
 8004676:	f104 0819 	add.w	r8, r4, #25
 800467a:	e7f5      	b.n	8004668 <_printf_float+0x42c>
 800467c:	2b00      	cmp	r3, #0
 800467e:	f43f ae94 	beq.w	80043aa <_printf_float+0x16e>
 8004682:	f04f 0c00 	mov.w	ip, #0
 8004686:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800468a:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800468e:	6022      	str	r2, [r4, #0]
 8004690:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004694:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	463a      	mov	r2, r7
 800469c:	464b      	mov	r3, r9
 800469e:	4628      	mov	r0, r5
 80046a0:	f7ff fd3a 	bl	8004118 <__cvt>
 80046a4:	4607      	mov	r7, r0
 80046a6:	e64f      	b.n	8004348 <_printf_float+0x10c>

080046a8 <_printf_common>:
 80046a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046ac:	4691      	mov	r9, r2
 80046ae:	461f      	mov	r7, r3
 80046b0:	688a      	ldr	r2, [r1, #8]
 80046b2:	690b      	ldr	r3, [r1, #16]
 80046b4:	4606      	mov	r6, r0
 80046b6:	4293      	cmp	r3, r2
 80046b8:	bfb8      	it	lt
 80046ba:	4613      	movlt	r3, r2
 80046bc:	f8c9 3000 	str.w	r3, [r9]
 80046c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80046c4:	460c      	mov	r4, r1
 80046c6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80046ca:	b112      	cbz	r2, 80046d2 <_printf_common+0x2a>
 80046cc:	3301      	adds	r3, #1
 80046ce:	f8c9 3000 	str.w	r3, [r9]
 80046d2:	6823      	ldr	r3, [r4, #0]
 80046d4:	0699      	lsls	r1, r3, #26
 80046d6:	bf42      	ittt	mi
 80046d8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80046dc:	3302      	addmi	r3, #2
 80046de:	f8c9 3000 	strmi.w	r3, [r9]
 80046e2:	6825      	ldr	r5, [r4, #0]
 80046e4:	f015 0506 	ands.w	r5, r5, #6
 80046e8:	d107      	bne.n	80046fa <_printf_common+0x52>
 80046ea:	f104 0a19 	add.w	sl, r4, #25
 80046ee:	68e3      	ldr	r3, [r4, #12]
 80046f0:	f8d9 2000 	ldr.w	r2, [r9]
 80046f4:	1a9b      	subs	r3, r3, r2
 80046f6:	42ab      	cmp	r3, r5
 80046f8:	dc29      	bgt.n	800474e <_printf_common+0xa6>
 80046fa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80046fe:	6822      	ldr	r2, [r4, #0]
 8004700:	3300      	adds	r3, #0
 8004702:	bf18      	it	ne
 8004704:	2301      	movne	r3, #1
 8004706:	0692      	lsls	r2, r2, #26
 8004708:	d42e      	bmi.n	8004768 <_printf_common+0xc0>
 800470a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800470e:	4639      	mov	r1, r7
 8004710:	4630      	mov	r0, r6
 8004712:	47c0      	blx	r8
 8004714:	3001      	adds	r0, #1
 8004716:	d021      	beq.n	800475c <_printf_common+0xb4>
 8004718:	6823      	ldr	r3, [r4, #0]
 800471a:	68e5      	ldr	r5, [r4, #12]
 800471c:	f003 0306 	and.w	r3, r3, #6
 8004720:	2b04      	cmp	r3, #4
 8004722:	bf18      	it	ne
 8004724:	2500      	movne	r5, #0
 8004726:	f8d9 2000 	ldr.w	r2, [r9]
 800472a:	f04f 0900 	mov.w	r9, #0
 800472e:	bf08      	it	eq
 8004730:	1aad      	subeq	r5, r5, r2
 8004732:	68a3      	ldr	r3, [r4, #8]
 8004734:	6922      	ldr	r2, [r4, #16]
 8004736:	bf08      	it	eq
 8004738:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800473c:	4293      	cmp	r3, r2
 800473e:	bfc4      	itt	gt
 8004740:	1a9b      	subgt	r3, r3, r2
 8004742:	18ed      	addgt	r5, r5, r3
 8004744:	341a      	adds	r4, #26
 8004746:	454d      	cmp	r5, r9
 8004748:	d11a      	bne.n	8004780 <_printf_common+0xd8>
 800474a:	2000      	movs	r0, #0
 800474c:	e008      	b.n	8004760 <_printf_common+0xb8>
 800474e:	2301      	movs	r3, #1
 8004750:	4652      	mov	r2, sl
 8004752:	4639      	mov	r1, r7
 8004754:	4630      	mov	r0, r6
 8004756:	47c0      	blx	r8
 8004758:	3001      	adds	r0, #1
 800475a:	d103      	bne.n	8004764 <_printf_common+0xbc>
 800475c:	f04f 30ff 	mov.w	r0, #4294967295
 8004760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004764:	3501      	adds	r5, #1
 8004766:	e7c2      	b.n	80046ee <_printf_common+0x46>
 8004768:	2030      	movs	r0, #48	; 0x30
 800476a:	18e1      	adds	r1, r4, r3
 800476c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004770:	1c5a      	adds	r2, r3, #1
 8004772:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004776:	4422      	add	r2, r4
 8004778:	3302      	adds	r3, #2
 800477a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800477e:	e7c4      	b.n	800470a <_printf_common+0x62>
 8004780:	2301      	movs	r3, #1
 8004782:	4622      	mov	r2, r4
 8004784:	4639      	mov	r1, r7
 8004786:	4630      	mov	r0, r6
 8004788:	47c0      	blx	r8
 800478a:	3001      	adds	r0, #1
 800478c:	d0e6      	beq.n	800475c <_printf_common+0xb4>
 800478e:	f109 0901 	add.w	r9, r9, #1
 8004792:	e7d8      	b.n	8004746 <_printf_common+0x9e>

08004794 <_printf_i>:
 8004794:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004798:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800479c:	460c      	mov	r4, r1
 800479e:	7e09      	ldrb	r1, [r1, #24]
 80047a0:	b085      	sub	sp, #20
 80047a2:	296e      	cmp	r1, #110	; 0x6e
 80047a4:	4617      	mov	r7, r2
 80047a6:	4606      	mov	r6, r0
 80047a8:	4698      	mov	r8, r3
 80047aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80047ac:	f000 80b3 	beq.w	8004916 <_printf_i+0x182>
 80047b0:	d822      	bhi.n	80047f8 <_printf_i+0x64>
 80047b2:	2963      	cmp	r1, #99	; 0x63
 80047b4:	d036      	beq.n	8004824 <_printf_i+0x90>
 80047b6:	d80a      	bhi.n	80047ce <_printf_i+0x3a>
 80047b8:	2900      	cmp	r1, #0
 80047ba:	f000 80b9 	beq.w	8004930 <_printf_i+0x19c>
 80047be:	2958      	cmp	r1, #88	; 0x58
 80047c0:	f000 8083 	beq.w	80048ca <_printf_i+0x136>
 80047c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047c8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80047cc:	e032      	b.n	8004834 <_printf_i+0xa0>
 80047ce:	2964      	cmp	r1, #100	; 0x64
 80047d0:	d001      	beq.n	80047d6 <_printf_i+0x42>
 80047d2:	2969      	cmp	r1, #105	; 0x69
 80047d4:	d1f6      	bne.n	80047c4 <_printf_i+0x30>
 80047d6:	6820      	ldr	r0, [r4, #0]
 80047d8:	6813      	ldr	r3, [r2, #0]
 80047da:	0605      	lsls	r5, r0, #24
 80047dc:	f103 0104 	add.w	r1, r3, #4
 80047e0:	d52a      	bpl.n	8004838 <_printf_i+0xa4>
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6011      	str	r1, [r2, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	da03      	bge.n	80047f2 <_printf_i+0x5e>
 80047ea:	222d      	movs	r2, #45	; 0x2d
 80047ec:	425b      	negs	r3, r3
 80047ee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80047f2:	486f      	ldr	r0, [pc, #444]	; (80049b0 <_printf_i+0x21c>)
 80047f4:	220a      	movs	r2, #10
 80047f6:	e039      	b.n	800486c <_printf_i+0xd8>
 80047f8:	2973      	cmp	r1, #115	; 0x73
 80047fa:	f000 809d 	beq.w	8004938 <_printf_i+0x1a4>
 80047fe:	d808      	bhi.n	8004812 <_printf_i+0x7e>
 8004800:	296f      	cmp	r1, #111	; 0x6f
 8004802:	d020      	beq.n	8004846 <_printf_i+0xb2>
 8004804:	2970      	cmp	r1, #112	; 0x70
 8004806:	d1dd      	bne.n	80047c4 <_printf_i+0x30>
 8004808:	6823      	ldr	r3, [r4, #0]
 800480a:	f043 0320 	orr.w	r3, r3, #32
 800480e:	6023      	str	r3, [r4, #0]
 8004810:	e003      	b.n	800481a <_printf_i+0x86>
 8004812:	2975      	cmp	r1, #117	; 0x75
 8004814:	d017      	beq.n	8004846 <_printf_i+0xb2>
 8004816:	2978      	cmp	r1, #120	; 0x78
 8004818:	d1d4      	bne.n	80047c4 <_printf_i+0x30>
 800481a:	2378      	movs	r3, #120	; 0x78
 800481c:	4865      	ldr	r0, [pc, #404]	; (80049b4 <_printf_i+0x220>)
 800481e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004822:	e055      	b.n	80048d0 <_printf_i+0x13c>
 8004824:	6813      	ldr	r3, [r2, #0]
 8004826:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800482a:	1d19      	adds	r1, r3, #4
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6011      	str	r1, [r2, #0]
 8004830:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004834:	2301      	movs	r3, #1
 8004836:	e08c      	b.n	8004952 <_printf_i+0x1be>
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800483e:	6011      	str	r1, [r2, #0]
 8004840:	bf18      	it	ne
 8004842:	b21b      	sxthne	r3, r3
 8004844:	e7cf      	b.n	80047e6 <_printf_i+0x52>
 8004846:	6813      	ldr	r3, [r2, #0]
 8004848:	6825      	ldr	r5, [r4, #0]
 800484a:	1d18      	adds	r0, r3, #4
 800484c:	6010      	str	r0, [r2, #0]
 800484e:	0628      	lsls	r0, r5, #24
 8004850:	d501      	bpl.n	8004856 <_printf_i+0xc2>
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	e002      	b.n	800485c <_printf_i+0xc8>
 8004856:	0668      	lsls	r0, r5, #25
 8004858:	d5fb      	bpl.n	8004852 <_printf_i+0xbe>
 800485a:	881b      	ldrh	r3, [r3, #0]
 800485c:	296f      	cmp	r1, #111	; 0x6f
 800485e:	bf14      	ite	ne
 8004860:	220a      	movne	r2, #10
 8004862:	2208      	moveq	r2, #8
 8004864:	4852      	ldr	r0, [pc, #328]	; (80049b0 <_printf_i+0x21c>)
 8004866:	2100      	movs	r1, #0
 8004868:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800486c:	6865      	ldr	r5, [r4, #4]
 800486e:	2d00      	cmp	r5, #0
 8004870:	60a5      	str	r5, [r4, #8]
 8004872:	f2c0 8095 	blt.w	80049a0 <_printf_i+0x20c>
 8004876:	6821      	ldr	r1, [r4, #0]
 8004878:	f021 0104 	bic.w	r1, r1, #4
 800487c:	6021      	str	r1, [r4, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d13d      	bne.n	80048fe <_printf_i+0x16a>
 8004882:	2d00      	cmp	r5, #0
 8004884:	f040 808e 	bne.w	80049a4 <_printf_i+0x210>
 8004888:	4665      	mov	r5, ip
 800488a:	2a08      	cmp	r2, #8
 800488c:	d10b      	bne.n	80048a6 <_printf_i+0x112>
 800488e:	6823      	ldr	r3, [r4, #0]
 8004890:	07db      	lsls	r3, r3, #31
 8004892:	d508      	bpl.n	80048a6 <_printf_i+0x112>
 8004894:	6923      	ldr	r3, [r4, #16]
 8004896:	6862      	ldr	r2, [r4, #4]
 8004898:	429a      	cmp	r2, r3
 800489a:	bfde      	ittt	le
 800489c:	2330      	movle	r3, #48	; 0x30
 800489e:	f805 3c01 	strble.w	r3, [r5, #-1]
 80048a2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80048a6:	ebac 0305 	sub.w	r3, ip, r5
 80048aa:	6123      	str	r3, [r4, #16]
 80048ac:	f8cd 8000 	str.w	r8, [sp]
 80048b0:	463b      	mov	r3, r7
 80048b2:	aa03      	add	r2, sp, #12
 80048b4:	4621      	mov	r1, r4
 80048b6:	4630      	mov	r0, r6
 80048b8:	f7ff fef6 	bl	80046a8 <_printf_common>
 80048bc:	3001      	adds	r0, #1
 80048be:	d14d      	bne.n	800495c <_printf_i+0x1c8>
 80048c0:	f04f 30ff 	mov.w	r0, #4294967295
 80048c4:	b005      	add	sp, #20
 80048c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80048ca:	4839      	ldr	r0, [pc, #228]	; (80049b0 <_printf_i+0x21c>)
 80048cc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80048d0:	6813      	ldr	r3, [r2, #0]
 80048d2:	6821      	ldr	r1, [r4, #0]
 80048d4:	1d1d      	adds	r5, r3, #4
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6015      	str	r5, [r2, #0]
 80048da:	060a      	lsls	r2, r1, #24
 80048dc:	d50b      	bpl.n	80048f6 <_printf_i+0x162>
 80048de:	07ca      	lsls	r2, r1, #31
 80048e0:	bf44      	itt	mi
 80048e2:	f041 0120 	orrmi.w	r1, r1, #32
 80048e6:	6021      	strmi	r1, [r4, #0]
 80048e8:	b91b      	cbnz	r3, 80048f2 <_printf_i+0x15e>
 80048ea:	6822      	ldr	r2, [r4, #0]
 80048ec:	f022 0220 	bic.w	r2, r2, #32
 80048f0:	6022      	str	r2, [r4, #0]
 80048f2:	2210      	movs	r2, #16
 80048f4:	e7b7      	b.n	8004866 <_printf_i+0xd2>
 80048f6:	064d      	lsls	r5, r1, #25
 80048f8:	bf48      	it	mi
 80048fa:	b29b      	uxthmi	r3, r3
 80048fc:	e7ef      	b.n	80048de <_printf_i+0x14a>
 80048fe:	4665      	mov	r5, ip
 8004900:	fbb3 f1f2 	udiv	r1, r3, r2
 8004904:	fb02 3311 	mls	r3, r2, r1, r3
 8004908:	5cc3      	ldrb	r3, [r0, r3]
 800490a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800490e:	460b      	mov	r3, r1
 8004910:	2900      	cmp	r1, #0
 8004912:	d1f5      	bne.n	8004900 <_printf_i+0x16c>
 8004914:	e7b9      	b.n	800488a <_printf_i+0xf6>
 8004916:	6813      	ldr	r3, [r2, #0]
 8004918:	6825      	ldr	r5, [r4, #0]
 800491a:	1d18      	adds	r0, r3, #4
 800491c:	6961      	ldr	r1, [r4, #20]
 800491e:	6010      	str	r0, [r2, #0]
 8004920:	0628      	lsls	r0, r5, #24
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	d501      	bpl.n	800492a <_printf_i+0x196>
 8004926:	6019      	str	r1, [r3, #0]
 8004928:	e002      	b.n	8004930 <_printf_i+0x19c>
 800492a:	066a      	lsls	r2, r5, #25
 800492c:	d5fb      	bpl.n	8004926 <_printf_i+0x192>
 800492e:	8019      	strh	r1, [r3, #0]
 8004930:	2300      	movs	r3, #0
 8004932:	4665      	mov	r5, ip
 8004934:	6123      	str	r3, [r4, #16]
 8004936:	e7b9      	b.n	80048ac <_printf_i+0x118>
 8004938:	6813      	ldr	r3, [r2, #0]
 800493a:	1d19      	adds	r1, r3, #4
 800493c:	6011      	str	r1, [r2, #0]
 800493e:	681d      	ldr	r5, [r3, #0]
 8004940:	6862      	ldr	r2, [r4, #4]
 8004942:	2100      	movs	r1, #0
 8004944:	4628      	mov	r0, r5
 8004946:	f002 fb77 	bl	8007038 <memchr>
 800494a:	b108      	cbz	r0, 8004950 <_printf_i+0x1bc>
 800494c:	1b40      	subs	r0, r0, r5
 800494e:	6060      	str	r0, [r4, #4]
 8004950:	6863      	ldr	r3, [r4, #4]
 8004952:	6123      	str	r3, [r4, #16]
 8004954:	2300      	movs	r3, #0
 8004956:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800495a:	e7a7      	b.n	80048ac <_printf_i+0x118>
 800495c:	6923      	ldr	r3, [r4, #16]
 800495e:	462a      	mov	r2, r5
 8004960:	4639      	mov	r1, r7
 8004962:	4630      	mov	r0, r6
 8004964:	47c0      	blx	r8
 8004966:	3001      	adds	r0, #1
 8004968:	d0aa      	beq.n	80048c0 <_printf_i+0x12c>
 800496a:	6823      	ldr	r3, [r4, #0]
 800496c:	079b      	lsls	r3, r3, #30
 800496e:	d413      	bmi.n	8004998 <_printf_i+0x204>
 8004970:	68e0      	ldr	r0, [r4, #12]
 8004972:	9b03      	ldr	r3, [sp, #12]
 8004974:	4298      	cmp	r0, r3
 8004976:	bfb8      	it	lt
 8004978:	4618      	movlt	r0, r3
 800497a:	e7a3      	b.n	80048c4 <_printf_i+0x130>
 800497c:	2301      	movs	r3, #1
 800497e:	464a      	mov	r2, r9
 8004980:	4639      	mov	r1, r7
 8004982:	4630      	mov	r0, r6
 8004984:	47c0      	blx	r8
 8004986:	3001      	adds	r0, #1
 8004988:	d09a      	beq.n	80048c0 <_printf_i+0x12c>
 800498a:	3501      	adds	r5, #1
 800498c:	68e3      	ldr	r3, [r4, #12]
 800498e:	9a03      	ldr	r2, [sp, #12]
 8004990:	1a9b      	subs	r3, r3, r2
 8004992:	42ab      	cmp	r3, r5
 8004994:	dcf2      	bgt.n	800497c <_printf_i+0x1e8>
 8004996:	e7eb      	b.n	8004970 <_printf_i+0x1dc>
 8004998:	2500      	movs	r5, #0
 800499a:	f104 0919 	add.w	r9, r4, #25
 800499e:	e7f5      	b.n	800498c <_printf_i+0x1f8>
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1ac      	bne.n	80048fe <_printf_i+0x16a>
 80049a4:	7803      	ldrb	r3, [r0, #0]
 80049a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049ae:	e76c      	b.n	800488a <_printf_i+0xf6>
 80049b0:	0800854e 	.word	0x0800854e
 80049b4:	0800855f 	.word	0x0800855f

080049b8 <_scanf_float>:
 80049b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049bc:	469a      	mov	sl, r3
 80049be:	688b      	ldr	r3, [r1, #8]
 80049c0:	4616      	mov	r6, r2
 80049c2:	1e5a      	subs	r2, r3, #1
 80049c4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80049c8:	bf88      	it	hi
 80049ca:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80049ce:	b087      	sub	sp, #28
 80049d0:	bf85      	ittet	hi
 80049d2:	189b      	addhi	r3, r3, r2
 80049d4:	9301      	strhi	r3, [sp, #4]
 80049d6:	2300      	movls	r3, #0
 80049d8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80049dc:	4688      	mov	r8, r1
 80049de:	f04f 0b00 	mov.w	fp, #0
 80049e2:	bf8c      	ite	hi
 80049e4:	608b      	strhi	r3, [r1, #8]
 80049e6:	9301      	strls	r3, [sp, #4]
 80049e8:	680b      	ldr	r3, [r1, #0]
 80049ea:	4607      	mov	r7, r0
 80049ec:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80049f0:	f848 3b1c 	str.w	r3, [r8], #28
 80049f4:	460c      	mov	r4, r1
 80049f6:	4645      	mov	r5, r8
 80049f8:	465a      	mov	r2, fp
 80049fa:	46d9      	mov	r9, fp
 80049fc:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8004a00:	f8cd b008 	str.w	fp, [sp, #8]
 8004a04:	68a1      	ldr	r1, [r4, #8]
 8004a06:	b181      	cbz	r1, 8004a2a <_scanf_float+0x72>
 8004a08:	6833      	ldr	r3, [r6, #0]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	2b49      	cmp	r3, #73	; 0x49
 8004a0e:	d071      	beq.n	8004af4 <_scanf_float+0x13c>
 8004a10:	d84d      	bhi.n	8004aae <_scanf_float+0xf6>
 8004a12:	2b39      	cmp	r3, #57	; 0x39
 8004a14:	d840      	bhi.n	8004a98 <_scanf_float+0xe0>
 8004a16:	2b31      	cmp	r3, #49	; 0x31
 8004a18:	f080 8088 	bcs.w	8004b2c <_scanf_float+0x174>
 8004a1c:	2b2d      	cmp	r3, #45	; 0x2d
 8004a1e:	f000 8090 	beq.w	8004b42 <_scanf_float+0x18a>
 8004a22:	d815      	bhi.n	8004a50 <_scanf_float+0x98>
 8004a24:	2b2b      	cmp	r3, #43	; 0x2b
 8004a26:	f000 808c 	beq.w	8004b42 <_scanf_float+0x18a>
 8004a2a:	f1b9 0f00 	cmp.w	r9, #0
 8004a2e:	d003      	beq.n	8004a38 <_scanf_float+0x80>
 8004a30:	6823      	ldr	r3, [r4, #0]
 8004a32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a36:	6023      	str	r3, [r4, #0]
 8004a38:	3a01      	subs	r2, #1
 8004a3a:	2a01      	cmp	r2, #1
 8004a3c:	f200 80ea 	bhi.w	8004c14 <_scanf_float+0x25c>
 8004a40:	4545      	cmp	r5, r8
 8004a42:	f200 80dc 	bhi.w	8004bfe <_scanf_float+0x246>
 8004a46:	2601      	movs	r6, #1
 8004a48:	4630      	mov	r0, r6
 8004a4a:	b007      	add	sp, #28
 8004a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a50:	2b2e      	cmp	r3, #46	; 0x2e
 8004a52:	f000 809f 	beq.w	8004b94 <_scanf_float+0x1dc>
 8004a56:	2b30      	cmp	r3, #48	; 0x30
 8004a58:	d1e7      	bne.n	8004a2a <_scanf_float+0x72>
 8004a5a:	6820      	ldr	r0, [r4, #0]
 8004a5c:	f410 7f80 	tst.w	r0, #256	; 0x100
 8004a60:	d064      	beq.n	8004b2c <_scanf_float+0x174>
 8004a62:	9b01      	ldr	r3, [sp, #4]
 8004a64:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8004a68:	6020      	str	r0, [r4, #0]
 8004a6a:	f109 0901 	add.w	r9, r9, #1
 8004a6e:	b11b      	cbz	r3, 8004a78 <_scanf_float+0xc0>
 8004a70:	3b01      	subs	r3, #1
 8004a72:	3101      	adds	r1, #1
 8004a74:	9301      	str	r3, [sp, #4]
 8004a76:	60a1      	str	r1, [r4, #8]
 8004a78:	68a3      	ldr	r3, [r4, #8]
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	60a3      	str	r3, [r4, #8]
 8004a7e:	6923      	ldr	r3, [r4, #16]
 8004a80:	3301      	adds	r3, #1
 8004a82:	6123      	str	r3, [r4, #16]
 8004a84:	6873      	ldr	r3, [r6, #4]
 8004a86:	3b01      	subs	r3, #1
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	6073      	str	r3, [r6, #4]
 8004a8c:	f340 80ac 	ble.w	8004be8 <_scanf_float+0x230>
 8004a90:	6833      	ldr	r3, [r6, #0]
 8004a92:	3301      	adds	r3, #1
 8004a94:	6033      	str	r3, [r6, #0]
 8004a96:	e7b5      	b.n	8004a04 <_scanf_float+0x4c>
 8004a98:	2b45      	cmp	r3, #69	; 0x45
 8004a9a:	f000 8085 	beq.w	8004ba8 <_scanf_float+0x1f0>
 8004a9e:	2b46      	cmp	r3, #70	; 0x46
 8004aa0:	d06a      	beq.n	8004b78 <_scanf_float+0x1c0>
 8004aa2:	2b41      	cmp	r3, #65	; 0x41
 8004aa4:	d1c1      	bne.n	8004a2a <_scanf_float+0x72>
 8004aa6:	2a01      	cmp	r2, #1
 8004aa8:	d1bf      	bne.n	8004a2a <_scanf_float+0x72>
 8004aaa:	2202      	movs	r2, #2
 8004aac:	e046      	b.n	8004b3c <_scanf_float+0x184>
 8004aae:	2b65      	cmp	r3, #101	; 0x65
 8004ab0:	d07a      	beq.n	8004ba8 <_scanf_float+0x1f0>
 8004ab2:	d818      	bhi.n	8004ae6 <_scanf_float+0x12e>
 8004ab4:	2b54      	cmp	r3, #84	; 0x54
 8004ab6:	d066      	beq.n	8004b86 <_scanf_float+0x1ce>
 8004ab8:	d811      	bhi.n	8004ade <_scanf_float+0x126>
 8004aba:	2b4e      	cmp	r3, #78	; 0x4e
 8004abc:	d1b5      	bne.n	8004a2a <_scanf_float+0x72>
 8004abe:	2a00      	cmp	r2, #0
 8004ac0:	d146      	bne.n	8004b50 <_scanf_float+0x198>
 8004ac2:	f1b9 0f00 	cmp.w	r9, #0
 8004ac6:	d145      	bne.n	8004b54 <_scanf_float+0x19c>
 8004ac8:	6821      	ldr	r1, [r4, #0]
 8004aca:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004ace:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004ad2:	d13f      	bne.n	8004b54 <_scanf_float+0x19c>
 8004ad4:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004ad8:	6021      	str	r1, [r4, #0]
 8004ada:	2201      	movs	r2, #1
 8004adc:	e02e      	b.n	8004b3c <_scanf_float+0x184>
 8004ade:	2b59      	cmp	r3, #89	; 0x59
 8004ae0:	d01e      	beq.n	8004b20 <_scanf_float+0x168>
 8004ae2:	2b61      	cmp	r3, #97	; 0x61
 8004ae4:	e7de      	b.n	8004aa4 <_scanf_float+0xec>
 8004ae6:	2b6e      	cmp	r3, #110	; 0x6e
 8004ae8:	d0e9      	beq.n	8004abe <_scanf_float+0x106>
 8004aea:	d815      	bhi.n	8004b18 <_scanf_float+0x160>
 8004aec:	2b66      	cmp	r3, #102	; 0x66
 8004aee:	d043      	beq.n	8004b78 <_scanf_float+0x1c0>
 8004af0:	2b69      	cmp	r3, #105	; 0x69
 8004af2:	d19a      	bne.n	8004a2a <_scanf_float+0x72>
 8004af4:	f1bb 0f00 	cmp.w	fp, #0
 8004af8:	d138      	bne.n	8004b6c <_scanf_float+0x1b4>
 8004afa:	f1b9 0f00 	cmp.w	r9, #0
 8004afe:	d197      	bne.n	8004a30 <_scanf_float+0x78>
 8004b00:	6821      	ldr	r1, [r4, #0]
 8004b02:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004b06:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004b0a:	d195      	bne.n	8004a38 <_scanf_float+0x80>
 8004b0c:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004b10:	6021      	str	r1, [r4, #0]
 8004b12:	f04f 0b01 	mov.w	fp, #1
 8004b16:	e011      	b.n	8004b3c <_scanf_float+0x184>
 8004b18:	2b74      	cmp	r3, #116	; 0x74
 8004b1a:	d034      	beq.n	8004b86 <_scanf_float+0x1ce>
 8004b1c:	2b79      	cmp	r3, #121	; 0x79
 8004b1e:	d184      	bne.n	8004a2a <_scanf_float+0x72>
 8004b20:	f1bb 0f07 	cmp.w	fp, #7
 8004b24:	d181      	bne.n	8004a2a <_scanf_float+0x72>
 8004b26:	f04f 0b08 	mov.w	fp, #8
 8004b2a:	e007      	b.n	8004b3c <_scanf_float+0x184>
 8004b2c:	eb12 0f0b 	cmn.w	r2, fp
 8004b30:	f47f af7b 	bne.w	8004a2a <_scanf_float+0x72>
 8004b34:	6821      	ldr	r1, [r4, #0]
 8004b36:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8004b3a:	6021      	str	r1, [r4, #0]
 8004b3c:	702b      	strb	r3, [r5, #0]
 8004b3e:	3501      	adds	r5, #1
 8004b40:	e79a      	b.n	8004a78 <_scanf_float+0xc0>
 8004b42:	6821      	ldr	r1, [r4, #0]
 8004b44:	0608      	lsls	r0, r1, #24
 8004b46:	f57f af70 	bpl.w	8004a2a <_scanf_float+0x72>
 8004b4a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004b4e:	e7f4      	b.n	8004b3a <_scanf_float+0x182>
 8004b50:	2a02      	cmp	r2, #2
 8004b52:	d047      	beq.n	8004be4 <_scanf_float+0x22c>
 8004b54:	f1bb 0f01 	cmp.w	fp, #1
 8004b58:	d003      	beq.n	8004b62 <_scanf_float+0x1aa>
 8004b5a:	f1bb 0f04 	cmp.w	fp, #4
 8004b5e:	f47f af64 	bne.w	8004a2a <_scanf_float+0x72>
 8004b62:	f10b 0b01 	add.w	fp, fp, #1
 8004b66:	fa5f fb8b 	uxtb.w	fp, fp
 8004b6a:	e7e7      	b.n	8004b3c <_scanf_float+0x184>
 8004b6c:	f1bb 0f03 	cmp.w	fp, #3
 8004b70:	d0f7      	beq.n	8004b62 <_scanf_float+0x1aa>
 8004b72:	f1bb 0f05 	cmp.w	fp, #5
 8004b76:	e7f2      	b.n	8004b5e <_scanf_float+0x1a6>
 8004b78:	f1bb 0f02 	cmp.w	fp, #2
 8004b7c:	f47f af55 	bne.w	8004a2a <_scanf_float+0x72>
 8004b80:	f04f 0b03 	mov.w	fp, #3
 8004b84:	e7da      	b.n	8004b3c <_scanf_float+0x184>
 8004b86:	f1bb 0f06 	cmp.w	fp, #6
 8004b8a:	f47f af4e 	bne.w	8004a2a <_scanf_float+0x72>
 8004b8e:	f04f 0b07 	mov.w	fp, #7
 8004b92:	e7d3      	b.n	8004b3c <_scanf_float+0x184>
 8004b94:	6821      	ldr	r1, [r4, #0]
 8004b96:	0588      	lsls	r0, r1, #22
 8004b98:	f57f af47 	bpl.w	8004a2a <_scanf_float+0x72>
 8004b9c:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8004ba0:	6021      	str	r1, [r4, #0]
 8004ba2:	f8cd 9008 	str.w	r9, [sp, #8]
 8004ba6:	e7c9      	b.n	8004b3c <_scanf_float+0x184>
 8004ba8:	6821      	ldr	r1, [r4, #0]
 8004baa:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8004bae:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004bb2:	d006      	beq.n	8004bc2 <_scanf_float+0x20a>
 8004bb4:	0548      	lsls	r0, r1, #21
 8004bb6:	f57f af38 	bpl.w	8004a2a <_scanf_float+0x72>
 8004bba:	f1b9 0f00 	cmp.w	r9, #0
 8004bbe:	f43f af3b 	beq.w	8004a38 <_scanf_float+0x80>
 8004bc2:	0588      	lsls	r0, r1, #22
 8004bc4:	bf58      	it	pl
 8004bc6:	9802      	ldrpl	r0, [sp, #8]
 8004bc8:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004bcc:	bf58      	it	pl
 8004bce:	eba9 0000 	subpl.w	r0, r9, r0
 8004bd2:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8004bd6:	bf58      	it	pl
 8004bd8:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8004bdc:	6021      	str	r1, [r4, #0]
 8004bde:	f04f 0900 	mov.w	r9, #0
 8004be2:	e7ab      	b.n	8004b3c <_scanf_float+0x184>
 8004be4:	2203      	movs	r2, #3
 8004be6:	e7a9      	b.n	8004b3c <_scanf_float+0x184>
 8004be8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004bec:	4631      	mov	r1, r6
 8004bee:	4638      	mov	r0, r7
 8004bf0:	9205      	str	r2, [sp, #20]
 8004bf2:	4798      	blx	r3
 8004bf4:	9a05      	ldr	r2, [sp, #20]
 8004bf6:	2800      	cmp	r0, #0
 8004bf8:	f43f af04 	beq.w	8004a04 <_scanf_float+0x4c>
 8004bfc:	e715      	b.n	8004a2a <_scanf_float+0x72>
 8004bfe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c02:	4632      	mov	r2, r6
 8004c04:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004c08:	4638      	mov	r0, r7
 8004c0a:	4798      	blx	r3
 8004c0c:	6923      	ldr	r3, [r4, #16]
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	6123      	str	r3, [r4, #16]
 8004c12:	e715      	b.n	8004a40 <_scanf_float+0x88>
 8004c14:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004c18:	2b06      	cmp	r3, #6
 8004c1a:	d80a      	bhi.n	8004c32 <_scanf_float+0x27a>
 8004c1c:	f1bb 0f02 	cmp.w	fp, #2
 8004c20:	d967      	bls.n	8004cf2 <_scanf_float+0x33a>
 8004c22:	f1ab 0b03 	sub.w	fp, fp, #3
 8004c26:	fa5f fb8b 	uxtb.w	fp, fp
 8004c2a:	eba5 0b0b 	sub.w	fp, r5, fp
 8004c2e:	455d      	cmp	r5, fp
 8004c30:	d14a      	bne.n	8004cc8 <_scanf_float+0x310>
 8004c32:	6823      	ldr	r3, [r4, #0]
 8004c34:	05da      	lsls	r2, r3, #23
 8004c36:	d51f      	bpl.n	8004c78 <_scanf_float+0x2c0>
 8004c38:	055b      	lsls	r3, r3, #21
 8004c3a:	d467      	bmi.n	8004d0c <_scanf_float+0x354>
 8004c3c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004c40:	6923      	ldr	r3, [r4, #16]
 8004c42:	2965      	cmp	r1, #101	; 0x65
 8004c44:	f103 33ff 	add.w	r3, r3, #4294967295
 8004c48:	f105 3bff 	add.w	fp, r5, #4294967295
 8004c4c:	6123      	str	r3, [r4, #16]
 8004c4e:	d00d      	beq.n	8004c6c <_scanf_float+0x2b4>
 8004c50:	2945      	cmp	r1, #69	; 0x45
 8004c52:	d00b      	beq.n	8004c6c <_scanf_float+0x2b4>
 8004c54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c58:	4632      	mov	r2, r6
 8004c5a:	4638      	mov	r0, r7
 8004c5c:	4798      	blx	r3
 8004c5e:	6923      	ldr	r3, [r4, #16]
 8004c60:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8004c64:	3b01      	subs	r3, #1
 8004c66:	f1a5 0b02 	sub.w	fp, r5, #2
 8004c6a:	6123      	str	r3, [r4, #16]
 8004c6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c70:	4632      	mov	r2, r6
 8004c72:	4638      	mov	r0, r7
 8004c74:	4798      	blx	r3
 8004c76:	465d      	mov	r5, fp
 8004c78:	6826      	ldr	r6, [r4, #0]
 8004c7a:	f016 0610 	ands.w	r6, r6, #16
 8004c7e:	d176      	bne.n	8004d6e <_scanf_float+0x3b6>
 8004c80:	702e      	strb	r6, [r5, #0]
 8004c82:	6823      	ldr	r3, [r4, #0]
 8004c84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c8c:	d141      	bne.n	8004d12 <_scanf_float+0x35a>
 8004c8e:	9b02      	ldr	r3, [sp, #8]
 8004c90:	eba9 0303 	sub.w	r3, r9, r3
 8004c94:	425a      	negs	r2, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d148      	bne.n	8004d2c <_scanf_float+0x374>
 8004c9a:	4641      	mov	r1, r8
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	4638      	mov	r0, r7
 8004ca0:	f000 feca 	bl	8005a38 <_strtod_r>
 8004ca4:	6825      	ldr	r5, [r4, #0]
 8004ca6:	4680      	mov	r8, r0
 8004ca8:	f015 0f02 	tst.w	r5, #2
 8004cac:	4689      	mov	r9, r1
 8004cae:	f8da 3000 	ldr.w	r3, [sl]
 8004cb2:	d046      	beq.n	8004d42 <_scanf_float+0x38a>
 8004cb4:	1d1a      	adds	r2, r3, #4
 8004cb6:	f8ca 2000 	str.w	r2, [sl]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	e9c3 8900 	strd	r8, r9, [r3]
 8004cc0:	68e3      	ldr	r3, [r4, #12]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	60e3      	str	r3, [r4, #12]
 8004cc6:	e6bf      	b.n	8004a48 <_scanf_float+0x90>
 8004cc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ccc:	4632      	mov	r2, r6
 8004cce:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004cd2:	4638      	mov	r0, r7
 8004cd4:	4798      	blx	r3
 8004cd6:	6923      	ldr	r3, [r4, #16]
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	6123      	str	r3, [r4, #16]
 8004cdc:	e7a7      	b.n	8004c2e <_scanf_float+0x276>
 8004cde:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ce2:	4632      	mov	r2, r6
 8004ce4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004ce8:	4638      	mov	r0, r7
 8004cea:	4798      	blx	r3
 8004cec:	6923      	ldr	r3, [r4, #16]
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	6123      	str	r3, [r4, #16]
 8004cf2:	4545      	cmp	r5, r8
 8004cf4:	d8f3      	bhi.n	8004cde <_scanf_float+0x326>
 8004cf6:	e6a6      	b.n	8004a46 <_scanf_float+0x8e>
 8004cf8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004cfc:	4632      	mov	r2, r6
 8004cfe:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004d02:	4638      	mov	r0, r7
 8004d04:	4798      	blx	r3
 8004d06:	6923      	ldr	r3, [r4, #16]
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	6123      	str	r3, [r4, #16]
 8004d0c:	4545      	cmp	r5, r8
 8004d0e:	d8f3      	bhi.n	8004cf8 <_scanf_float+0x340>
 8004d10:	e699      	b.n	8004a46 <_scanf_float+0x8e>
 8004d12:	9b03      	ldr	r3, [sp, #12]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d0c0      	beq.n	8004c9a <_scanf_float+0x2e2>
 8004d18:	9904      	ldr	r1, [sp, #16]
 8004d1a:	230a      	movs	r3, #10
 8004d1c:	4632      	mov	r2, r6
 8004d1e:	3101      	adds	r1, #1
 8004d20:	4638      	mov	r0, r7
 8004d22:	f000 ff15 	bl	8005b50 <_strtol_r>
 8004d26:	9b03      	ldr	r3, [sp, #12]
 8004d28:	9d04      	ldr	r5, [sp, #16]
 8004d2a:	1ac2      	subs	r2, r0, r3
 8004d2c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004d30:	429d      	cmp	r5, r3
 8004d32:	bf28      	it	cs
 8004d34:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8004d38:	490e      	ldr	r1, [pc, #56]	; (8004d74 <_scanf_float+0x3bc>)
 8004d3a:	4628      	mov	r0, r5
 8004d3c:	f000 f838 	bl	8004db0 <siprintf>
 8004d40:	e7ab      	b.n	8004c9a <_scanf_float+0x2e2>
 8004d42:	1d1f      	adds	r7, r3, #4
 8004d44:	f015 0504 	ands.w	r5, r5, #4
 8004d48:	f8ca 7000 	str.w	r7, [sl]
 8004d4c:	d1b5      	bne.n	8004cba <_scanf_float+0x302>
 8004d4e:	681f      	ldr	r7, [r3, #0]
 8004d50:	4602      	mov	r2, r0
 8004d52:	460b      	mov	r3, r1
 8004d54:	f7fb fe5a 	bl	8000a0c <__aeabi_dcmpun>
 8004d58:	b120      	cbz	r0, 8004d64 <_scanf_float+0x3ac>
 8004d5a:	4628      	mov	r0, r5
 8004d5c:	f000 f824 	bl	8004da8 <nanf>
 8004d60:	6038      	str	r0, [r7, #0]
 8004d62:	e7ad      	b.n	8004cc0 <_scanf_float+0x308>
 8004d64:	4640      	mov	r0, r8
 8004d66:	4649      	mov	r1, r9
 8004d68:	f7fb feae 	bl	8000ac8 <__aeabi_d2f>
 8004d6c:	e7f8      	b.n	8004d60 <_scanf_float+0x3a8>
 8004d6e:	2600      	movs	r6, #0
 8004d70:	e66a      	b.n	8004a48 <_scanf_float+0x90>
 8004d72:	bf00      	nop
 8004d74:	08008570 	.word	0x08008570

08004d78 <iprintf>:
 8004d78:	b40f      	push	{r0, r1, r2, r3}
 8004d7a:	4b0a      	ldr	r3, [pc, #40]	; (8004da4 <iprintf+0x2c>)
 8004d7c:	b513      	push	{r0, r1, r4, lr}
 8004d7e:	681c      	ldr	r4, [r3, #0]
 8004d80:	b124      	cbz	r4, 8004d8c <iprintf+0x14>
 8004d82:	69a3      	ldr	r3, [r4, #24]
 8004d84:	b913      	cbnz	r3, 8004d8c <iprintf+0x14>
 8004d86:	4620      	mov	r0, r4
 8004d88:	f001 fd76 	bl	8006878 <__sinit>
 8004d8c:	ab05      	add	r3, sp, #20
 8004d8e:	9a04      	ldr	r2, [sp, #16]
 8004d90:	68a1      	ldr	r1, [r4, #8]
 8004d92:	4620      	mov	r0, r4
 8004d94:	9301      	str	r3, [sp, #4]
 8004d96:	f002 ff8f 	bl	8007cb8 <_vfiprintf_r>
 8004d9a:	b002      	add	sp, #8
 8004d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004da0:	b004      	add	sp, #16
 8004da2:	4770      	bx	lr
 8004da4:	20000014 	.word	0x20000014

08004da8 <nanf>:
 8004da8:	4800      	ldr	r0, [pc, #0]	; (8004dac <nanf+0x4>)
 8004daa:	4770      	bx	lr
 8004dac:	7fc00000 	.word	0x7fc00000

08004db0 <siprintf>:
 8004db0:	b40e      	push	{r1, r2, r3}
 8004db2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004db6:	b500      	push	{lr}
 8004db8:	b09c      	sub	sp, #112	; 0x70
 8004dba:	ab1d      	add	r3, sp, #116	; 0x74
 8004dbc:	9002      	str	r0, [sp, #8]
 8004dbe:	9006      	str	r0, [sp, #24]
 8004dc0:	9107      	str	r1, [sp, #28]
 8004dc2:	9104      	str	r1, [sp, #16]
 8004dc4:	4808      	ldr	r0, [pc, #32]	; (8004de8 <siprintf+0x38>)
 8004dc6:	4909      	ldr	r1, [pc, #36]	; (8004dec <siprintf+0x3c>)
 8004dc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dcc:	9105      	str	r1, [sp, #20]
 8004dce:	6800      	ldr	r0, [r0, #0]
 8004dd0:	a902      	add	r1, sp, #8
 8004dd2:	9301      	str	r3, [sp, #4]
 8004dd4:	f002 fe50 	bl	8007a78 <_svfiprintf_r>
 8004dd8:	2200      	movs	r2, #0
 8004dda:	9b02      	ldr	r3, [sp, #8]
 8004ddc:	701a      	strb	r2, [r3, #0]
 8004dde:	b01c      	add	sp, #112	; 0x70
 8004de0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004de4:	b003      	add	sp, #12
 8004de6:	4770      	bx	lr
 8004de8:	20000014 	.word	0x20000014
 8004dec:	ffff0208 	.word	0xffff0208

08004df0 <sulp>:
 8004df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004df4:	460f      	mov	r7, r1
 8004df6:	4690      	mov	r8, r2
 8004df8:	f002 fc02 	bl	8007600 <__ulp>
 8004dfc:	4604      	mov	r4, r0
 8004dfe:	460d      	mov	r5, r1
 8004e00:	f1b8 0f00 	cmp.w	r8, #0
 8004e04:	d011      	beq.n	8004e2a <sulp+0x3a>
 8004e06:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004e0a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	dd0b      	ble.n	8004e2a <sulp+0x3a>
 8004e12:	2400      	movs	r4, #0
 8004e14:	051b      	lsls	r3, r3, #20
 8004e16:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004e1a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004e1e:	4622      	mov	r2, r4
 8004e20:	462b      	mov	r3, r5
 8004e22:	f7fb fb59 	bl	80004d8 <__aeabi_dmul>
 8004e26:	4604      	mov	r4, r0
 8004e28:	460d      	mov	r5, r1
 8004e2a:	4620      	mov	r0, r4
 8004e2c:	4629      	mov	r1, r5
 8004e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e32:	0000      	movs	r0, r0
 8004e34:	0000      	movs	r0, r0
	...

08004e38 <_strtod_l>:
 8004e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e3c:	461f      	mov	r7, r3
 8004e3e:	2300      	movs	r3, #0
 8004e40:	b0a1      	sub	sp, #132	; 0x84
 8004e42:	4683      	mov	fp, r0
 8004e44:	4638      	mov	r0, r7
 8004e46:	460e      	mov	r6, r1
 8004e48:	9217      	str	r2, [sp, #92]	; 0x5c
 8004e4a:	931c      	str	r3, [sp, #112]	; 0x70
 8004e4c:	f002 f8c9 	bl	8006fe2 <__localeconv_l>
 8004e50:	4680      	mov	r8, r0
 8004e52:	6800      	ldr	r0, [r0, #0]
 8004e54:	f7fb f97c 	bl	8000150 <strlen>
 8004e58:	f04f 0900 	mov.w	r9, #0
 8004e5c:	4604      	mov	r4, r0
 8004e5e:	f04f 0a00 	mov.w	sl, #0
 8004e62:	961b      	str	r6, [sp, #108]	; 0x6c
 8004e64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004e66:	781a      	ldrb	r2, [r3, #0]
 8004e68:	2a0d      	cmp	r2, #13
 8004e6a:	d832      	bhi.n	8004ed2 <_strtod_l+0x9a>
 8004e6c:	2a09      	cmp	r2, #9
 8004e6e:	d236      	bcs.n	8004ede <_strtod_l+0xa6>
 8004e70:	2a00      	cmp	r2, #0
 8004e72:	d03e      	beq.n	8004ef2 <_strtod_l+0xba>
 8004e74:	2300      	movs	r3, #0
 8004e76:	930d      	str	r3, [sp, #52]	; 0x34
 8004e78:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004e7a:	782b      	ldrb	r3, [r5, #0]
 8004e7c:	2b30      	cmp	r3, #48	; 0x30
 8004e7e:	f040 80ac 	bne.w	8004fda <_strtod_l+0x1a2>
 8004e82:	786b      	ldrb	r3, [r5, #1]
 8004e84:	2b58      	cmp	r3, #88	; 0x58
 8004e86:	d001      	beq.n	8004e8c <_strtod_l+0x54>
 8004e88:	2b78      	cmp	r3, #120	; 0x78
 8004e8a:	d167      	bne.n	8004f5c <_strtod_l+0x124>
 8004e8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e8e:	9702      	str	r7, [sp, #8]
 8004e90:	9301      	str	r3, [sp, #4]
 8004e92:	ab1c      	add	r3, sp, #112	; 0x70
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	4a89      	ldr	r2, [pc, #548]	; (80050bc <_strtod_l+0x284>)
 8004e98:	ab1d      	add	r3, sp, #116	; 0x74
 8004e9a:	a91b      	add	r1, sp, #108	; 0x6c
 8004e9c:	4658      	mov	r0, fp
 8004e9e:	f001 fdc5 	bl	8006a2c <__gethex>
 8004ea2:	f010 0407 	ands.w	r4, r0, #7
 8004ea6:	4606      	mov	r6, r0
 8004ea8:	d005      	beq.n	8004eb6 <_strtod_l+0x7e>
 8004eaa:	2c06      	cmp	r4, #6
 8004eac:	d12b      	bne.n	8004f06 <_strtod_l+0xce>
 8004eae:	2300      	movs	r3, #0
 8004eb0:	3501      	adds	r5, #1
 8004eb2:	951b      	str	r5, [sp, #108]	; 0x6c
 8004eb4:	930d      	str	r3, [sp, #52]	; 0x34
 8004eb6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f040 85a6 	bne.w	8005a0a <_strtod_l+0xbd2>
 8004ebe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ec0:	b1e3      	cbz	r3, 8004efc <_strtod_l+0xc4>
 8004ec2:	464a      	mov	r2, r9
 8004ec4:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8004ec8:	4610      	mov	r0, r2
 8004eca:	4619      	mov	r1, r3
 8004ecc:	b021      	add	sp, #132	; 0x84
 8004ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ed2:	2a2b      	cmp	r2, #43	; 0x2b
 8004ed4:	d015      	beq.n	8004f02 <_strtod_l+0xca>
 8004ed6:	2a2d      	cmp	r2, #45	; 0x2d
 8004ed8:	d004      	beq.n	8004ee4 <_strtod_l+0xac>
 8004eda:	2a20      	cmp	r2, #32
 8004edc:	d1ca      	bne.n	8004e74 <_strtod_l+0x3c>
 8004ede:	3301      	adds	r3, #1
 8004ee0:	931b      	str	r3, [sp, #108]	; 0x6c
 8004ee2:	e7bf      	b.n	8004e64 <_strtod_l+0x2c>
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	920d      	str	r2, [sp, #52]	; 0x34
 8004ee8:	1c5a      	adds	r2, r3, #1
 8004eea:	921b      	str	r2, [sp, #108]	; 0x6c
 8004eec:	785b      	ldrb	r3, [r3, #1]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1c2      	bne.n	8004e78 <_strtod_l+0x40>
 8004ef2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004ef4:	961b      	str	r6, [sp, #108]	; 0x6c
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f040 8585 	bne.w	8005a06 <_strtod_l+0xbce>
 8004efc:	464a      	mov	r2, r9
 8004efe:	4653      	mov	r3, sl
 8004f00:	e7e2      	b.n	8004ec8 <_strtod_l+0x90>
 8004f02:	2200      	movs	r2, #0
 8004f04:	e7ef      	b.n	8004ee6 <_strtod_l+0xae>
 8004f06:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004f08:	b13a      	cbz	r2, 8004f1a <_strtod_l+0xe2>
 8004f0a:	2135      	movs	r1, #53	; 0x35
 8004f0c:	a81e      	add	r0, sp, #120	; 0x78
 8004f0e:	f002 fc6a 	bl	80077e6 <__copybits>
 8004f12:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004f14:	4658      	mov	r0, fp
 8004f16:	f002 f8dc 	bl	80070d2 <_Bfree>
 8004f1a:	3c01      	subs	r4, #1
 8004f1c:	2c04      	cmp	r4, #4
 8004f1e:	d806      	bhi.n	8004f2e <_strtod_l+0xf6>
 8004f20:	e8df f004 	tbb	[pc, r4]
 8004f24:	1714030a 	.word	0x1714030a
 8004f28:	0a          	.byte	0x0a
 8004f29:	00          	.byte	0x00
 8004f2a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8004f2e:	0731      	lsls	r1, r6, #28
 8004f30:	d5c1      	bpl.n	8004eb6 <_strtod_l+0x7e>
 8004f32:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8004f36:	e7be      	b.n	8004eb6 <_strtod_l+0x7e>
 8004f38:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004f3a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8004f3e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004f42:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004f46:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8004f4a:	e7f0      	b.n	8004f2e <_strtod_l+0xf6>
 8004f4c:	f8df a170 	ldr.w	sl, [pc, #368]	; 80050c0 <_strtod_l+0x288>
 8004f50:	e7ed      	b.n	8004f2e <_strtod_l+0xf6>
 8004f52:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8004f56:	f04f 39ff 	mov.w	r9, #4294967295
 8004f5a:	e7e8      	b.n	8004f2e <_strtod_l+0xf6>
 8004f5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004f5e:	1c5a      	adds	r2, r3, #1
 8004f60:	921b      	str	r2, [sp, #108]	; 0x6c
 8004f62:	785b      	ldrb	r3, [r3, #1]
 8004f64:	2b30      	cmp	r3, #48	; 0x30
 8004f66:	d0f9      	beq.n	8004f5c <_strtod_l+0x124>
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d0a4      	beq.n	8004eb6 <_strtod_l+0x7e>
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	2500      	movs	r5, #0
 8004f70:	220a      	movs	r2, #10
 8004f72:	9307      	str	r3, [sp, #28]
 8004f74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004f76:	9506      	str	r5, [sp, #24]
 8004f78:	9308      	str	r3, [sp, #32]
 8004f7a:	9504      	str	r5, [sp, #16]
 8004f7c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8004f7e:	7807      	ldrb	r7, [r0, #0]
 8004f80:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8004f84:	b2d9      	uxtb	r1, r3
 8004f86:	2909      	cmp	r1, #9
 8004f88:	d929      	bls.n	8004fde <_strtod_l+0x1a6>
 8004f8a:	4622      	mov	r2, r4
 8004f8c:	f8d8 1000 	ldr.w	r1, [r8]
 8004f90:	f002 fffb 	bl	8007f8a <strncmp>
 8004f94:	2800      	cmp	r0, #0
 8004f96:	d031      	beq.n	8004ffc <_strtod_l+0x1c4>
 8004f98:	2000      	movs	r0, #0
 8004f9a:	463b      	mov	r3, r7
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	9c04      	ldr	r4, [sp, #16]
 8004fa0:	9005      	str	r0, [sp, #20]
 8004fa2:	2b65      	cmp	r3, #101	; 0x65
 8004fa4:	d001      	beq.n	8004faa <_strtod_l+0x172>
 8004fa6:	2b45      	cmp	r3, #69	; 0x45
 8004fa8:	d114      	bne.n	8004fd4 <_strtod_l+0x19c>
 8004faa:	b924      	cbnz	r4, 8004fb6 <_strtod_l+0x17e>
 8004fac:	b910      	cbnz	r0, 8004fb4 <_strtod_l+0x17c>
 8004fae:	9b07      	ldr	r3, [sp, #28]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d09e      	beq.n	8004ef2 <_strtod_l+0xba>
 8004fb4:	2400      	movs	r4, #0
 8004fb6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8004fb8:	1c73      	adds	r3, r6, #1
 8004fba:	931b      	str	r3, [sp, #108]	; 0x6c
 8004fbc:	7873      	ldrb	r3, [r6, #1]
 8004fbe:	2b2b      	cmp	r3, #43	; 0x2b
 8004fc0:	d078      	beq.n	80050b4 <_strtod_l+0x27c>
 8004fc2:	2b2d      	cmp	r3, #45	; 0x2d
 8004fc4:	d070      	beq.n	80050a8 <_strtod_l+0x270>
 8004fc6:	f04f 0c00 	mov.w	ip, #0
 8004fca:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8004fce:	2f09      	cmp	r7, #9
 8004fd0:	d97c      	bls.n	80050cc <_strtod_l+0x294>
 8004fd2:	961b      	str	r6, [sp, #108]	; 0x6c
 8004fd4:	f04f 0e00 	mov.w	lr, #0
 8004fd8:	e09a      	b.n	8005110 <_strtod_l+0x2d8>
 8004fda:	2300      	movs	r3, #0
 8004fdc:	e7c7      	b.n	8004f6e <_strtod_l+0x136>
 8004fde:	9904      	ldr	r1, [sp, #16]
 8004fe0:	3001      	adds	r0, #1
 8004fe2:	2908      	cmp	r1, #8
 8004fe4:	bfd7      	itett	le
 8004fe6:	9906      	ldrle	r1, [sp, #24]
 8004fe8:	fb02 3505 	mlagt	r5, r2, r5, r3
 8004fec:	fb02 3301 	mlale	r3, r2, r1, r3
 8004ff0:	9306      	strle	r3, [sp, #24]
 8004ff2:	9b04      	ldr	r3, [sp, #16]
 8004ff4:	901b      	str	r0, [sp, #108]	; 0x6c
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	9304      	str	r3, [sp, #16]
 8004ffa:	e7bf      	b.n	8004f7c <_strtod_l+0x144>
 8004ffc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004ffe:	191a      	adds	r2, r3, r4
 8005000:	921b      	str	r2, [sp, #108]	; 0x6c
 8005002:	9a04      	ldr	r2, [sp, #16]
 8005004:	5d1b      	ldrb	r3, [r3, r4]
 8005006:	2a00      	cmp	r2, #0
 8005008:	d037      	beq.n	800507a <_strtod_l+0x242>
 800500a:	4602      	mov	r2, r0
 800500c:	9c04      	ldr	r4, [sp, #16]
 800500e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005012:	2909      	cmp	r1, #9
 8005014:	d913      	bls.n	800503e <_strtod_l+0x206>
 8005016:	2101      	movs	r1, #1
 8005018:	9105      	str	r1, [sp, #20]
 800501a:	e7c2      	b.n	8004fa2 <_strtod_l+0x16a>
 800501c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800501e:	3001      	adds	r0, #1
 8005020:	1c5a      	adds	r2, r3, #1
 8005022:	921b      	str	r2, [sp, #108]	; 0x6c
 8005024:	785b      	ldrb	r3, [r3, #1]
 8005026:	2b30      	cmp	r3, #48	; 0x30
 8005028:	d0f8      	beq.n	800501c <_strtod_l+0x1e4>
 800502a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800502e:	2a08      	cmp	r2, #8
 8005030:	f200 84f0 	bhi.w	8005a14 <_strtod_l+0xbdc>
 8005034:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005036:	9208      	str	r2, [sp, #32]
 8005038:	4602      	mov	r2, r0
 800503a:	2000      	movs	r0, #0
 800503c:	4604      	mov	r4, r0
 800503e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8005042:	f100 0101 	add.w	r1, r0, #1
 8005046:	d012      	beq.n	800506e <_strtod_l+0x236>
 8005048:	440a      	add	r2, r1
 800504a:	270a      	movs	r7, #10
 800504c:	4621      	mov	r1, r4
 800504e:	eb00 0c04 	add.w	ip, r0, r4
 8005052:	458c      	cmp	ip, r1
 8005054:	d113      	bne.n	800507e <_strtod_l+0x246>
 8005056:	1821      	adds	r1, r4, r0
 8005058:	2908      	cmp	r1, #8
 800505a:	f104 0401 	add.w	r4, r4, #1
 800505e:	4404      	add	r4, r0
 8005060:	dc19      	bgt.n	8005096 <_strtod_l+0x25e>
 8005062:	210a      	movs	r1, #10
 8005064:	9b06      	ldr	r3, [sp, #24]
 8005066:	fb01 e303 	mla	r3, r1, r3, lr
 800506a:	9306      	str	r3, [sp, #24]
 800506c:	2100      	movs	r1, #0
 800506e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005070:	1c58      	adds	r0, r3, #1
 8005072:	901b      	str	r0, [sp, #108]	; 0x6c
 8005074:	785b      	ldrb	r3, [r3, #1]
 8005076:	4608      	mov	r0, r1
 8005078:	e7c9      	b.n	800500e <_strtod_l+0x1d6>
 800507a:	9804      	ldr	r0, [sp, #16]
 800507c:	e7d3      	b.n	8005026 <_strtod_l+0x1ee>
 800507e:	2908      	cmp	r1, #8
 8005080:	f101 0101 	add.w	r1, r1, #1
 8005084:	dc03      	bgt.n	800508e <_strtod_l+0x256>
 8005086:	9b06      	ldr	r3, [sp, #24]
 8005088:	437b      	muls	r3, r7
 800508a:	9306      	str	r3, [sp, #24]
 800508c:	e7e1      	b.n	8005052 <_strtod_l+0x21a>
 800508e:	2910      	cmp	r1, #16
 8005090:	bfd8      	it	le
 8005092:	437d      	mulle	r5, r7
 8005094:	e7dd      	b.n	8005052 <_strtod_l+0x21a>
 8005096:	2c10      	cmp	r4, #16
 8005098:	bfdc      	itt	le
 800509a:	210a      	movle	r1, #10
 800509c:	fb01 e505 	mlale	r5, r1, r5, lr
 80050a0:	e7e4      	b.n	800506c <_strtod_l+0x234>
 80050a2:	2301      	movs	r3, #1
 80050a4:	9305      	str	r3, [sp, #20]
 80050a6:	e781      	b.n	8004fac <_strtod_l+0x174>
 80050a8:	f04f 0c01 	mov.w	ip, #1
 80050ac:	1cb3      	adds	r3, r6, #2
 80050ae:	931b      	str	r3, [sp, #108]	; 0x6c
 80050b0:	78b3      	ldrb	r3, [r6, #2]
 80050b2:	e78a      	b.n	8004fca <_strtod_l+0x192>
 80050b4:	f04f 0c00 	mov.w	ip, #0
 80050b8:	e7f8      	b.n	80050ac <_strtod_l+0x274>
 80050ba:	bf00      	nop
 80050bc:	08008578 	.word	0x08008578
 80050c0:	7ff00000 	.word	0x7ff00000
 80050c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80050c6:	1c5f      	adds	r7, r3, #1
 80050c8:	971b      	str	r7, [sp, #108]	; 0x6c
 80050ca:	785b      	ldrb	r3, [r3, #1]
 80050cc:	2b30      	cmp	r3, #48	; 0x30
 80050ce:	d0f9      	beq.n	80050c4 <_strtod_l+0x28c>
 80050d0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80050d4:	2f08      	cmp	r7, #8
 80050d6:	f63f af7d 	bhi.w	8004fd4 <_strtod_l+0x19c>
 80050da:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80050de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80050e0:	9309      	str	r3, [sp, #36]	; 0x24
 80050e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80050e4:	1c5f      	adds	r7, r3, #1
 80050e6:	971b      	str	r7, [sp, #108]	; 0x6c
 80050e8:	785b      	ldrb	r3, [r3, #1]
 80050ea:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80050ee:	f1b8 0f09 	cmp.w	r8, #9
 80050f2:	d937      	bls.n	8005164 <_strtod_l+0x32c>
 80050f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050f6:	1a7f      	subs	r7, r7, r1
 80050f8:	2f08      	cmp	r7, #8
 80050fa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80050fe:	dc37      	bgt.n	8005170 <_strtod_l+0x338>
 8005100:	45be      	cmp	lr, r7
 8005102:	bfa8      	it	ge
 8005104:	46be      	movge	lr, r7
 8005106:	f1bc 0f00 	cmp.w	ip, #0
 800510a:	d001      	beq.n	8005110 <_strtod_l+0x2d8>
 800510c:	f1ce 0e00 	rsb	lr, lr, #0
 8005110:	2c00      	cmp	r4, #0
 8005112:	d151      	bne.n	80051b8 <_strtod_l+0x380>
 8005114:	2800      	cmp	r0, #0
 8005116:	f47f aece 	bne.w	8004eb6 <_strtod_l+0x7e>
 800511a:	9a07      	ldr	r2, [sp, #28]
 800511c:	2a00      	cmp	r2, #0
 800511e:	f47f aeca 	bne.w	8004eb6 <_strtod_l+0x7e>
 8005122:	9a05      	ldr	r2, [sp, #20]
 8005124:	2a00      	cmp	r2, #0
 8005126:	f47f aee4 	bne.w	8004ef2 <_strtod_l+0xba>
 800512a:	2b4e      	cmp	r3, #78	; 0x4e
 800512c:	d027      	beq.n	800517e <_strtod_l+0x346>
 800512e:	dc21      	bgt.n	8005174 <_strtod_l+0x33c>
 8005130:	2b49      	cmp	r3, #73	; 0x49
 8005132:	f47f aede 	bne.w	8004ef2 <_strtod_l+0xba>
 8005136:	49a4      	ldr	r1, [pc, #656]	; (80053c8 <_strtod_l+0x590>)
 8005138:	a81b      	add	r0, sp, #108	; 0x6c
 800513a:	f001 feab 	bl	8006e94 <__match>
 800513e:	2800      	cmp	r0, #0
 8005140:	f43f aed7 	beq.w	8004ef2 <_strtod_l+0xba>
 8005144:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005146:	49a1      	ldr	r1, [pc, #644]	; (80053cc <_strtod_l+0x594>)
 8005148:	3b01      	subs	r3, #1
 800514a:	a81b      	add	r0, sp, #108	; 0x6c
 800514c:	931b      	str	r3, [sp, #108]	; 0x6c
 800514e:	f001 fea1 	bl	8006e94 <__match>
 8005152:	b910      	cbnz	r0, 800515a <_strtod_l+0x322>
 8005154:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005156:	3301      	adds	r3, #1
 8005158:	931b      	str	r3, [sp, #108]	; 0x6c
 800515a:	f8df a284 	ldr.w	sl, [pc, #644]	; 80053e0 <_strtod_l+0x5a8>
 800515e:	f04f 0900 	mov.w	r9, #0
 8005162:	e6a8      	b.n	8004eb6 <_strtod_l+0x7e>
 8005164:	210a      	movs	r1, #10
 8005166:	fb01 3e0e 	mla	lr, r1, lr, r3
 800516a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800516e:	e7b8      	b.n	80050e2 <_strtod_l+0x2aa>
 8005170:	46be      	mov	lr, r7
 8005172:	e7c8      	b.n	8005106 <_strtod_l+0x2ce>
 8005174:	2b69      	cmp	r3, #105	; 0x69
 8005176:	d0de      	beq.n	8005136 <_strtod_l+0x2fe>
 8005178:	2b6e      	cmp	r3, #110	; 0x6e
 800517a:	f47f aeba 	bne.w	8004ef2 <_strtod_l+0xba>
 800517e:	4994      	ldr	r1, [pc, #592]	; (80053d0 <_strtod_l+0x598>)
 8005180:	a81b      	add	r0, sp, #108	; 0x6c
 8005182:	f001 fe87 	bl	8006e94 <__match>
 8005186:	2800      	cmp	r0, #0
 8005188:	f43f aeb3 	beq.w	8004ef2 <_strtod_l+0xba>
 800518c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	2b28      	cmp	r3, #40	; 0x28
 8005192:	d10e      	bne.n	80051b2 <_strtod_l+0x37a>
 8005194:	aa1e      	add	r2, sp, #120	; 0x78
 8005196:	498f      	ldr	r1, [pc, #572]	; (80053d4 <_strtod_l+0x59c>)
 8005198:	a81b      	add	r0, sp, #108	; 0x6c
 800519a:	f001 fe8f 	bl	8006ebc <__hexnan>
 800519e:	2805      	cmp	r0, #5
 80051a0:	d107      	bne.n	80051b2 <_strtod_l+0x37a>
 80051a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80051a4:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 80051a8:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 80051ac:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 80051b0:	e681      	b.n	8004eb6 <_strtod_l+0x7e>
 80051b2:	f8df a234 	ldr.w	sl, [pc, #564]	; 80053e8 <_strtod_l+0x5b0>
 80051b6:	e7d2      	b.n	800515e <_strtod_l+0x326>
 80051b8:	ebae 0302 	sub.w	r3, lr, r2
 80051bc:	9307      	str	r3, [sp, #28]
 80051be:	9b04      	ldr	r3, [sp, #16]
 80051c0:	9806      	ldr	r0, [sp, #24]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	bf08      	it	eq
 80051c6:	4623      	moveq	r3, r4
 80051c8:	2c10      	cmp	r4, #16
 80051ca:	9304      	str	r3, [sp, #16]
 80051cc:	46a0      	mov	r8, r4
 80051ce:	bfa8      	it	ge
 80051d0:	f04f 0810 	movge.w	r8, #16
 80051d4:	f7fb f906 	bl	80003e4 <__aeabi_ui2d>
 80051d8:	2c09      	cmp	r4, #9
 80051da:	4681      	mov	r9, r0
 80051dc:	468a      	mov	sl, r1
 80051de:	dc13      	bgt.n	8005208 <_strtod_l+0x3d0>
 80051e0:	9b07      	ldr	r3, [sp, #28]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f43f ae67 	beq.w	8004eb6 <_strtod_l+0x7e>
 80051e8:	9b07      	ldr	r3, [sp, #28]
 80051ea:	dd7e      	ble.n	80052ea <_strtod_l+0x4b2>
 80051ec:	2b16      	cmp	r3, #22
 80051ee:	dc65      	bgt.n	80052bc <_strtod_l+0x484>
 80051f0:	4a79      	ldr	r2, [pc, #484]	; (80053d8 <_strtod_l+0x5a0>)
 80051f2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80051f6:	464a      	mov	r2, r9
 80051f8:	e9de 0100 	ldrd	r0, r1, [lr]
 80051fc:	4653      	mov	r3, sl
 80051fe:	f7fb f96b 	bl	80004d8 <__aeabi_dmul>
 8005202:	4681      	mov	r9, r0
 8005204:	468a      	mov	sl, r1
 8005206:	e656      	b.n	8004eb6 <_strtod_l+0x7e>
 8005208:	4b73      	ldr	r3, [pc, #460]	; (80053d8 <_strtod_l+0x5a0>)
 800520a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800520e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005212:	f7fb f961 	bl	80004d8 <__aeabi_dmul>
 8005216:	4606      	mov	r6, r0
 8005218:	4628      	mov	r0, r5
 800521a:	460f      	mov	r7, r1
 800521c:	f7fb f8e2 	bl	80003e4 <__aeabi_ui2d>
 8005220:	4602      	mov	r2, r0
 8005222:	460b      	mov	r3, r1
 8005224:	4630      	mov	r0, r6
 8005226:	4639      	mov	r1, r7
 8005228:	f7fa ffa0 	bl	800016c <__adddf3>
 800522c:	2c0f      	cmp	r4, #15
 800522e:	4681      	mov	r9, r0
 8005230:	468a      	mov	sl, r1
 8005232:	ddd5      	ble.n	80051e0 <_strtod_l+0x3a8>
 8005234:	9b07      	ldr	r3, [sp, #28]
 8005236:	eba4 0808 	sub.w	r8, r4, r8
 800523a:	4498      	add	r8, r3
 800523c:	f1b8 0f00 	cmp.w	r8, #0
 8005240:	f340 809a 	ble.w	8005378 <_strtod_l+0x540>
 8005244:	f018 030f 	ands.w	r3, r8, #15
 8005248:	d00a      	beq.n	8005260 <_strtod_l+0x428>
 800524a:	4963      	ldr	r1, [pc, #396]	; (80053d8 <_strtod_l+0x5a0>)
 800524c:	464a      	mov	r2, r9
 800524e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005252:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005256:	4653      	mov	r3, sl
 8005258:	f7fb f93e 	bl	80004d8 <__aeabi_dmul>
 800525c:	4681      	mov	r9, r0
 800525e:	468a      	mov	sl, r1
 8005260:	f038 080f 	bics.w	r8, r8, #15
 8005264:	d077      	beq.n	8005356 <_strtod_l+0x51e>
 8005266:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800526a:	dd4b      	ble.n	8005304 <_strtod_l+0x4cc>
 800526c:	f04f 0800 	mov.w	r8, #0
 8005270:	f8cd 8010 	str.w	r8, [sp, #16]
 8005274:	f8cd 8020 	str.w	r8, [sp, #32]
 8005278:	f8cd 8018 	str.w	r8, [sp, #24]
 800527c:	2322      	movs	r3, #34	; 0x22
 800527e:	f04f 0900 	mov.w	r9, #0
 8005282:	f8df a15c 	ldr.w	sl, [pc, #348]	; 80053e0 <_strtod_l+0x5a8>
 8005286:	f8cb 3000 	str.w	r3, [fp]
 800528a:	9b08      	ldr	r3, [sp, #32]
 800528c:	2b00      	cmp	r3, #0
 800528e:	f43f ae12 	beq.w	8004eb6 <_strtod_l+0x7e>
 8005292:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005294:	4658      	mov	r0, fp
 8005296:	f001 ff1c 	bl	80070d2 <_Bfree>
 800529a:	9906      	ldr	r1, [sp, #24]
 800529c:	4658      	mov	r0, fp
 800529e:	f001 ff18 	bl	80070d2 <_Bfree>
 80052a2:	9904      	ldr	r1, [sp, #16]
 80052a4:	4658      	mov	r0, fp
 80052a6:	f001 ff14 	bl	80070d2 <_Bfree>
 80052aa:	9908      	ldr	r1, [sp, #32]
 80052ac:	4658      	mov	r0, fp
 80052ae:	f001 ff10 	bl	80070d2 <_Bfree>
 80052b2:	4641      	mov	r1, r8
 80052b4:	4658      	mov	r0, fp
 80052b6:	f001 ff0c 	bl	80070d2 <_Bfree>
 80052ba:	e5fc      	b.n	8004eb6 <_strtod_l+0x7e>
 80052bc:	9a07      	ldr	r2, [sp, #28]
 80052be:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80052c2:	4293      	cmp	r3, r2
 80052c4:	dbb6      	blt.n	8005234 <_strtod_l+0x3fc>
 80052c6:	4d44      	ldr	r5, [pc, #272]	; (80053d8 <_strtod_l+0x5a0>)
 80052c8:	f1c4 040f 	rsb	r4, r4, #15
 80052cc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80052d0:	464a      	mov	r2, r9
 80052d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052d6:	4653      	mov	r3, sl
 80052d8:	f7fb f8fe 	bl	80004d8 <__aeabi_dmul>
 80052dc:	9b07      	ldr	r3, [sp, #28]
 80052de:	1b1c      	subs	r4, r3, r4
 80052e0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80052e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80052e8:	e789      	b.n	80051fe <_strtod_l+0x3c6>
 80052ea:	f113 0f16 	cmn.w	r3, #22
 80052ee:	dba1      	blt.n	8005234 <_strtod_l+0x3fc>
 80052f0:	4a39      	ldr	r2, [pc, #228]	; (80053d8 <_strtod_l+0x5a0>)
 80052f2:	4648      	mov	r0, r9
 80052f4:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80052f8:	e9d2 2300 	ldrd	r2, r3, [r2]
 80052fc:	4651      	mov	r1, sl
 80052fe:	f7fb fa15 	bl	800072c <__aeabi_ddiv>
 8005302:	e77e      	b.n	8005202 <_strtod_l+0x3ca>
 8005304:	2300      	movs	r3, #0
 8005306:	4648      	mov	r0, r9
 8005308:	4651      	mov	r1, sl
 800530a:	461d      	mov	r5, r3
 800530c:	4e33      	ldr	r6, [pc, #204]	; (80053dc <_strtod_l+0x5a4>)
 800530e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005312:	f1b8 0f01 	cmp.w	r8, #1
 8005316:	dc21      	bgt.n	800535c <_strtod_l+0x524>
 8005318:	b10b      	cbz	r3, 800531e <_strtod_l+0x4e6>
 800531a:	4681      	mov	r9, r0
 800531c:	468a      	mov	sl, r1
 800531e:	4b2f      	ldr	r3, [pc, #188]	; (80053dc <_strtod_l+0x5a4>)
 8005320:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8005324:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005328:	464a      	mov	r2, r9
 800532a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800532e:	4653      	mov	r3, sl
 8005330:	f7fb f8d2 	bl	80004d8 <__aeabi_dmul>
 8005334:	4b2a      	ldr	r3, [pc, #168]	; (80053e0 <_strtod_l+0x5a8>)
 8005336:	460a      	mov	r2, r1
 8005338:	400b      	ands	r3, r1
 800533a:	492a      	ldr	r1, [pc, #168]	; (80053e4 <_strtod_l+0x5ac>)
 800533c:	4681      	mov	r9, r0
 800533e:	428b      	cmp	r3, r1
 8005340:	d894      	bhi.n	800526c <_strtod_l+0x434>
 8005342:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005346:	428b      	cmp	r3, r1
 8005348:	bf86      	itte	hi
 800534a:	f04f 39ff 	movhi.w	r9, #4294967295
 800534e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 80053ec <_strtod_l+0x5b4>
 8005352:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8005356:	2300      	movs	r3, #0
 8005358:	9305      	str	r3, [sp, #20]
 800535a:	e07b      	b.n	8005454 <_strtod_l+0x61c>
 800535c:	f018 0f01 	tst.w	r8, #1
 8005360:	d006      	beq.n	8005370 <_strtod_l+0x538>
 8005362:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8005366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536a:	f7fb f8b5 	bl	80004d8 <__aeabi_dmul>
 800536e:	2301      	movs	r3, #1
 8005370:	3501      	adds	r5, #1
 8005372:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005376:	e7cc      	b.n	8005312 <_strtod_l+0x4da>
 8005378:	d0ed      	beq.n	8005356 <_strtod_l+0x51e>
 800537a:	f1c8 0800 	rsb	r8, r8, #0
 800537e:	f018 020f 	ands.w	r2, r8, #15
 8005382:	d00a      	beq.n	800539a <_strtod_l+0x562>
 8005384:	4b14      	ldr	r3, [pc, #80]	; (80053d8 <_strtod_l+0x5a0>)
 8005386:	4648      	mov	r0, r9
 8005388:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800538c:	4651      	mov	r1, sl
 800538e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005392:	f7fb f9cb 	bl	800072c <__aeabi_ddiv>
 8005396:	4681      	mov	r9, r0
 8005398:	468a      	mov	sl, r1
 800539a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800539e:	d0da      	beq.n	8005356 <_strtod_l+0x51e>
 80053a0:	f1b8 0f1f 	cmp.w	r8, #31
 80053a4:	dd24      	ble.n	80053f0 <_strtod_l+0x5b8>
 80053a6:	f04f 0800 	mov.w	r8, #0
 80053aa:	f8cd 8010 	str.w	r8, [sp, #16]
 80053ae:	f8cd 8020 	str.w	r8, [sp, #32]
 80053b2:	f8cd 8018 	str.w	r8, [sp, #24]
 80053b6:	2322      	movs	r3, #34	; 0x22
 80053b8:	f04f 0900 	mov.w	r9, #0
 80053bc:	f04f 0a00 	mov.w	sl, #0
 80053c0:	f8cb 3000 	str.w	r3, [fp]
 80053c4:	e761      	b.n	800528a <_strtod_l+0x452>
 80053c6:	bf00      	nop
 80053c8:	08008541 	.word	0x08008541
 80053cc:	080085cb 	.word	0x080085cb
 80053d0:	08008549 	.word	0x08008549
 80053d4:	0800858c 	.word	0x0800858c
 80053d8:	08008670 	.word	0x08008670
 80053dc:	08008648 	.word	0x08008648
 80053e0:	7ff00000 	.word	0x7ff00000
 80053e4:	7ca00000 	.word	0x7ca00000
 80053e8:	fff80000 	.word	0xfff80000
 80053ec:	7fefffff 	.word	0x7fefffff
 80053f0:	f018 0310 	ands.w	r3, r8, #16
 80053f4:	bf18      	it	ne
 80053f6:	236a      	movne	r3, #106	; 0x6a
 80053f8:	4648      	mov	r0, r9
 80053fa:	9305      	str	r3, [sp, #20]
 80053fc:	4651      	mov	r1, sl
 80053fe:	2300      	movs	r3, #0
 8005400:	4da1      	ldr	r5, [pc, #644]	; (8005688 <_strtod_l+0x850>)
 8005402:	f1b8 0f00 	cmp.w	r8, #0
 8005406:	f300 8113 	bgt.w	8005630 <_strtod_l+0x7f8>
 800540a:	b10b      	cbz	r3, 8005410 <_strtod_l+0x5d8>
 800540c:	4681      	mov	r9, r0
 800540e:	468a      	mov	sl, r1
 8005410:	9b05      	ldr	r3, [sp, #20]
 8005412:	b1bb      	cbz	r3, 8005444 <_strtod_l+0x60c>
 8005414:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8005418:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800541c:	2b00      	cmp	r3, #0
 800541e:	4651      	mov	r1, sl
 8005420:	dd10      	ble.n	8005444 <_strtod_l+0x60c>
 8005422:	2b1f      	cmp	r3, #31
 8005424:	f340 8110 	ble.w	8005648 <_strtod_l+0x810>
 8005428:	2b34      	cmp	r3, #52	; 0x34
 800542a:	bfd8      	it	le
 800542c:	f04f 32ff 	movle.w	r2, #4294967295
 8005430:	f04f 0900 	mov.w	r9, #0
 8005434:	bfcf      	iteee	gt
 8005436:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800543a:	3b20      	suble	r3, #32
 800543c:	fa02 f303 	lslle.w	r3, r2, r3
 8005440:	ea03 0a01 	andle.w	sl, r3, r1
 8005444:	2200      	movs	r2, #0
 8005446:	2300      	movs	r3, #0
 8005448:	4648      	mov	r0, r9
 800544a:	4651      	mov	r1, sl
 800544c:	f7fb faac 	bl	80009a8 <__aeabi_dcmpeq>
 8005450:	2800      	cmp	r0, #0
 8005452:	d1a8      	bne.n	80053a6 <_strtod_l+0x56e>
 8005454:	9b06      	ldr	r3, [sp, #24]
 8005456:	9a04      	ldr	r2, [sp, #16]
 8005458:	9300      	str	r3, [sp, #0]
 800545a:	9908      	ldr	r1, [sp, #32]
 800545c:	4623      	mov	r3, r4
 800545e:	4658      	mov	r0, fp
 8005460:	f001 fe89 	bl	8007176 <__s2b>
 8005464:	9008      	str	r0, [sp, #32]
 8005466:	2800      	cmp	r0, #0
 8005468:	f43f af00 	beq.w	800526c <_strtod_l+0x434>
 800546c:	9a07      	ldr	r2, [sp, #28]
 800546e:	9b07      	ldr	r3, [sp, #28]
 8005470:	2a00      	cmp	r2, #0
 8005472:	f1c3 0300 	rsb	r3, r3, #0
 8005476:	bfa8      	it	ge
 8005478:	2300      	movge	r3, #0
 800547a:	f04f 0800 	mov.w	r8, #0
 800547e:	930e      	str	r3, [sp, #56]	; 0x38
 8005480:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005484:	9316      	str	r3, [sp, #88]	; 0x58
 8005486:	f8cd 8010 	str.w	r8, [sp, #16]
 800548a:	9b08      	ldr	r3, [sp, #32]
 800548c:	4658      	mov	r0, fp
 800548e:	6859      	ldr	r1, [r3, #4]
 8005490:	f001 fdeb 	bl	800706a <_Balloc>
 8005494:	9006      	str	r0, [sp, #24]
 8005496:	2800      	cmp	r0, #0
 8005498:	f43f aef0 	beq.w	800527c <_strtod_l+0x444>
 800549c:	9b08      	ldr	r3, [sp, #32]
 800549e:	300c      	adds	r0, #12
 80054a0:	691a      	ldr	r2, [r3, #16]
 80054a2:	f103 010c 	add.w	r1, r3, #12
 80054a6:	3202      	adds	r2, #2
 80054a8:	0092      	lsls	r2, r2, #2
 80054aa:	f001 fdd3 	bl	8007054 <memcpy>
 80054ae:	ab1e      	add	r3, sp, #120	; 0x78
 80054b0:	9301      	str	r3, [sp, #4]
 80054b2:	ab1d      	add	r3, sp, #116	; 0x74
 80054b4:	9300      	str	r3, [sp, #0]
 80054b6:	464a      	mov	r2, r9
 80054b8:	4653      	mov	r3, sl
 80054ba:	4658      	mov	r0, fp
 80054bc:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 80054c0:	f002 f914 	bl	80076ec <__d2b>
 80054c4:	901c      	str	r0, [sp, #112]	; 0x70
 80054c6:	2800      	cmp	r0, #0
 80054c8:	f43f aed8 	beq.w	800527c <_strtod_l+0x444>
 80054cc:	2101      	movs	r1, #1
 80054ce:	4658      	mov	r0, fp
 80054d0:	f001 fedd 	bl	800728e <__i2b>
 80054d4:	9004      	str	r0, [sp, #16]
 80054d6:	4603      	mov	r3, r0
 80054d8:	2800      	cmp	r0, #0
 80054da:	f43f aecf 	beq.w	800527c <_strtod_l+0x444>
 80054de:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80054e0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80054e2:	2d00      	cmp	r5, #0
 80054e4:	bfab      	itete	ge
 80054e6:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80054e8:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80054ea:	18ee      	addge	r6, r5, r3
 80054ec:	1b5c      	sublt	r4, r3, r5
 80054ee:	9b05      	ldr	r3, [sp, #20]
 80054f0:	bfa8      	it	ge
 80054f2:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80054f4:	eba5 0503 	sub.w	r5, r5, r3
 80054f8:	4415      	add	r5, r2
 80054fa:	4b64      	ldr	r3, [pc, #400]	; (800568c <_strtod_l+0x854>)
 80054fc:	f105 35ff 	add.w	r5, r5, #4294967295
 8005500:	bfb8      	it	lt
 8005502:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005504:	429d      	cmp	r5, r3
 8005506:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800550a:	f280 80af 	bge.w	800566c <_strtod_l+0x834>
 800550e:	1b5b      	subs	r3, r3, r5
 8005510:	2b1f      	cmp	r3, #31
 8005512:	eba2 0203 	sub.w	r2, r2, r3
 8005516:	f04f 0701 	mov.w	r7, #1
 800551a:	f300 809c 	bgt.w	8005656 <_strtod_l+0x81e>
 800551e:	2500      	movs	r5, #0
 8005520:	fa07 f303 	lsl.w	r3, r7, r3
 8005524:	930f      	str	r3, [sp, #60]	; 0x3c
 8005526:	18b7      	adds	r7, r6, r2
 8005528:	9b05      	ldr	r3, [sp, #20]
 800552a:	42be      	cmp	r6, r7
 800552c:	4414      	add	r4, r2
 800552e:	441c      	add	r4, r3
 8005530:	4633      	mov	r3, r6
 8005532:	bfa8      	it	ge
 8005534:	463b      	movge	r3, r7
 8005536:	42a3      	cmp	r3, r4
 8005538:	bfa8      	it	ge
 800553a:	4623      	movge	r3, r4
 800553c:	2b00      	cmp	r3, #0
 800553e:	bfc2      	ittt	gt
 8005540:	1aff      	subgt	r7, r7, r3
 8005542:	1ae4      	subgt	r4, r4, r3
 8005544:	1af6      	subgt	r6, r6, r3
 8005546:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005548:	b1bb      	cbz	r3, 800557a <_strtod_l+0x742>
 800554a:	461a      	mov	r2, r3
 800554c:	9904      	ldr	r1, [sp, #16]
 800554e:	4658      	mov	r0, fp
 8005550:	f001 ff3c 	bl	80073cc <__pow5mult>
 8005554:	9004      	str	r0, [sp, #16]
 8005556:	2800      	cmp	r0, #0
 8005558:	f43f ae90 	beq.w	800527c <_strtod_l+0x444>
 800555c:	4601      	mov	r1, r0
 800555e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005560:	4658      	mov	r0, fp
 8005562:	f001 fe9d 	bl	80072a0 <__multiply>
 8005566:	9009      	str	r0, [sp, #36]	; 0x24
 8005568:	2800      	cmp	r0, #0
 800556a:	f43f ae87 	beq.w	800527c <_strtod_l+0x444>
 800556e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005570:	4658      	mov	r0, fp
 8005572:	f001 fdae 	bl	80070d2 <_Bfree>
 8005576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005578:	931c      	str	r3, [sp, #112]	; 0x70
 800557a:	2f00      	cmp	r7, #0
 800557c:	dc7a      	bgt.n	8005674 <_strtod_l+0x83c>
 800557e:	9b07      	ldr	r3, [sp, #28]
 8005580:	2b00      	cmp	r3, #0
 8005582:	dd08      	ble.n	8005596 <_strtod_l+0x75e>
 8005584:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005586:	9906      	ldr	r1, [sp, #24]
 8005588:	4658      	mov	r0, fp
 800558a:	f001 ff1f 	bl	80073cc <__pow5mult>
 800558e:	9006      	str	r0, [sp, #24]
 8005590:	2800      	cmp	r0, #0
 8005592:	f43f ae73 	beq.w	800527c <_strtod_l+0x444>
 8005596:	2c00      	cmp	r4, #0
 8005598:	dd08      	ble.n	80055ac <_strtod_l+0x774>
 800559a:	4622      	mov	r2, r4
 800559c:	9906      	ldr	r1, [sp, #24]
 800559e:	4658      	mov	r0, fp
 80055a0:	f001 ff62 	bl	8007468 <__lshift>
 80055a4:	9006      	str	r0, [sp, #24]
 80055a6:	2800      	cmp	r0, #0
 80055a8:	f43f ae68 	beq.w	800527c <_strtod_l+0x444>
 80055ac:	2e00      	cmp	r6, #0
 80055ae:	dd08      	ble.n	80055c2 <_strtod_l+0x78a>
 80055b0:	4632      	mov	r2, r6
 80055b2:	9904      	ldr	r1, [sp, #16]
 80055b4:	4658      	mov	r0, fp
 80055b6:	f001 ff57 	bl	8007468 <__lshift>
 80055ba:	9004      	str	r0, [sp, #16]
 80055bc:	2800      	cmp	r0, #0
 80055be:	f43f ae5d 	beq.w	800527c <_strtod_l+0x444>
 80055c2:	9a06      	ldr	r2, [sp, #24]
 80055c4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80055c6:	4658      	mov	r0, fp
 80055c8:	f001 ffbc 	bl	8007544 <__mdiff>
 80055cc:	4680      	mov	r8, r0
 80055ce:	2800      	cmp	r0, #0
 80055d0:	f43f ae54 	beq.w	800527c <_strtod_l+0x444>
 80055d4:	2400      	movs	r4, #0
 80055d6:	68c3      	ldr	r3, [r0, #12]
 80055d8:	9904      	ldr	r1, [sp, #16]
 80055da:	60c4      	str	r4, [r0, #12]
 80055dc:	930c      	str	r3, [sp, #48]	; 0x30
 80055de:	f001 ff97 	bl	8007510 <__mcmp>
 80055e2:	42a0      	cmp	r0, r4
 80055e4:	da54      	bge.n	8005690 <_strtod_l+0x858>
 80055e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80055e8:	b9f3      	cbnz	r3, 8005628 <_strtod_l+0x7f0>
 80055ea:	f1b9 0f00 	cmp.w	r9, #0
 80055ee:	d11b      	bne.n	8005628 <_strtod_l+0x7f0>
 80055f0:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80055f4:	b9c3      	cbnz	r3, 8005628 <_strtod_l+0x7f0>
 80055f6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80055fa:	0d1b      	lsrs	r3, r3, #20
 80055fc:	051b      	lsls	r3, r3, #20
 80055fe:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005602:	d911      	bls.n	8005628 <_strtod_l+0x7f0>
 8005604:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005608:	b91b      	cbnz	r3, 8005612 <_strtod_l+0x7da>
 800560a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800560e:	2b01      	cmp	r3, #1
 8005610:	dd0a      	ble.n	8005628 <_strtod_l+0x7f0>
 8005612:	4641      	mov	r1, r8
 8005614:	2201      	movs	r2, #1
 8005616:	4658      	mov	r0, fp
 8005618:	f001 ff26 	bl	8007468 <__lshift>
 800561c:	9904      	ldr	r1, [sp, #16]
 800561e:	4680      	mov	r8, r0
 8005620:	f001 ff76 	bl	8007510 <__mcmp>
 8005624:	2800      	cmp	r0, #0
 8005626:	dc68      	bgt.n	80056fa <_strtod_l+0x8c2>
 8005628:	9b05      	ldr	r3, [sp, #20]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d172      	bne.n	8005714 <_strtod_l+0x8dc>
 800562e:	e630      	b.n	8005292 <_strtod_l+0x45a>
 8005630:	f018 0f01 	tst.w	r8, #1
 8005634:	d004      	beq.n	8005640 <_strtod_l+0x808>
 8005636:	e9d5 2300 	ldrd	r2, r3, [r5]
 800563a:	f7fa ff4d 	bl	80004d8 <__aeabi_dmul>
 800563e:	2301      	movs	r3, #1
 8005640:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005644:	3508      	adds	r5, #8
 8005646:	e6dc      	b.n	8005402 <_strtod_l+0x5ca>
 8005648:	f04f 32ff 	mov.w	r2, #4294967295
 800564c:	fa02 f303 	lsl.w	r3, r2, r3
 8005650:	ea03 0909 	and.w	r9, r3, r9
 8005654:	e6f6      	b.n	8005444 <_strtod_l+0x60c>
 8005656:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800565a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800565e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8005662:	35e2      	adds	r5, #226	; 0xe2
 8005664:	fa07 f505 	lsl.w	r5, r7, r5
 8005668:	970f      	str	r7, [sp, #60]	; 0x3c
 800566a:	e75c      	b.n	8005526 <_strtod_l+0x6ee>
 800566c:	2301      	movs	r3, #1
 800566e:	2500      	movs	r5, #0
 8005670:	930f      	str	r3, [sp, #60]	; 0x3c
 8005672:	e758      	b.n	8005526 <_strtod_l+0x6ee>
 8005674:	463a      	mov	r2, r7
 8005676:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005678:	4658      	mov	r0, fp
 800567a:	f001 fef5 	bl	8007468 <__lshift>
 800567e:	901c      	str	r0, [sp, #112]	; 0x70
 8005680:	2800      	cmp	r0, #0
 8005682:	f47f af7c 	bne.w	800557e <_strtod_l+0x746>
 8005686:	e5f9      	b.n	800527c <_strtod_l+0x444>
 8005688:	080085a0 	.word	0x080085a0
 800568c:	fffffc02 	.word	0xfffffc02
 8005690:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005694:	f040 8089 	bne.w	80057aa <_strtod_l+0x972>
 8005698:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800569a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800569e:	b342      	cbz	r2, 80056f2 <_strtod_l+0x8ba>
 80056a0:	4aaf      	ldr	r2, [pc, #700]	; (8005960 <_strtod_l+0xb28>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d156      	bne.n	8005754 <_strtod_l+0x91c>
 80056a6:	9b05      	ldr	r3, [sp, #20]
 80056a8:	4648      	mov	r0, r9
 80056aa:	b1eb      	cbz	r3, 80056e8 <_strtod_l+0x8b0>
 80056ac:	4653      	mov	r3, sl
 80056ae:	4aad      	ldr	r2, [pc, #692]	; (8005964 <_strtod_l+0xb2c>)
 80056b0:	f04f 31ff 	mov.w	r1, #4294967295
 80056b4:	401a      	ands	r2, r3
 80056b6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80056ba:	d818      	bhi.n	80056ee <_strtod_l+0x8b6>
 80056bc:	0d12      	lsrs	r2, r2, #20
 80056be:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80056c2:	fa01 f303 	lsl.w	r3, r1, r3
 80056c6:	4298      	cmp	r0, r3
 80056c8:	d144      	bne.n	8005754 <_strtod_l+0x91c>
 80056ca:	4ba7      	ldr	r3, [pc, #668]	; (8005968 <_strtod_l+0xb30>)
 80056cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d102      	bne.n	80056d8 <_strtod_l+0x8a0>
 80056d2:	3001      	adds	r0, #1
 80056d4:	f43f add2 	beq.w	800527c <_strtod_l+0x444>
 80056d8:	4ba2      	ldr	r3, [pc, #648]	; (8005964 <_strtod_l+0xb2c>)
 80056da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056dc:	f04f 0900 	mov.w	r9, #0
 80056e0:	401a      	ands	r2, r3
 80056e2:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 80056e6:	e79f      	b.n	8005628 <_strtod_l+0x7f0>
 80056e8:	f04f 33ff 	mov.w	r3, #4294967295
 80056ec:	e7eb      	b.n	80056c6 <_strtod_l+0x88e>
 80056ee:	460b      	mov	r3, r1
 80056f0:	e7e9      	b.n	80056c6 <_strtod_l+0x88e>
 80056f2:	bb7b      	cbnz	r3, 8005754 <_strtod_l+0x91c>
 80056f4:	f1b9 0f00 	cmp.w	r9, #0
 80056f8:	d12c      	bne.n	8005754 <_strtod_l+0x91c>
 80056fa:	9905      	ldr	r1, [sp, #20]
 80056fc:	4653      	mov	r3, sl
 80056fe:	4a99      	ldr	r2, [pc, #612]	; (8005964 <_strtod_l+0xb2c>)
 8005700:	b1f1      	cbz	r1, 8005740 <_strtod_l+0x908>
 8005702:	ea02 010a 	and.w	r1, r2, sl
 8005706:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800570a:	dc19      	bgt.n	8005740 <_strtod_l+0x908>
 800570c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005710:	f77f ae51 	ble.w	80053b6 <_strtod_l+0x57e>
 8005714:	2300      	movs	r3, #0
 8005716:	4a95      	ldr	r2, [pc, #596]	; (800596c <_strtod_l+0xb34>)
 8005718:	4648      	mov	r0, r9
 800571a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800571e:	4651      	mov	r1, sl
 8005720:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005724:	f7fa fed8 	bl	80004d8 <__aeabi_dmul>
 8005728:	4681      	mov	r9, r0
 800572a:	468a      	mov	sl, r1
 800572c:	2900      	cmp	r1, #0
 800572e:	f47f adb0 	bne.w	8005292 <_strtod_l+0x45a>
 8005732:	2800      	cmp	r0, #0
 8005734:	f47f adad 	bne.w	8005292 <_strtod_l+0x45a>
 8005738:	2322      	movs	r3, #34	; 0x22
 800573a:	f8cb 3000 	str.w	r3, [fp]
 800573e:	e5a8      	b.n	8005292 <_strtod_l+0x45a>
 8005740:	4013      	ands	r3, r2
 8005742:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005746:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800574a:	f04f 39ff 	mov.w	r9, #4294967295
 800574e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8005752:	e769      	b.n	8005628 <_strtod_l+0x7f0>
 8005754:	b19d      	cbz	r5, 800577e <_strtod_l+0x946>
 8005756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005758:	421d      	tst	r5, r3
 800575a:	f43f af65 	beq.w	8005628 <_strtod_l+0x7f0>
 800575e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005760:	9a05      	ldr	r2, [sp, #20]
 8005762:	4648      	mov	r0, r9
 8005764:	4651      	mov	r1, sl
 8005766:	b173      	cbz	r3, 8005786 <_strtod_l+0x94e>
 8005768:	f7ff fb42 	bl	8004df0 <sulp>
 800576c:	4602      	mov	r2, r0
 800576e:	460b      	mov	r3, r1
 8005770:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005774:	f7fa fcfa 	bl	800016c <__adddf3>
 8005778:	4681      	mov	r9, r0
 800577a:	468a      	mov	sl, r1
 800577c:	e754      	b.n	8005628 <_strtod_l+0x7f0>
 800577e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005780:	ea13 0f09 	tst.w	r3, r9
 8005784:	e7e9      	b.n	800575a <_strtod_l+0x922>
 8005786:	f7ff fb33 	bl	8004df0 <sulp>
 800578a:	4602      	mov	r2, r0
 800578c:	460b      	mov	r3, r1
 800578e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005792:	f7fa fce9 	bl	8000168 <__aeabi_dsub>
 8005796:	2200      	movs	r2, #0
 8005798:	2300      	movs	r3, #0
 800579a:	4681      	mov	r9, r0
 800579c:	468a      	mov	sl, r1
 800579e:	f7fb f903 	bl	80009a8 <__aeabi_dcmpeq>
 80057a2:	2800      	cmp	r0, #0
 80057a4:	f47f ae07 	bne.w	80053b6 <_strtod_l+0x57e>
 80057a8:	e73e      	b.n	8005628 <_strtod_l+0x7f0>
 80057aa:	9904      	ldr	r1, [sp, #16]
 80057ac:	4640      	mov	r0, r8
 80057ae:	f001 ffec 	bl	800778a <__ratio>
 80057b2:	2200      	movs	r2, #0
 80057b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80057b8:	4606      	mov	r6, r0
 80057ba:	460f      	mov	r7, r1
 80057bc:	f7fb f908 	bl	80009d0 <__aeabi_dcmple>
 80057c0:	2800      	cmp	r0, #0
 80057c2:	d075      	beq.n	80058b0 <_strtod_l+0xa78>
 80057c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d047      	beq.n	800585a <_strtod_l+0xa22>
 80057ca:	2600      	movs	r6, #0
 80057cc:	4f68      	ldr	r7, [pc, #416]	; (8005970 <_strtod_l+0xb38>)
 80057ce:	4d68      	ldr	r5, [pc, #416]	; (8005970 <_strtod_l+0xb38>)
 80057d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80057d6:	0d1b      	lsrs	r3, r3, #20
 80057d8:	051b      	lsls	r3, r3, #20
 80057da:	930f      	str	r3, [sp, #60]	; 0x3c
 80057dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80057de:	4b65      	ldr	r3, [pc, #404]	; (8005974 <_strtod_l+0xb3c>)
 80057e0:	429a      	cmp	r2, r3
 80057e2:	f040 80cf 	bne.w	8005984 <_strtod_l+0xb4c>
 80057e6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80057ea:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80057ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057f0:	4648      	mov	r0, r9
 80057f2:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 80057f6:	4651      	mov	r1, sl
 80057f8:	f001 ff02 	bl	8007600 <__ulp>
 80057fc:	4602      	mov	r2, r0
 80057fe:	460b      	mov	r3, r1
 8005800:	4630      	mov	r0, r6
 8005802:	4639      	mov	r1, r7
 8005804:	f7fa fe68 	bl	80004d8 <__aeabi_dmul>
 8005808:	464a      	mov	r2, r9
 800580a:	4653      	mov	r3, sl
 800580c:	f7fa fcae 	bl	800016c <__adddf3>
 8005810:	460b      	mov	r3, r1
 8005812:	4954      	ldr	r1, [pc, #336]	; (8005964 <_strtod_l+0xb2c>)
 8005814:	4a58      	ldr	r2, [pc, #352]	; (8005978 <_strtod_l+0xb40>)
 8005816:	4019      	ands	r1, r3
 8005818:	4291      	cmp	r1, r2
 800581a:	4681      	mov	r9, r0
 800581c:	d95e      	bls.n	80058dc <_strtod_l+0xaa4>
 800581e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005820:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005824:	4293      	cmp	r3, r2
 8005826:	d103      	bne.n	8005830 <_strtod_l+0x9f8>
 8005828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800582a:	3301      	adds	r3, #1
 800582c:	f43f ad26 	beq.w	800527c <_strtod_l+0x444>
 8005830:	f04f 39ff 	mov.w	r9, #4294967295
 8005834:	f8df a130 	ldr.w	sl, [pc, #304]	; 8005968 <_strtod_l+0xb30>
 8005838:	991c      	ldr	r1, [sp, #112]	; 0x70
 800583a:	4658      	mov	r0, fp
 800583c:	f001 fc49 	bl	80070d2 <_Bfree>
 8005840:	9906      	ldr	r1, [sp, #24]
 8005842:	4658      	mov	r0, fp
 8005844:	f001 fc45 	bl	80070d2 <_Bfree>
 8005848:	9904      	ldr	r1, [sp, #16]
 800584a:	4658      	mov	r0, fp
 800584c:	f001 fc41 	bl	80070d2 <_Bfree>
 8005850:	4641      	mov	r1, r8
 8005852:	4658      	mov	r0, fp
 8005854:	f001 fc3d 	bl	80070d2 <_Bfree>
 8005858:	e617      	b.n	800548a <_strtod_l+0x652>
 800585a:	f1b9 0f00 	cmp.w	r9, #0
 800585e:	d119      	bne.n	8005894 <_strtod_l+0xa5c>
 8005860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005862:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005866:	b9e3      	cbnz	r3, 80058a2 <_strtod_l+0xa6a>
 8005868:	2200      	movs	r2, #0
 800586a:	4b41      	ldr	r3, [pc, #260]	; (8005970 <_strtod_l+0xb38>)
 800586c:	4630      	mov	r0, r6
 800586e:	4639      	mov	r1, r7
 8005870:	f7fb f8a4 	bl	80009bc <__aeabi_dcmplt>
 8005874:	b9c8      	cbnz	r0, 80058aa <_strtod_l+0xa72>
 8005876:	2200      	movs	r2, #0
 8005878:	4b40      	ldr	r3, [pc, #256]	; (800597c <_strtod_l+0xb44>)
 800587a:	4630      	mov	r0, r6
 800587c:	4639      	mov	r1, r7
 800587e:	f7fa fe2b 	bl	80004d8 <__aeabi_dmul>
 8005882:	4604      	mov	r4, r0
 8005884:	460d      	mov	r5, r1
 8005886:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800588a:	9418      	str	r4, [sp, #96]	; 0x60
 800588c:	9319      	str	r3, [sp, #100]	; 0x64
 800588e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8005892:	e79d      	b.n	80057d0 <_strtod_l+0x998>
 8005894:	f1b9 0f01 	cmp.w	r9, #1
 8005898:	d103      	bne.n	80058a2 <_strtod_l+0xa6a>
 800589a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800589c:	2b00      	cmp	r3, #0
 800589e:	f43f ad8a 	beq.w	80053b6 <_strtod_l+0x57e>
 80058a2:	2600      	movs	r6, #0
 80058a4:	4f36      	ldr	r7, [pc, #216]	; (8005980 <_strtod_l+0xb48>)
 80058a6:	2400      	movs	r4, #0
 80058a8:	e791      	b.n	80057ce <_strtod_l+0x996>
 80058aa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80058ac:	4d33      	ldr	r5, [pc, #204]	; (800597c <_strtod_l+0xb44>)
 80058ae:	e7ea      	b.n	8005886 <_strtod_l+0xa4e>
 80058b0:	4b32      	ldr	r3, [pc, #200]	; (800597c <_strtod_l+0xb44>)
 80058b2:	2200      	movs	r2, #0
 80058b4:	4630      	mov	r0, r6
 80058b6:	4639      	mov	r1, r7
 80058b8:	f7fa fe0e 	bl	80004d8 <__aeabi_dmul>
 80058bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80058be:	4604      	mov	r4, r0
 80058c0:	460d      	mov	r5, r1
 80058c2:	b933      	cbnz	r3, 80058d2 <_strtod_l+0xa9a>
 80058c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80058c8:	9010      	str	r0, [sp, #64]	; 0x40
 80058ca:	9311      	str	r3, [sp, #68]	; 0x44
 80058cc:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80058d0:	e77e      	b.n	80057d0 <_strtod_l+0x998>
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80058da:	e7f7      	b.n	80058cc <_strtod_l+0xa94>
 80058dc:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 80058e0:	9b05      	ldr	r3, [sp, #20]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1a8      	bne.n	8005838 <_strtod_l+0xa00>
 80058e6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80058ea:	0d1b      	lsrs	r3, r3, #20
 80058ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80058ee:	051b      	lsls	r3, r3, #20
 80058f0:	429a      	cmp	r2, r3
 80058f2:	4656      	mov	r6, sl
 80058f4:	d1a0      	bne.n	8005838 <_strtod_l+0xa00>
 80058f6:	4629      	mov	r1, r5
 80058f8:	4620      	mov	r0, r4
 80058fa:	f7fb f89d 	bl	8000a38 <__aeabi_d2iz>
 80058fe:	f7fa fd81 	bl	8000404 <__aeabi_i2d>
 8005902:	460b      	mov	r3, r1
 8005904:	4602      	mov	r2, r0
 8005906:	4629      	mov	r1, r5
 8005908:	4620      	mov	r0, r4
 800590a:	f7fa fc2d 	bl	8000168 <__aeabi_dsub>
 800590e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005910:	4604      	mov	r4, r0
 8005912:	460d      	mov	r5, r1
 8005914:	b933      	cbnz	r3, 8005924 <_strtod_l+0xaec>
 8005916:	f1b9 0f00 	cmp.w	r9, #0
 800591a:	d103      	bne.n	8005924 <_strtod_l+0xaec>
 800591c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8005920:	2e00      	cmp	r6, #0
 8005922:	d06a      	beq.n	80059fa <_strtod_l+0xbc2>
 8005924:	a30a      	add	r3, pc, #40	; (adr r3, 8005950 <_strtod_l+0xb18>)
 8005926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592a:	4620      	mov	r0, r4
 800592c:	4629      	mov	r1, r5
 800592e:	f7fb f845 	bl	80009bc <__aeabi_dcmplt>
 8005932:	2800      	cmp	r0, #0
 8005934:	f47f acad 	bne.w	8005292 <_strtod_l+0x45a>
 8005938:	a307      	add	r3, pc, #28	; (adr r3, 8005958 <_strtod_l+0xb20>)
 800593a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593e:	4620      	mov	r0, r4
 8005940:	4629      	mov	r1, r5
 8005942:	f7fb f859 	bl	80009f8 <__aeabi_dcmpgt>
 8005946:	2800      	cmp	r0, #0
 8005948:	f43f af76 	beq.w	8005838 <_strtod_l+0xa00>
 800594c:	e4a1      	b.n	8005292 <_strtod_l+0x45a>
 800594e:	bf00      	nop
 8005950:	94a03595 	.word	0x94a03595
 8005954:	3fdfffff 	.word	0x3fdfffff
 8005958:	35afe535 	.word	0x35afe535
 800595c:	3fe00000 	.word	0x3fe00000
 8005960:	000fffff 	.word	0x000fffff
 8005964:	7ff00000 	.word	0x7ff00000
 8005968:	7fefffff 	.word	0x7fefffff
 800596c:	39500000 	.word	0x39500000
 8005970:	3ff00000 	.word	0x3ff00000
 8005974:	7fe00000 	.word	0x7fe00000
 8005978:	7c9fffff 	.word	0x7c9fffff
 800597c:	3fe00000 	.word	0x3fe00000
 8005980:	bff00000 	.word	0xbff00000
 8005984:	9b05      	ldr	r3, [sp, #20]
 8005986:	b313      	cbz	r3, 80059ce <_strtod_l+0xb96>
 8005988:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800598a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800598e:	d81e      	bhi.n	80059ce <_strtod_l+0xb96>
 8005990:	a325      	add	r3, pc, #148	; (adr r3, 8005a28 <_strtod_l+0xbf0>)
 8005992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005996:	4620      	mov	r0, r4
 8005998:	4629      	mov	r1, r5
 800599a:	f7fb f819 	bl	80009d0 <__aeabi_dcmple>
 800599e:	b190      	cbz	r0, 80059c6 <_strtod_l+0xb8e>
 80059a0:	4629      	mov	r1, r5
 80059a2:	4620      	mov	r0, r4
 80059a4:	f7fb f870 	bl	8000a88 <__aeabi_d2uiz>
 80059a8:	2800      	cmp	r0, #0
 80059aa:	bf08      	it	eq
 80059ac:	2001      	moveq	r0, #1
 80059ae:	f7fa fd19 	bl	80003e4 <__aeabi_ui2d>
 80059b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059b4:	4604      	mov	r4, r0
 80059b6:	460d      	mov	r5, r1
 80059b8:	b9d3      	cbnz	r3, 80059f0 <_strtod_l+0xbb8>
 80059ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80059be:	9012      	str	r0, [sp, #72]	; 0x48
 80059c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80059c2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80059c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80059c8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80059cc:	1a9f      	subs	r7, r3, r2
 80059ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80059d2:	f001 fe15 	bl	8007600 <__ulp>
 80059d6:	4602      	mov	r2, r0
 80059d8:	460b      	mov	r3, r1
 80059da:	4630      	mov	r0, r6
 80059dc:	4639      	mov	r1, r7
 80059de:	f7fa fd7b 	bl	80004d8 <__aeabi_dmul>
 80059e2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80059e6:	f7fa fbc1 	bl	800016c <__adddf3>
 80059ea:	4681      	mov	r9, r0
 80059ec:	468a      	mov	sl, r1
 80059ee:	e777      	b.n	80058e0 <_strtod_l+0xaa8>
 80059f0:	4602      	mov	r2, r0
 80059f2:	460b      	mov	r3, r1
 80059f4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80059f8:	e7e3      	b.n	80059c2 <_strtod_l+0xb8a>
 80059fa:	a30d      	add	r3, pc, #52	; (adr r3, 8005a30 <_strtod_l+0xbf8>)
 80059fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a00:	f7fa ffdc 	bl	80009bc <__aeabi_dcmplt>
 8005a04:	e79f      	b.n	8005946 <_strtod_l+0xb0e>
 8005a06:	2300      	movs	r3, #0
 8005a08:	930d      	str	r3, [sp, #52]	; 0x34
 8005a0a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a0c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005a0e:	6013      	str	r3, [r2, #0]
 8005a10:	f7ff ba55 	b.w	8004ebe <_strtod_l+0x86>
 8005a14:	2b65      	cmp	r3, #101	; 0x65
 8005a16:	f04f 0200 	mov.w	r2, #0
 8005a1a:	f43f ab42 	beq.w	80050a2 <_strtod_l+0x26a>
 8005a1e:	2101      	movs	r1, #1
 8005a20:	4614      	mov	r4, r2
 8005a22:	9105      	str	r1, [sp, #20]
 8005a24:	f7ff babf 	b.w	8004fa6 <_strtod_l+0x16e>
 8005a28:	ffc00000 	.word	0xffc00000
 8005a2c:	41dfffff 	.word	0x41dfffff
 8005a30:	94a03595 	.word	0x94a03595
 8005a34:	3fcfffff 	.word	0x3fcfffff

08005a38 <_strtod_r>:
 8005a38:	4b05      	ldr	r3, [pc, #20]	; (8005a50 <_strtod_r+0x18>)
 8005a3a:	b410      	push	{r4}
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4c05      	ldr	r4, [pc, #20]	; (8005a54 <_strtod_r+0x1c>)
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	bf08      	it	eq
 8005a46:	4623      	moveq	r3, r4
 8005a48:	bc10      	pop	{r4}
 8005a4a:	f7ff b9f5 	b.w	8004e38 <_strtod_l>
 8005a4e:	bf00      	nop
 8005a50:	20000014 	.word	0x20000014
 8005a54:	20000078 	.word	0x20000078

08005a58 <_strtol_l.isra.0>:
 8005a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a5c:	4680      	mov	r8, r0
 8005a5e:	4689      	mov	r9, r1
 8005a60:	4692      	mov	sl, r2
 8005a62:	461e      	mov	r6, r3
 8005a64:	460f      	mov	r7, r1
 8005a66:	463d      	mov	r5, r7
 8005a68:	9808      	ldr	r0, [sp, #32]
 8005a6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005a6e:	f001 fab5 	bl	8006fdc <__locale_ctype_ptr_l>
 8005a72:	4420      	add	r0, r4
 8005a74:	7843      	ldrb	r3, [r0, #1]
 8005a76:	f013 0308 	ands.w	r3, r3, #8
 8005a7a:	d132      	bne.n	8005ae2 <_strtol_l.isra.0+0x8a>
 8005a7c:	2c2d      	cmp	r4, #45	; 0x2d
 8005a7e:	d132      	bne.n	8005ae6 <_strtol_l.isra.0+0x8e>
 8005a80:	2201      	movs	r2, #1
 8005a82:	787c      	ldrb	r4, [r7, #1]
 8005a84:	1cbd      	adds	r5, r7, #2
 8005a86:	2e00      	cmp	r6, #0
 8005a88:	d05d      	beq.n	8005b46 <_strtol_l.isra.0+0xee>
 8005a8a:	2e10      	cmp	r6, #16
 8005a8c:	d109      	bne.n	8005aa2 <_strtol_l.isra.0+0x4a>
 8005a8e:	2c30      	cmp	r4, #48	; 0x30
 8005a90:	d107      	bne.n	8005aa2 <_strtol_l.isra.0+0x4a>
 8005a92:	782b      	ldrb	r3, [r5, #0]
 8005a94:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005a98:	2b58      	cmp	r3, #88	; 0x58
 8005a9a:	d14f      	bne.n	8005b3c <_strtol_l.isra.0+0xe4>
 8005a9c:	2610      	movs	r6, #16
 8005a9e:	786c      	ldrb	r4, [r5, #1]
 8005aa0:	3502      	adds	r5, #2
 8005aa2:	2a00      	cmp	r2, #0
 8005aa4:	bf14      	ite	ne
 8005aa6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005aaa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005aae:	2700      	movs	r7, #0
 8005ab0:	fbb1 fcf6 	udiv	ip, r1, r6
 8005ab4:	4638      	mov	r0, r7
 8005ab6:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005aba:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005abe:	2b09      	cmp	r3, #9
 8005ac0:	d817      	bhi.n	8005af2 <_strtol_l.isra.0+0x9a>
 8005ac2:	461c      	mov	r4, r3
 8005ac4:	42a6      	cmp	r6, r4
 8005ac6:	dd23      	ble.n	8005b10 <_strtol_l.isra.0+0xb8>
 8005ac8:	1c7b      	adds	r3, r7, #1
 8005aca:	d007      	beq.n	8005adc <_strtol_l.isra.0+0x84>
 8005acc:	4584      	cmp	ip, r0
 8005ace:	d31c      	bcc.n	8005b0a <_strtol_l.isra.0+0xb2>
 8005ad0:	d101      	bne.n	8005ad6 <_strtol_l.isra.0+0x7e>
 8005ad2:	45a6      	cmp	lr, r4
 8005ad4:	db19      	blt.n	8005b0a <_strtol_l.isra.0+0xb2>
 8005ad6:	2701      	movs	r7, #1
 8005ad8:	fb00 4006 	mla	r0, r0, r6, r4
 8005adc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005ae0:	e7eb      	b.n	8005aba <_strtol_l.isra.0+0x62>
 8005ae2:	462f      	mov	r7, r5
 8005ae4:	e7bf      	b.n	8005a66 <_strtol_l.isra.0+0xe>
 8005ae6:	2c2b      	cmp	r4, #43	; 0x2b
 8005ae8:	bf04      	itt	eq
 8005aea:	1cbd      	addeq	r5, r7, #2
 8005aec:	787c      	ldrbeq	r4, [r7, #1]
 8005aee:	461a      	mov	r2, r3
 8005af0:	e7c9      	b.n	8005a86 <_strtol_l.isra.0+0x2e>
 8005af2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005af6:	2b19      	cmp	r3, #25
 8005af8:	d801      	bhi.n	8005afe <_strtol_l.isra.0+0xa6>
 8005afa:	3c37      	subs	r4, #55	; 0x37
 8005afc:	e7e2      	b.n	8005ac4 <_strtol_l.isra.0+0x6c>
 8005afe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005b02:	2b19      	cmp	r3, #25
 8005b04:	d804      	bhi.n	8005b10 <_strtol_l.isra.0+0xb8>
 8005b06:	3c57      	subs	r4, #87	; 0x57
 8005b08:	e7dc      	b.n	8005ac4 <_strtol_l.isra.0+0x6c>
 8005b0a:	f04f 37ff 	mov.w	r7, #4294967295
 8005b0e:	e7e5      	b.n	8005adc <_strtol_l.isra.0+0x84>
 8005b10:	1c7b      	adds	r3, r7, #1
 8005b12:	d108      	bne.n	8005b26 <_strtol_l.isra.0+0xce>
 8005b14:	2322      	movs	r3, #34	; 0x22
 8005b16:	4608      	mov	r0, r1
 8005b18:	f8c8 3000 	str.w	r3, [r8]
 8005b1c:	f1ba 0f00 	cmp.w	sl, #0
 8005b20:	d107      	bne.n	8005b32 <_strtol_l.isra.0+0xda>
 8005b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b26:	b102      	cbz	r2, 8005b2a <_strtol_l.isra.0+0xd2>
 8005b28:	4240      	negs	r0, r0
 8005b2a:	f1ba 0f00 	cmp.w	sl, #0
 8005b2e:	d0f8      	beq.n	8005b22 <_strtol_l.isra.0+0xca>
 8005b30:	b10f      	cbz	r7, 8005b36 <_strtol_l.isra.0+0xde>
 8005b32:	f105 39ff 	add.w	r9, r5, #4294967295
 8005b36:	f8ca 9000 	str.w	r9, [sl]
 8005b3a:	e7f2      	b.n	8005b22 <_strtol_l.isra.0+0xca>
 8005b3c:	2430      	movs	r4, #48	; 0x30
 8005b3e:	2e00      	cmp	r6, #0
 8005b40:	d1af      	bne.n	8005aa2 <_strtol_l.isra.0+0x4a>
 8005b42:	2608      	movs	r6, #8
 8005b44:	e7ad      	b.n	8005aa2 <_strtol_l.isra.0+0x4a>
 8005b46:	2c30      	cmp	r4, #48	; 0x30
 8005b48:	d0a3      	beq.n	8005a92 <_strtol_l.isra.0+0x3a>
 8005b4a:	260a      	movs	r6, #10
 8005b4c:	e7a9      	b.n	8005aa2 <_strtol_l.isra.0+0x4a>
	...

08005b50 <_strtol_r>:
 8005b50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b52:	4c06      	ldr	r4, [pc, #24]	; (8005b6c <_strtol_r+0x1c>)
 8005b54:	4d06      	ldr	r5, [pc, #24]	; (8005b70 <_strtol_r+0x20>)
 8005b56:	6824      	ldr	r4, [r4, #0]
 8005b58:	6a24      	ldr	r4, [r4, #32]
 8005b5a:	2c00      	cmp	r4, #0
 8005b5c:	bf08      	it	eq
 8005b5e:	462c      	moveq	r4, r5
 8005b60:	9400      	str	r4, [sp, #0]
 8005b62:	f7ff ff79 	bl	8005a58 <_strtol_l.isra.0>
 8005b66:	b003      	add	sp, #12
 8005b68:	bd30      	pop	{r4, r5, pc}
 8005b6a:	bf00      	nop
 8005b6c:	20000014 	.word	0x20000014
 8005b70:	20000078 	.word	0x20000078

08005b74 <quorem>:
 8005b74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b78:	6903      	ldr	r3, [r0, #16]
 8005b7a:	690c      	ldr	r4, [r1, #16]
 8005b7c:	4680      	mov	r8, r0
 8005b7e:	42a3      	cmp	r3, r4
 8005b80:	f2c0 8084 	blt.w	8005c8c <quorem+0x118>
 8005b84:	3c01      	subs	r4, #1
 8005b86:	f101 0714 	add.w	r7, r1, #20
 8005b8a:	f100 0614 	add.w	r6, r0, #20
 8005b8e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005b92:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005b96:	3501      	adds	r5, #1
 8005b98:	fbb0 f5f5 	udiv	r5, r0, r5
 8005b9c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005ba0:	eb06 030c 	add.w	r3, r6, ip
 8005ba4:	eb07 090c 	add.w	r9, r7, ip
 8005ba8:	9301      	str	r3, [sp, #4]
 8005baa:	b39d      	cbz	r5, 8005c14 <quorem+0xa0>
 8005bac:	f04f 0a00 	mov.w	sl, #0
 8005bb0:	4638      	mov	r0, r7
 8005bb2:	46b6      	mov	lr, r6
 8005bb4:	46d3      	mov	fp, sl
 8005bb6:	f850 2b04 	ldr.w	r2, [r0], #4
 8005bba:	b293      	uxth	r3, r2
 8005bbc:	fb05 a303 	mla	r3, r5, r3, sl
 8005bc0:	0c12      	lsrs	r2, r2, #16
 8005bc2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005bc6:	fb05 a202 	mla	r2, r5, r2, sl
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	ebab 0303 	sub.w	r3, fp, r3
 8005bd0:	f8de b000 	ldr.w	fp, [lr]
 8005bd4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005bd8:	fa1f fb8b 	uxth.w	fp, fp
 8005bdc:	445b      	add	r3, fp
 8005bde:	fa1f fb82 	uxth.w	fp, r2
 8005be2:	f8de 2000 	ldr.w	r2, [lr]
 8005be6:	4581      	cmp	r9, r0
 8005be8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005bec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bf6:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005bfa:	f84e 3b04 	str.w	r3, [lr], #4
 8005bfe:	d2da      	bcs.n	8005bb6 <quorem+0x42>
 8005c00:	f856 300c 	ldr.w	r3, [r6, ip]
 8005c04:	b933      	cbnz	r3, 8005c14 <quorem+0xa0>
 8005c06:	9b01      	ldr	r3, [sp, #4]
 8005c08:	3b04      	subs	r3, #4
 8005c0a:	429e      	cmp	r6, r3
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	d331      	bcc.n	8005c74 <quorem+0x100>
 8005c10:	f8c8 4010 	str.w	r4, [r8, #16]
 8005c14:	4640      	mov	r0, r8
 8005c16:	f001 fc7b 	bl	8007510 <__mcmp>
 8005c1a:	2800      	cmp	r0, #0
 8005c1c:	db26      	blt.n	8005c6c <quorem+0xf8>
 8005c1e:	4630      	mov	r0, r6
 8005c20:	f04f 0c00 	mov.w	ip, #0
 8005c24:	3501      	adds	r5, #1
 8005c26:	f857 1b04 	ldr.w	r1, [r7], #4
 8005c2a:	f8d0 e000 	ldr.w	lr, [r0]
 8005c2e:	b28b      	uxth	r3, r1
 8005c30:	ebac 0303 	sub.w	r3, ip, r3
 8005c34:	fa1f f28e 	uxth.w	r2, lr
 8005c38:	4413      	add	r3, r2
 8005c3a:	0c0a      	lsrs	r2, r1, #16
 8005c3c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005c40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c4a:	45b9      	cmp	r9, r7
 8005c4c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005c50:	f840 3b04 	str.w	r3, [r0], #4
 8005c54:	d2e7      	bcs.n	8005c26 <quorem+0xb2>
 8005c56:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005c5a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005c5e:	b92a      	cbnz	r2, 8005c6c <quorem+0xf8>
 8005c60:	3b04      	subs	r3, #4
 8005c62:	429e      	cmp	r6, r3
 8005c64:	461a      	mov	r2, r3
 8005c66:	d30b      	bcc.n	8005c80 <quorem+0x10c>
 8005c68:	f8c8 4010 	str.w	r4, [r8, #16]
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	b003      	add	sp, #12
 8005c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c74:	6812      	ldr	r2, [r2, #0]
 8005c76:	3b04      	subs	r3, #4
 8005c78:	2a00      	cmp	r2, #0
 8005c7a:	d1c9      	bne.n	8005c10 <quorem+0x9c>
 8005c7c:	3c01      	subs	r4, #1
 8005c7e:	e7c4      	b.n	8005c0a <quorem+0x96>
 8005c80:	6812      	ldr	r2, [r2, #0]
 8005c82:	3b04      	subs	r3, #4
 8005c84:	2a00      	cmp	r2, #0
 8005c86:	d1ef      	bne.n	8005c68 <quorem+0xf4>
 8005c88:	3c01      	subs	r4, #1
 8005c8a:	e7ea      	b.n	8005c62 <quorem+0xee>
 8005c8c:	2000      	movs	r0, #0
 8005c8e:	e7ee      	b.n	8005c6e <quorem+0xfa>

08005c90 <_dtoa_r>:
 8005c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c94:	4616      	mov	r6, r2
 8005c96:	461f      	mov	r7, r3
 8005c98:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005c9a:	b095      	sub	sp, #84	; 0x54
 8005c9c:	4604      	mov	r4, r0
 8005c9e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8005ca2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005ca6:	b93d      	cbnz	r5, 8005cb8 <_dtoa_r+0x28>
 8005ca8:	2010      	movs	r0, #16
 8005caa:	f001 f9ab 	bl	8007004 <malloc>
 8005cae:	6260      	str	r0, [r4, #36]	; 0x24
 8005cb0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005cb4:	6005      	str	r5, [r0, #0]
 8005cb6:	60c5      	str	r5, [r0, #12]
 8005cb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cba:	6819      	ldr	r1, [r3, #0]
 8005cbc:	b151      	cbz	r1, 8005cd4 <_dtoa_r+0x44>
 8005cbe:	685a      	ldr	r2, [r3, #4]
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	4093      	lsls	r3, r2
 8005cc4:	604a      	str	r2, [r1, #4]
 8005cc6:	608b      	str	r3, [r1, #8]
 8005cc8:	4620      	mov	r0, r4
 8005cca:	f001 fa02 	bl	80070d2 <_Bfree>
 8005cce:	2200      	movs	r2, #0
 8005cd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cd2:	601a      	str	r2, [r3, #0]
 8005cd4:	1e3b      	subs	r3, r7, #0
 8005cd6:	bfaf      	iteee	ge
 8005cd8:	2300      	movge	r3, #0
 8005cda:	2201      	movlt	r2, #1
 8005cdc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005ce0:	9303      	strlt	r3, [sp, #12]
 8005ce2:	bfac      	ite	ge
 8005ce4:	f8c8 3000 	strge.w	r3, [r8]
 8005ce8:	f8c8 2000 	strlt.w	r2, [r8]
 8005cec:	4bae      	ldr	r3, [pc, #696]	; (8005fa8 <_dtoa_r+0x318>)
 8005cee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005cf2:	ea33 0308 	bics.w	r3, r3, r8
 8005cf6:	d11b      	bne.n	8005d30 <_dtoa_r+0xa0>
 8005cf8:	f242 730f 	movw	r3, #9999	; 0x270f
 8005cfc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005cfe:	6013      	str	r3, [r2, #0]
 8005d00:	9b02      	ldr	r3, [sp, #8]
 8005d02:	b923      	cbnz	r3, 8005d0e <_dtoa_r+0x7e>
 8005d04:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005d08:	2800      	cmp	r0, #0
 8005d0a:	f000 8545 	beq.w	8006798 <_dtoa_r+0xb08>
 8005d0e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d10:	b953      	cbnz	r3, 8005d28 <_dtoa_r+0x98>
 8005d12:	4ba6      	ldr	r3, [pc, #664]	; (8005fac <_dtoa_r+0x31c>)
 8005d14:	e021      	b.n	8005d5a <_dtoa_r+0xca>
 8005d16:	4ba6      	ldr	r3, [pc, #664]	; (8005fb0 <_dtoa_r+0x320>)
 8005d18:	9306      	str	r3, [sp, #24]
 8005d1a:	3308      	adds	r3, #8
 8005d1c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005d1e:	6013      	str	r3, [r2, #0]
 8005d20:	9806      	ldr	r0, [sp, #24]
 8005d22:	b015      	add	sp, #84	; 0x54
 8005d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d28:	4ba0      	ldr	r3, [pc, #640]	; (8005fac <_dtoa_r+0x31c>)
 8005d2a:	9306      	str	r3, [sp, #24]
 8005d2c:	3303      	adds	r3, #3
 8005d2e:	e7f5      	b.n	8005d1c <_dtoa_r+0x8c>
 8005d30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005d34:	2200      	movs	r2, #0
 8005d36:	2300      	movs	r3, #0
 8005d38:	4630      	mov	r0, r6
 8005d3a:	4639      	mov	r1, r7
 8005d3c:	f7fa fe34 	bl	80009a8 <__aeabi_dcmpeq>
 8005d40:	4682      	mov	sl, r0
 8005d42:	b160      	cbz	r0, 8005d5e <_dtoa_r+0xce>
 8005d44:	2301      	movs	r3, #1
 8005d46:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005d48:	6013      	str	r3, [r2, #0]
 8005d4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f000 8520 	beq.w	8006792 <_dtoa_r+0xb02>
 8005d52:	4b98      	ldr	r3, [pc, #608]	; (8005fb4 <_dtoa_r+0x324>)
 8005d54:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005d56:	6013      	str	r3, [r2, #0]
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	9306      	str	r3, [sp, #24]
 8005d5c:	e7e0      	b.n	8005d20 <_dtoa_r+0x90>
 8005d5e:	ab12      	add	r3, sp, #72	; 0x48
 8005d60:	9301      	str	r3, [sp, #4]
 8005d62:	ab13      	add	r3, sp, #76	; 0x4c
 8005d64:	9300      	str	r3, [sp, #0]
 8005d66:	4632      	mov	r2, r6
 8005d68:	463b      	mov	r3, r7
 8005d6a:	4620      	mov	r0, r4
 8005d6c:	f001 fcbe 	bl	80076ec <__d2b>
 8005d70:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005d74:	4683      	mov	fp, r0
 8005d76:	2d00      	cmp	r5, #0
 8005d78:	d07d      	beq.n	8005e76 <_dtoa_r+0x1e6>
 8005d7a:	46b0      	mov	r8, r6
 8005d7c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005d80:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8005d84:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005d88:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005d8c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005d90:	2200      	movs	r2, #0
 8005d92:	4b89      	ldr	r3, [pc, #548]	; (8005fb8 <_dtoa_r+0x328>)
 8005d94:	4640      	mov	r0, r8
 8005d96:	4649      	mov	r1, r9
 8005d98:	f7fa f9e6 	bl	8000168 <__aeabi_dsub>
 8005d9c:	a37c      	add	r3, pc, #496	; (adr r3, 8005f90 <_dtoa_r+0x300>)
 8005d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da2:	f7fa fb99 	bl	80004d8 <__aeabi_dmul>
 8005da6:	a37c      	add	r3, pc, #496	; (adr r3, 8005f98 <_dtoa_r+0x308>)
 8005da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dac:	f7fa f9de 	bl	800016c <__adddf3>
 8005db0:	4606      	mov	r6, r0
 8005db2:	4628      	mov	r0, r5
 8005db4:	460f      	mov	r7, r1
 8005db6:	f7fa fb25 	bl	8000404 <__aeabi_i2d>
 8005dba:	a379      	add	r3, pc, #484	; (adr r3, 8005fa0 <_dtoa_r+0x310>)
 8005dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc0:	f7fa fb8a 	bl	80004d8 <__aeabi_dmul>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	4630      	mov	r0, r6
 8005dca:	4639      	mov	r1, r7
 8005dcc:	f7fa f9ce 	bl	800016c <__adddf3>
 8005dd0:	4606      	mov	r6, r0
 8005dd2:	460f      	mov	r7, r1
 8005dd4:	f7fa fe30 	bl	8000a38 <__aeabi_d2iz>
 8005dd8:	2200      	movs	r2, #0
 8005dda:	4682      	mov	sl, r0
 8005ddc:	2300      	movs	r3, #0
 8005dde:	4630      	mov	r0, r6
 8005de0:	4639      	mov	r1, r7
 8005de2:	f7fa fdeb 	bl	80009bc <__aeabi_dcmplt>
 8005de6:	b148      	cbz	r0, 8005dfc <_dtoa_r+0x16c>
 8005de8:	4650      	mov	r0, sl
 8005dea:	f7fa fb0b 	bl	8000404 <__aeabi_i2d>
 8005dee:	4632      	mov	r2, r6
 8005df0:	463b      	mov	r3, r7
 8005df2:	f7fa fdd9 	bl	80009a8 <__aeabi_dcmpeq>
 8005df6:	b908      	cbnz	r0, 8005dfc <_dtoa_r+0x16c>
 8005df8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005dfc:	f1ba 0f16 	cmp.w	sl, #22
 8005e00:	d85a      	bhi.n	8005eb8 <_dtoa_r+0x228>
 8005e02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e06:	496d      	ldr	r1, [pc, #436]	; (8005fbc <_dtoa_r+0x32c>)
 8005e08:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005e0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e10:	f7fa fdf2 	bl	80009f8 <__aeabi_dcmpgt>
 8005e14:	2800      	cmp	r0, #0
 8005e16:	d051      	beq.n	8005ebc <_dtoa_r+0x22c>
 8005e18:	2300      	movs	r3, #0
 8005e1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e1e:	930d      	str	r3, [sp, #52]	; 0x34
 8005e20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e22:	1b5d      	subs	r5, r3, r5
 8005e24:	1e6b      	subs	r3, r5, #1
 8005e26:	9307      	str	r3, [sp, #28]
 8005e28:	bf43      	ittte	mi
 8005e2a:	2300      	movmi	r3, #0
 8005e2c:	f1c5 0901 	rsbmi	r9, r5, #1
 8005e30:	9307      	strmi	r3, [sp, #28]
 8005e32:	f04f 0900 	movpl.w	r9, #0
 8005e36:	f1ba 0f00 	cmp.w	sl, #0
 8005e3a:	db41      	blt.n	8005ec0 <_dtoa_r+0x230>
 8005e3c:	9b07      	ldr	r3, [sp, #28]
 8005e3e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005e42:	4453      	add	r3, sl
 8005e44:	9307      	str	r3, [sp, #28]
 8005e46:	2300      	movs	r3, #0
 8005e48:	9308      	str	r3, [sp, #32]
 8005e4a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005e4c:	2b09      	cmp	r3, #9
 8005e4e:	f200 808f 	bhi.w	8005f70 <_dtoa_r+0x2e0>
 8005e52:	2b05      	cmp	r3, #5
 8005e54:	bfc4      	itt	gt
 8005e56:	3b04      	subgt	r3, #4
 8005e58:	931e      	strgt	r3, [sp, #120]	; 0x78
 8005e5a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005e5c:	bfc8      	it	gt
 8005e5e:	2500      	movgt	r5, #0
 8005e60:	f1a3 0302 	sub.w	r3, r3, #2
 8005e64:	bfd8      	it	le
 8005e66:	2501      	movle	r5, #1
 8005e68:	2b03      	cmp	r3, #3
 8005e6a:	f200 808d 	bhi.w	8005f88 <_dtoa_r+0x2f8>
 8005e6e:	e8df f003 	tbb	[pc, r3]
 8005e72:	7d7b      	.short	0x7d7b
 8005e74:	6f2f      	.short	0x6f2f
 8005e76:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005e7a:	441d      	add	r5, r3
 8005e7c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005e80:	2820      	cmp	r0, #32
 8005e82:	dd13      	ble.n	8005eac <_dtoa_r+0x21c>
 8005e84:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005e88:	9b02      	ldr	r3, [sp, #8]
 8005e8a:	fa08 f800 	lsl.w	r8, r8, r0
 8005e8e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005e92:	fa23 f000 	lsr.w	r0, r3, r0
 8005e96:	ea48 0000 	orr.w	r0, r8, r0
 8005e9a:	f7fa faa3 	bl	80003e4 <__aeabi_ui2d>
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	4680      	mov	r8, r0
 8005ea2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8005ea6:	3d01      	subs	r5, #1
 8005ea8:	9310      	str	r3, [sp, #64]	; 0x40
 8005eaa:	e771      	b.n	8005d90 <_dtoa_r+0x100>
 8005eac:	9b02      	ldr	r3, [sp, #8]
 8005eae:	f1c0 0020 	rsb	r0, r0, #32
 8005eb2:	fa03 f000 	lsl.w	r0, r3, r0
 8005eb6:	e7f0      	b.n	8005e9a <_dtoa_r+0x20a>
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e7b0      	b.n	8005e1e <_dtoa_r+0x18e>
 8005ebc:	900d      	str	r0, [sp, #52]	; 0x34
 8005ebe:	e7af      	b.n	8005e20 <_dtoa_r+0x190>
 8005ec0:	f1ca 0300 	rsb	r3, sl, #0
 8005ec4:	9308      	str	r3, [sp, #32]
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	eba9 090a 	sub.w	r9, r9, sl
 8005ecc:	930c      	str	r3, [sp, #48]	; 0x30
 8005ece:	e7bc      	b.n	8005e4a <_dtoa_r+0x1ba>
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ed4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	dd74      	ble.n	8005fc4 <_dtoa_r+0x334>
 8005eda:	4698      	mov	r8, r3
 8005edc:	9304      	str	r3, [sp, #16]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005ee2:	6072      	str	r2, [r6, #4]
 8005ee4:	2204      	movs	r2, #4
 8005ee6:	f102 0014 	add.w	r0, r2, #20
 8005eea:	4298      	cmp	r0, r3
 8005eec:	6871      	ldr	r1, [r6, #4]
 8005eee:	d96e      	bls.n	8005fce <_dtoa_r+0x33e>
 8005ef0:	4620      	mov	r0, r4
 8005ef2:	f001 f8ba 	bl	800706a <_Balloc>
 8005ef6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ef8:	6030      	str	r0, [r6, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f1b8 0f0e 	cmp.w	r8, #14
 8005f00:	9306      	str	r3, [sp, #24]
 8005f02:	f200 80ed 	bhi.w	80060e0 <_dtoa_r+0x450>
 8005f06:	2d00      	cmp	r5, #0
 8005f08:	f000 80ea 	beq.w	80060e0 <_dtoa_r+0x450>
 8005f0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f10:	f1ba 0f00 	cmp.w	sl, #0
 8005f14:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005f18:	dd77      	ble.n	800600a <_dtoa_r+0x37a>
 8005f1a:	4a28      	ldr	r2, [pc, #160]	; (8005fbc <_dtoa_r+0x32c>)
 8005f1c:	f00a 030f 	and.w	r3, sl, #15
 8005f20:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005f24:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005f28:	06f0      	lsls	r0, r6, #27
 8005f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005f32:	d568      	bpl.n	8006006 <_dtoa_r+0x376>
 8005f34:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005f38:	4b21      	ldr	r3, [pc, #132]	; (8005fc0 <_dtoa_r+0x330>)
 8005f3a:	2503      	movs	r5, #3
 8005f3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f40:	f7fa fbf4 	bl	800072c <__aeabi_ddiv>
 8005f44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f48:	f006 060f 	and.w	r6, r6, #15
 8005f4c:	4f1c      	ldr	r7, [pc, #112]	; (8005fc0 <_dtoa_r+0x330>)
 8005f4e:	e04f      	b.n	8005ff0 <_dtoa_r+0x360>
 8005f50:	2301      	movs	r3, #1
 8005f52:	9309      	str	r3, [sp, #36]	; 0x24
 8005f54:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005f56:	4453      	add	r3, sl
 8005f58:	f103 0801 	add.w	r8, r3, #1
 8005f5c:	9304      	str	r3, [sp, #16]
 8005f5e:	4643      	mov	r3, r8
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	bfb8      	it	lt
 8005f64:	2301      	movlt	r3, #1
 8005f66:	e7ba      	b.n	8005ede <_dtoa_r+0x24e>
 8005f68:	2300      	movs	r3, #0
 8005f6a:	e7b2      	b.n	8005ed2 <_dtoa_r+0x242>
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	e7f0      	b.n	8005f52 <_dtoa_r+0x2c2>
 8005f70:	2501      	movs	r5, #1
 8005f72:	2300      	movs	r3, #0
 8005f74:	9509      	str	r5, [sp, #36]	; 0x24
 8005f76:	931e      	str	r3, [sp, #120]	; 0x78
 8005f78:	f04f 33ff 	mov.w	r3, #4294967295
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	9304      	str	r3, [sp, #16]
 8005f80:	4698      	mov	r8, r3
 8005f82:	2312      	movs	r3, #18
 8005f84:	921f      	str	r2, [sp, #124]	; 0x7c
 8005f86:	e7aa      	b.n	8005ede <_dtoa_r+0x24e>
 8005f88:	2301      	movs	r3, #1
 8005f8a:	9309      	str	r3, [sp, #36]	; 0x24
 8005f8c:	e7f4      	b.n	8005f78 <_dtoa_r+0x2e8>
 8005f8e:	bf00      	nop
 8005f90:	636f4361 	.word	0x636f4361
 8005f94:	3fd287a7 	.word	0x3fd287a7
 8005f98:	8b60c8b3 	.word	0x8b60c8b3
 8005f9c:	3fc68a28 	.word	0x3fc68a28
 8005fa0:	509f79fb 	.word	0x509f79fb
 8005fa4:	3fd34413 	.word	0x3fd34413
 8005fa8:	7ff00000 	.word	0x7ff00000
 8005fac:	080085d1 	.word	0x080085d1
 8005fb0:	080085c8 	.word	0x080085c8
 8005fb4:	0800854d 	.word	0x0800854d
 8005fb8:	3ff80000 	.word	0x3ff80000
 8005fbc:	08008670 	.word	0x08008670
 8005fc0:	08008648 	.word	0x08008648
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	9304      	str	r3, [sp, #16]
 8005fc8:	4698      	mov	r8, r3
 8005fca:	461a      	mov	r2, r3
 8005fcc:	e7da      	b.n	8005f84 <_dtoa_r+0x2f4>
 8005fce:	3101      	adds	r1, #1
 8005fd0:	6071      	str	r1, [r6, #4]
 8005fd2:	0052      	lsls	r2, r2, #1
 8005fd4:	e787      	b.n	8005ee6 <_dtoa_r+0x256>
 8005fd6:	07f1      	lsls	r1, r6, #31
 8005fd8:	d508      	bpl.n	8005fec <_dtoa_r+0x35c>
 8005fda:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005fde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fe2:	f7fa fa79 	bl	80004d8 <__aeabi_dmul>
 8005fe6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005fea:	3501      	adds	r5, #1
 8005fec:	1076      	asrs	r6, r6, #1
 8005fee:	3708      	adds	r7, #8
 8005ff0:	2e00      	cmp	r6, #0
 8005ff2:	d1f0      	bne.n	8005fd6 <_dtoa_r+0x346>
 8005ff4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005ff8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ffc:	f7fa fb96 	bl	800072c <__aeabi_ddiv>
 8006000:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006004:	e01b      	b.n	800603e <_dtoa_r+0x3ae>
 8006006:	2502      	movs	r5, #2
 8006008:	e7a0      	b.n	8005f4c <_dtoa_r+0x2bc>
 800600a:	f000 80a4 	beq.w	8006156 <_dtoa_r+0x4c6>
 800600e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006012:	f1ca 0600 	rsb	r6, sl, #0
 8006016:	4ba0      	ldr	r3, [pc, #640]	; (8006298 <_dtoa_r+0x608>)
 8006018:	f006 020f 	and.w	r2, r6, #15
 800601c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006024:	f7fa fa58 	bl	80004d8 <__aeabi_dmul>
 8006028:	2502      	movs	r5, #2
 800602a:	2300      	movs	r3, #0
 800602c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006030:	4f9a      	ldr	r7, [pc, #616]	; (800629c <_dtoa_r+0x60c>)
 8006032:	1136      	asrs	r6, r6, #4
 8006034:	2e00      	cmp	r6, #0
 8006036:	f040 8083 	bne.w	8006140 <_dtoa_r+0x4b0>
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1e0      	bne.n	8006000 <_dtoa_r+0x370>
 800603e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006040:	2b00      	cmp	r3, #0
 8006042:	f000 808a 	beq.w	800615a <_dtoa_r+0x4ca>
 8006046:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800604a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800604e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006052:	2200      	movs	r2, #0
 8006054:	4b92      	ldr	r3, [pc, #584]	; (80062a0 <_dtoa_r+0x610>)
 8006056:	f7fa fcb1 	bl	80009bc <__aeabi_dcmplt>
 800605a:	2800      	cmp	r0, #0
 800605c:	d07d      	beq.n	800615a <_dtoa_r+0x4ca>
 800605e:	f1b8 0f00 	cmp.w	r8, #0
 8006062:	d07a      	beq.n	800615a <_dtoa_r+0x4ca>
 8006064:	9b04      	ldr	r3, [sp, #16]
 8006066:	2b00      	cmp	r3, #0
 8006068:	dd36      	ble.n	80060d8 <_dtoa_r+0x448>
 800606a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800606e:	2200      	movs	r2, #0
 8006070:	4b8c      	ldr	r3, [pc, #560]	; (80062a4 <_dtoa_r+0x614>)
 8006072:	f7fa fa31 	bl	80004d8 <__aeabi_dmul>
 8006076:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800607a:	9e04      	ldr	r6, [sp, #16]
 800607c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8006080:	3501      	adds	r5, #1
 8006082:	4628      	mov	r0, r5
 8006084:	f7fa f9be 	bl	8000404 <__aeabi_i2d>
 8006088:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800608c:	f7fa fa24 	bl	80004d8 <__aeabi_dmul>
 8006090:	2200      	movs	r2, #0
 8006092:	4b85      	ldr	r3, [pc, #532]	; (80062a8 <_dtoa_r+0x618>)
 8006094:	f7fa f86a 	bl	800016c <__adddf3>
 8006098:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800609c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80060a0:	950b      	str	r5, [sp, #44]	; 0x2c
 80060a2:	2e00      	cmp	r6, #0
 80060a4:	d15c      	bne.n	8006160 <_dtoa_r+0x4d0>
 80060a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060aa:	2200      	movs	r2, #0
 80060ac:	4b7f      	ldr	r3, [pc, #508]	; (80062ac <_dtoa_r+0x61c>)
 80060ae:	f7fa f85b 	bl	8000168 <__aeabi_dsub>
 80060b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060b4:	462b      	mov	r3, r5
 80060b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060ba:	f7fa fc9d 	bl	80009f8 <__aeabi_dcmpgt>
 80060be:	2800      	cmp	r0, #0
 80060c0:	f040 8281 	bne.w	80065c6 <_dtoa_r+0x936>
 80060c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060ca:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80060ce:	f7fa fc75 	bl	80009bc <__aeabi_dcmplt>
 80060d2:	2800      	cmp	r0, #0
 80060d4:	f040 8275 	bne.w	80065c2 <_dtoa_r+0x932>
 80060d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80060dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80060e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f2c0 814b 	blt.w	800637e <_dtoa_r+0x6ee>
 80060e8:	f1ba 0f0e 	cmp.w	sl, #14
 80060ec:	f300 8147 	bgt.w	800637e <_dtoa_r+0x6ee>
 80060f0:	4b69      	ldr	r3, [pc, #420]	; (8006298 <_dtoa_r+0x608>)
 80060f2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80060f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80060fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006100:	2b00      	cmp	r3, #0
 8006102:	f280 80d7 	bge.w	80062b4 <_dtoa_r+0x624>
 8006106:	f1b8 0f00 	cmp.w	r8, #0
 800610a:	f300 80d3 	bgt.w	80062b4 <_dtoa_r+0x624>
 800610e:	f040 8257 	bne.w	80065c0 <_dtoa_r+0x930>
 8006112:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006116:	2200      	movs	r2, #0
 8006118:	4b64      	ldr	r3, [pc, #400]	; (80062ac <_dtoa_r+0x61c>)
 800611a:	f7fa f9dd 	bl	80004d8 <__aeabi_dmul>
 800611e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006122:	f7fa fc5f 	bl	80009e4 <__aeabi_dcmpge>
 8006126:	4646      	mov	r6, r8
 8006128:	4647      	mov	r7, r8
 800612a:	2800      	cmp	r0, #0
 800612c:	f040 822d 	bne.w	800658a <_dtoa_r+0x8fa>
 8006130:	9b06      	ldr	r3, [sp, #24]
 8006132:	9a06      	ldr	r2, [sp, #24]
 8006134:	1c5d      	adds	r5, r3, #1
 8006136:	2331      	movs	r3, #49	; 0x31
 8006138:	f10a 0a01 	add.w	sl, sl, #1
 800613c:	7013      	strb	r3, [r2, #0]
 800613e:	e228      	b.n	8006592 <_dtoa_r+0x902>
 8006140:	07f2      	lsls	r2, r6, #31
 8006142:	d505      	bpl.n	8006150 <_dtoa_r+0x4c0>
 8006144:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006148:	f7fa f9c6 	bl	80004d8 <__aeabi_dmul>
 800614c:	2301      	movs	r3, #1
 800614e:	3501      	adds	r5, #1
 8006150:	1076      	asrs	r6, r6, #1
 8006152:	3708      	adds	r7, #8
 8006154:	e76e      	b.n	8006034 <_dtoa_r+0x3a4>
 8006156:	2502      	movs	r5, #2
 8006158:	e771      	b.n	800603e <_dtoa_r+0x3ae>
 800615a:	4657      	mov	r7, sl
 800615c:	4646      	mov	r6, r8
 800615e:	e790      	b.n	8006082 <_dtoa_r+0x3f2>
 8006160:	4b4d      	ldr	r3, [pc, #308]	; (8006298 <_dtoa_r+0x608>)
 8006162:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006166:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800616a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800616c:	2b00      	cmp	r3, #0
 800616e:	d048      	beq.n	8006202 <_dtoa_r+0x572>
 8006170:	4602      	mov	r2, r0
 8006172:	460b      	mov	r3, r1
 8006174:	2000      	movs	r0, #0
 8006176:	494e      	ldr	r1, [pc, #312]	; (80062b0 <_dtoa_r+0x620>)
 8006178:	f7fa fad8 	bl	800072c <__aeabi_ddiv>
 800617c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006180:	f7f9 fff2 	bl	8000168 <__aeabi_dsub>
 8006184:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006188:	9d06      	ldr	r5, [sp, #24]
 800618a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800618e:	f7fa fc53 	bl	8000a38 <__aeabi_d2iz>
 8006192:	9011      	str	r0, [sp, #68]	; 0x44
 8006194:	f7fa f936 	bl	8000404 <__aeabi_i2d>
 8006198:	4602      	mov	r2, r0
 800619a:	460b      	mov	r3, r1
 800619c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061a0:	f7f9 ffe2 	bl	8000168 <__aeabi_dsub>
 80061a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80061a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061aa:	3330      	adds	r3, #48	; 0x30
 80061ac:	f805 3b01 	strb.w	r3, [r5], #1
 80061b0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80061b4:	f7fa fc02 	bl	80009bc <__aeabi_dcmplt>
 80061b8:	2800      	cmp	r0, #0
 80061ba:	d163      	bne.n	8006284 <_dtoa_r+0x5f4>
 80061bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061c0:	2000      	movs	r0, #0
 80061c2:	4937      	ldr	r1, [pc, #220]	; (80062a0 <_dtoa_r+0x610>)
 80061c4:	f7f9 ffd0 	bl	8000168 <__aeabi_dsub>
 80061c8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80061cc:	f7fa fbf6 	bl	80009bc <__aeabi_dcmplt>
 80061d0:	2800      	cmp	r0, #0
 80061d2:	f040 80b5 	bne.w	8006340 <_dtoa_r+0x6b0>
 80061d6:	9b06      	ldr	r3, [sp, #24]
 80061d8:	1aeb      	subs	r3, r5, r3
 80061da:	429e      	cmp	r6, r3
 80061dc:	f77f af7c 	ble.w	80060d8 <_dtoa_r+0x448>
 80061e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80061e4:	2200      	movs	r2, #0
 80061e6:	4b2f      	ldr	r3, [pc, #188]	; (80062a4 <_dtoa_r+0x614>)
 80061e8:	f7fa f976 	bl	80004d8 <__aeabi_dmul>
 80061ec:	2200      	movs	r2, #0
 80061ee:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80061f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061f6:	4b2b      	ldr	r3, [pc, #172]	; (80062a4 <_dtoa_r+0x614>)
 80061f8:	f7fa f96e 	bl	80004d8 <__aeabi_dmul>
 80061fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006200:	e7c3      	b.n	800618a <_dtoa_r+0x4fa>
 8006202:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006206:	f7fa f967 	bl	80004d8 <__aeabi_dmul>
 800620a:	9b06      	ldr	r3, [sp, #24]
 800620c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006210:	199d      	adds	r5, r3, r6
 8006212:	461e      	mov	r6, r3
 8006214:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006218:	f7fa fc0e 	bl	8000a38 <__aeabi_d2iz>
 800621c:	9011      	str	r0, [sp, #68]	; 0x44
 800621e:	f7fa f8f1 	bl	8000404 <__aeabi_i2d>
 8006222:	4602      	mov	r2, r0
 8006224:	460b      	mov	r3, r1
 8006226:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800622a:	f7f9 ff9d 	bl	8000168 <__aeabi_dsub>
 800622e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006230:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006234:	3330      	adds	r3, #48	; 0x30
 8006236:	f806 3b01 	strb.w	r3, [r6], #1
 800623a:	42ae      	cmp	r6, r5
 800623c:	f04f 0200 	mov.w	r2, #0
 8006240:	d124      	bne.n	800628c <_dtoa_r+0x5fc>
 8006242:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006246:	4b1a      	ldr	r3, [pc, #104]	; (80062b0 <_dtoa_r+0x620>)
 8006248:	f7f9 ff90 	bl	800016c <__adddf3>
 800624c:	4602      	mov	r2, r0
 800624e:	460b      	mov	r3, r1
 8006250:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006254:	f7fa fbd0 	bl	80009f8 <__aeabi_dcmpgt>
 8006258:	2800      	cmp	r0, #0
 800625a:	d171      	bne.n	8006340 <_dtoa_r+0x6b0>
 800625c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006260:	2000      	movs	r0, #0
 8006262:	4913      	ldr	r1, [pc, #76]	; (80062b0 <_dtoa_r+0x620>)
 8006264:	f7f9 ff80 	bl	8000168 <__aeabi_dsub>
 8006268:	4602      	mov	r2, r0
 800626a:	460b      	mov	r3, r1
 800626c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006270:	f7fa fba4 	bl	80009bc <__aeabi_dcmplt>
 8006274:	2800      	cmp	r0, #0
 8006276:	f43f af2f 	beq.w	80060d8 <_dtoa_r+0x448>
 800627a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800627e:	1e6a      	subs	r2, r5, #1
 8006280:	2b30      	cmp	r3, #48	; 0x30
 8006282:	d001      	beq.n	8006288 <_dtoa_r+0x5f8>
 8006284:	46ba      	mov	sl, r7
 8006286:	e04a      	b.n	800631e <_dtoa_r+0x68e>
 8006288:	4615      	mov	r5, r2
 800628a:	e7f6      	b.n	800627a <_dtoa_r+0x5ea>
 800628c:	4b05      	ldr	r3, [pc, #20]	; (80062a4 <_dtoa_r+0x614>)
 800628e:	f7fa f923 	bl	80004d8 <__aeabi_dmul>
 8006292:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006296:	e7bd      	b.n	8006214 <_dtoa_r+0x584>
 8006298:	08008670 	.word	0x08008670
 800629c:	08008648 	.word	0x08008648
 80062a0:	3ff00000 	.word	0x3ff00000
 80062a4:	40240000 	.word	0x40240000
 80062a8:	401c0000 	.word	0x401c0000
 80062ac:	40140000 	.word	0x40140000
 80062b0:	3fe00000 	.word	0x3fe00000
 80062b4:	9d06      	ldr	r5, [sp, #24]
 80062b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80062ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062be:	4630      	mov	r0, r6
 80062c0:	4639      	mov	r1, r7
 80062c2:	f7fa fa33 	bl	800072c <__aeabi_ddiv>
 80062c6:	f7fa fbb7 	bl	8000a38 <__aeabi_d2iz>
 80062ca:	4681      	mov	r9, r0
 80062cc:	f7fa f89a 	bl	8000404 <__aeabi_i2d>
 80062d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062d4:	f7fa f900 	bl	80004d8 <__aeabi_dmul>
 80062d8:	4602      	mov	r2, r0
 80062da:	460b      	mov	r3, r1
 80062dc:	4630      	mov	r0, r6
 80062de:	4639      	mov	r1, r7
 80062e0:	f7f9 ff42 	bl	8000168 <__aeabi_dsub>
 80062e4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80062e8:	f805 6b01 	strb.w	r6, [r5], #1
 80062ec:	9e06      	ldr	r6, [sp, #24]
 80062ee:	4602      	mov	r2, r0
 80062f0:	1bae      	subs	r6, r5, r6
 80062f2:	45b0      	cmp	r8, r6
 80062f4:	460b      	mov	r3, r1
 80062f6:	d135      	bne.n	8006364 <_dtoa_r+0x6d4>
 80062f8:	f7f9 ff38 	bl	800016c <__adddf3>
 80062fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006300:	4606      	mov	r6, r0
 8006302:	460f      	mov	r7, r1
 8006304:	f7fa fb78 	bl	80009f8 <__aeabi_dcmpgt>
 8006308:	b9c8      	cbnz	r0, 800633e <_dtoa_r+0x6ae>
 800630a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800630e:	4630      	mov	r0, r6
 8006310:	4639      	mov	r1, r7
 8006312:	f7fa fb49 	bl	80009a8 <__aeabi_dcmpeq>
 8006316:	b110      	cbz	r0, 800631e <_dtoa_r+0x68e>
 8006318:	f019 0f01 	tst.w	r9, #1
 800631c:	d10f      	bne.n	800633e <_dtoa_r+0x6ae>
 800631e:	4659      	mov	r1, fp
 8006320:	4620      	mov	r0, r4
 8006322:	f000 fed6 	bl	80070d2 <_Bfree>
 8006326:	2300      	movs	r3, #0
 8006328:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800632a:	702b      	strb	r3, [r5, #0]
 800632c:	f10a 0301 	add.w	r3, sl, #1
 8006330:	6013      	str	r3, [r2, #0]
 8006332:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006334:	2b00      	cmp	r3, #0
 8006336:	f43f acf3 	beq.w	8005d20 <_dtoa_r+0x90>
 800633a:	601d      	str	r5, [r3, #0]
 800633c:	e4f0      	b.n	8005d20 <_dtoa_r+0x90>
 800633e:	4657      	mov	r7, sl
 8006340:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006344:	1e6b      	subs	r3, r5, #1
 8006346:	2a39      	cmp	r2, #57	; 0x39
 8006348:	d106      	bne.n	8006358 <_dtoa_r+0x6c8>
 800634a:	9a06      	ldr	r2, [sp, #24]
 800634c:	429a      	cmp	r2, r3
 800634e:	d107      	bne.n	8006360 <_dtoa_r+0x6d0>
 8006350:	2330      	movs	r3, #48	; 0x30
 8006352:	7013      	strb	r3, [r2, #0]
 8006354:	4613      	mov	r3, r2
 8006356:	3701      	adds	r7, #1
 8006358:	781a      	ldrb	r2, [r3, #0]
 800635a:	3201      	adds	r2, #1
 800635c:	701a      	strb	r2, [r3, #0]
 800635e:	e791      	b.n	8006284 <_dtoa_r+0x5f4>
 8006360:	461d      	mov	r5, r3
 8006362:	e7ed      	b.n	8006340 <_dtoa_r+0x6b0>
 8006364:	2200      	movs	r2, #0
 8006366:	4b99      	ldr	r3, [pc, #612]	; (80065cc <_dtoa_r+0x93c>)
 8006368:	f7fa f8b6 	bl	80004d8 <__aeabi_dmul>
 800636c:	2200      	movs	r2, #0
 800636e:	2300      	movs	r3, #0
 8006370:	4606      	mov	r6, r0
 8006372:	460f      	mov	r7, r1
 8006374:	f7fa fb18 	bl	80009a8 <__aeabi_dcmpeq>
 8006378:	2800      	cmp	r0, #0
 800637a:	d09e      	beq.n	80062ba <_dtoa_r+0x62a>
 800637c:	e7cf      	b.n	800631e <_dtoa_r+0x68e>
 800637e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006380:	2a00      	cmp	r2, #0
 8006382:	f000 8088 	beq.w	8006496 <_dtoa_r+0x806>
 8006386:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006388:	2a01      	cmp	r2, #1
 800638a:	dc6d      	bgt.n	8006468 <_dtoa_r+0x7d8>
 800638c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800638e:	2a00      	cmp	r2, #0
 8006390:	d066      	beq.n	8006460 <_dtoa_r+0x7d0>
 8006392:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006396:	464d      	mov	r5, r9
 8006398:	9e08      	ldr	r6, [sp, #32]
 800639a:	9a07      	ldr	r2, [sp, #28]
 800639c:	2101      	movs	r1, #1
 800639e:	441a      	add	r2, r3
 80063a0:	4620      	mov	r0, r4
 80063a2:	4499      	add	r9, r3
 80063a4:	9207      	str	r2, [sp, #28]
 80063a6:	f000 ff72 	bl	800728e <__i2b>
 80063aa:	4607      	mov	r7, r0
 80063ac:	2d00      	cmp	r5, #0
 80063ae:	dd0b      	ble.n	80063c8 <_dtoa_r+0x738>
 80063b0:	9b07      	ldr	r3, [sp, #28]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	dd08      	ble.n	80063c8 <_dtoa_r+0x738>
 80063b6:	42ab      	cmp	r3, r5
 80063b8:	bfa8      	it	ge
 80063ba:	462b      	movge	r3, r5
 80063bc:	9a07      	ldr	r2, [sp, #28]
 80063be:	eba9 0903 	sub.w	r9, r9, r3
 80063c2:	1aed      	subs	r5, r5, r3
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	9307      	str	r3, [sp, #28]
 80063c8:	9b08      	ldr	r3, [sp, #32]
 80063ca:	b1eb      	cbz	r3, 8006408 <_dtoa_r+0x778>
 80063cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d065      	beq.n	800649e <_dtoa_r+0x80e>
 80063d2:	b18e      	cbz	r6, 80063f8 <_dtoa_r+0x768>
 80063d4:	4639      	mov	r1, r7
 80063d6:	4632      	mov	r2, r6
 80063d8:	4620      	mov	r0, r4
 80063da:	f000 fff7 	bl	80073cc <__pow5mult>
 80063de:	465a      	mov	r2, fp
 80063e0:	4601      	mov	r1, r0
 80063e2:	4607      	mov	r7, r0
 80063e4:	4620      	mov	r0, r4
 80063e6:	f000 ff5b 	bl	80072a0 <__multiply>
 80063ea:	4659      	mov	r1, fp
 80063ec:	900a      	str	r0, [sp, #40]	; 0x28
 80063ee:	4620      	mov	r0, r4
 80063f0:	f000 fe6f 	bl	80070d2 <_Bfree>
 80063f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063f6:	469b      	mov	fp, r3
 80063f8:	9b08      	ldr	r3, [sp, #32]
 80063fa:	1b9a      	subs	r2, r3, r6
 80063fc:	d004      	beq.n	8006408 <_dtoa_r+0x778>
 80063fe:	4659      	mov	r1, fp
 8006400:	4620      	mov	r0, r4
 8006402:	f000 ffe3 	bl	80073cc <__pow5mult>
 8006406:	4683      	mov	fp, r0
 8006408:	2101      	movs	r1, #1
 800640a:	4620      	mov	r0, r4
 800640c:	f000 ff3f 	bl	800728e <__i2b>
 8006410:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006412:	4606      	mov	r6, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	f000 81c6 	beq.w	80067a6 <_dtoa_r+0xb16>
 800641a:	461a      	mov	r2, r3
 800641c:	4601      	mov	r1, r0
 800641e:	4620      	mov	r0, r4
 8006420:	f000 ffd4 	bl	80073cc <__pow5mult>
 8006424:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006426:	4606      	mov	r6, r0
 8006428:	2b01      	cmp	r3, #1
 800642a:	dc3e      	bgt.n	80064aa <_dtoa_r+0x81a>
 800642c:	9b02      	ldr	r3, [sp, #8]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d137      	bne.n	80064a2 <_dtoa_r+0x812>
 8006432:	9b03      	ldr	r3, [sp, #12]
 8006434:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006438:	2b00      	cmp	r3, #0
 800643a:	d134      	bne.n	80064a6 <_dtoa_r+0x816>
 800643c:	9b03      	ldr	r3, [sp, #12]
 800643e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006442:	0d1b      	lsrs	r3, r3, #20
 8006444:	051b      	lsls	r3, r3, #20
 8006446:	b12b      	cbz	r3, 8006454 <_dtoa_r+0x7c4>
 8006448:	9b07      	ldr	r3, [sp, #28]
 800644a:	f109 0901 	add.w	r9, r9, #1
 800644e:	3301      	adds	r3, #1
 8006450:	9307      	str	r3, [sp, #28]
 8006452:	2301      	movs	r3, #1
 8006454:	9308      	str	r3, [sp, #32]
 8006456:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006458:	2b00      	cmp	r3, #0
 800645a:	d128      	bne.n	80064ae <_dtoa_r+0x81e>
 800645c:	2001      	movs	r0, #1
 800645e:	e02e      	b.n	80064be <_dtoa_r+0x82e>
 8006460:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006462:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006466:	e796      	b.n	8006396 <_dtoa_r+0x706>
 8006468:	9b08      	ldr	r3, [sp, #32]
 800646a:	f108 36ff 	add.w	r6, r8, #4294967295
 800646e:	42b3      	cmp	r3, r6
 8006470:	bfb7      	itett	lt
 8006472:	9b08      	ldrlt	r3, [sp, #32]
 8006474:	1b9e      	subge	r6, r3, r6
 8006476:	1af2      	sublt	r2, r6, r3
 8006478:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800647a:	bfbf      	itttt	lt
 800647c:	9608      	strlt	r6, [sp, #32]
 800647e:	189b      	addlt	r3, r3, r2
 8006480:	930c      	strlt	r3, [sp, #48]	; 0x30
 8006482:	2600      	movlt	r6, #0
 8006484:	f1b8 0f00 	cmp.w	r8, #0
 8006488:	bfb9      	ittee	lt
 800648a:	eba9 0508 	sublt.w	r5, r9, r8
 800648e:	2300      	movlt	r3, #0
 8006490:	464d      	movge	r5, r9
 8006492:	4643      	movge	r3, r8
 8006494:	e781      	b.n	800639a <_dtoa_r+0x70a>
 8006496:	9e08      	ldr	r6, [sp, #32]
 8006498:	464d      	mov	r5, r9
 800649a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800649c:	e786      	b.n	80063ac <_dtoa_r+0x71c>
 800649e:	9a08      	ldr	r2, [sp, #32]
 80064a0:	e7ad      	b.n	80063fe <_dtoa_r+0x76e>
 80064a2:	2300      	movs	r3, #0
 80064a4:	e7d6      	b.n	8006454 <_dtoa_r+0x7c4>
 80064a6:	9b02      	ldr	r3, [sp, #8]
 80064a8:	e7d4      	b.n	8006454 <_dtoa_r+0x7c4>
 80064aa:	2300      	movs	r3, #0
 80064ac:	9308      	str	r3, [sp, #32]
 80064ae:	6933      	ldr	r3, [r6, #16]
 80064b0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80064b4:	6918      	ldr	r0, [r3, #16]
 80064b6:	f000 fe9c 	bl	80071f2 <__hi0bits>
 80064ba:	f1c0 0020 	rsb	r0, r0, #32
 80064be:	9b07      	ldr	r3, [sp, #28]
 80064c0:	4418      	add	r0, r3
 80064c2:	f010 001f 	ands.w	r0, r0, #31
 80064c6:	d047      	beq.n	8006558 <_dtoa_r+0x8c8>
 80064c8:	f1c0 0320 	rsb	r3, r0, #32
 80064cc:	2b04      	cmp	r3, #4
 80064ce:	dd3b      	ble.n	8006548 <_dtoa_r+0x8b8>
 80064d0:	9b07      	ldr	r3, [sp, #28]
 80064d2:	f1c0 001c 	rsb	r0, r0, #28
 80064d6:	4481      	add	r9, r0
 80064d8:	4405      	add	r5, r0
 80064da:	4403      	add	r3, r0
 80064dc:	9307      	str	r3, [sp, #28]
 80064de:	f1b9 0f00 	cmp.w	r9, #0
 80064e2:	dd05      	ble.n	80064f0 <_dtoa_r+0x860>
 80064e4:	4659      	mov	r1, fp
 80064e6:	464a      	mov	r2, r9
 80064e8:	4620      	mov	r0, r4
 80064ea:	f000 ffbd 	bl	8007468 <__lshift>
 80064ee:	4683      	mov	fp, r0
 80064f0:	9b07      	ldr	r3, [sp, #28]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	dd05      	ble.n	8006502 <_dtoa_r+0x872>
 80064f6:	4631      	mov	r1, r6
 80064f8:	461a      	mov	r2, r3
 80064fa:	4620      	mov	r0, r4
 80064fc:	f000 ffb4 	bl	8007468 <__lshift>
 8006500:	4606      	mov	r6, r0
 8006502:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006504:	b353      	cbz	r3, 800655c <_dtoa_r+0x8cc>
 8006506:	4631      	mov	r1, r6
 8006508:	4658      	mov	r0, fp
 800650a:	f001 f801 	bl	8007510 <__mcmp>
 800650e:	2800      	cmp	r0, #0
 8006510:	da24      	bge.n	800655c <_dtoa_r+0x8cc>
 8006512:	2300      	movs	r3, #0
 8006514:	4659      	mov	r1, fp
 8006516:	220a      	movs	r2, #10
 8006518:	4620      	mov	r0, r4
 800651a:	f000 fdf1 	bl	8007100 <__multadd>
 800651e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006520:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006524:	4683      	mov	fp, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	f000 8144 	beq.w	80067b4 <_dtoa_r+0xb24>
 800652c:	2300      	movs	r3, #0
 800652e:	4639      	mov	r1, r7
 8006530:	220a      	movs	r2, #10
 8006532:	4620      	mov	r0, r4
 8006534:	f000 fde4 	bl	8007100 <__multadd>
 8006538:	9b04      	ldr	r3, [sp, #16]
 800653a:	4607      	mov	r7, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	dc4d      	bgt.n	80065dc <_dtoa_r+0x94c>
 8006540:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006542:	2b02      	cmp	r3, #2
 8006544:	dd4a      	ble.n	80065dc <_dtoa_r+0x94c>
 8006546:	e011      	b.n	800656c <_dtoa_r+0x8dc>
 8006548:	d0c9      	beq.n	80064de <_dtoa_r+0x84e>
 800654a:	9a07      	ldr	r2, [sp, #28]
 800654c:	331c      	adds	r3, #28
 800654e:	441a      	add	r2, r3
 8006550:	4499      	add	r9, r3
 8006552:	441d      	add	r5, r3
 8006554:	4613      	mov	r3, r2
 8006556:	e7c1      	b.n	80064dc <_dtoa_r+0x84c>
 8006558:	4603      	mov	r3, r0
 800655a:	e7f6      	b.n	800654a <_dtoa_r+0x8ba>
 800655c:	f1b8 0f00 	cmp.w	r8, #0
 8006560:	dc36      	bgt.n	80065d0 <_dtoa_r+0x940>
 8006562:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006564:	2b02      	cmp	r3, #2
 8006566:	dd33      	ble.n	80065d0 <_dtoa_r+0x940>
 8006568:	f8cd 8010 	str.w	r8, [sp, #16]
 800656c:	9b04      	ldr	r3, [sp, #16]
 800656e:	b963      	cbnz	r3, 800658a <_dtoa_r+0x8fa>
 8006570:	4631      	mov	r1, r6
 8006572:	2205      	movs	r2, #5
 8006574:	4620      	mov	r0, r4
 8006576:	f000 fdc3 	bl	8007100 <__multadd>
 800657a:	4601      	mov	r1, r0
 800657c:	4606      	mov	r6, r0
 800657e:	4658      	mov	r0, fp
 8006580:	f000 ffc6 	bl	8007510 <__mcmp>
 8006584:	2800      	cmp	r0, #0
 8006586:	f73f add3 	bgt.w	8006130 <_dtoa_r+0x4a0>
 800658a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800658c:	9d06      	ldr	r5, [sp, #24]
 800658e:	ea6f 0a03 	mvn.w	sl, r3
 8006592:	f04f 0900 	mov.w	r9, #0
 8006596:	4631      	mov	r1, r6
 8006598:	4620      	mov	r0, r4
 800659a:	f000 fd9a 	bl	80070d2 <_Bfree>
 800659e:	2f00      	cmp	r7, #0
 80065a0:	f43f aebd 	beq.w	800631e <_dtoa_r+0x68e>
 80065a4:	f1b9 0f00 	cmp.w	r9, #0
 80065a8:	d005      	beq.n	80065b6 <_dtoa_r+0x926>
 80065aa:	45b9      	cmp	r9, r7
 80065ac:	d003      	beq.n	80065b6 <_dtoa_r+0x926>
 80065ae:	4649      	mov	r1, r9
 80065b0:	4620      	mov	r0, r4
 80065b2:	f000 fd8e 	bl	80070d2 <_Bfree>
 80065b6:	4639      	mov	r1, r7
 80065b8:	4620      	mov	r0, r4
 80065ba:	f000 fd8a 	bl	80070d2 <_Bfree>
 80065be:	e6ae      	b.n	800631e <_dtoa_r+0x68e>
 80065c0:	2600      	movs	r6, #0
 80065c2:	4637      	mov	r7, r6
 80065c4:	e7e1      	b.n	800658a <_dtoa_r+0x8fa>
 80065c6:	46ba      	mov	sl, r7
 80065c8:	4637      	mov	r7, r6
 80065ca:	e5b1      	b.n	8006130 <_dtoa_r+0x4a0>
 80065cc:	40240000 	.word	0x40240000
 80065d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065d2:	f8cd 8010 	str.w	r8, [sp, #16]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	f000 80f3 	beq.w	80067c2 <_dtoa_r+0xb32>
 80065dc:	2d00      	cmp	r5, #0
 80065de:	dd05      	ble.n	80065ec <_dtoa_r+0x95c>
 80065e0:	4639      	mov	r1, r7
 80065e2:	462a      	mov	r2, r5
 80065e4:	4620      	mov	r0, r4
 80065e6:	f000 ff3f 	bl	8007468 <__lshift>
 80065ea:	4607      	mov	r7, r0
 80065ec:	9b08      	ldr	r3, [sp, #32]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d04c      	beq.n	800668c <_dtoa_r+0x9fc>
 80065f2:	6879      	ldr	r1, [r7, #4]
 80065f4:	4620      	mov	r0, r4
 80065f6:	f000 fd38 	bl	800706a <_Balloc>
 80065fa:	4605      	mov	r5, r0
 80065fc:	693a      	ldr	r2, [r7, #16]
 80065fe:	f107 010c 	add.w	r1, r7, #12
 8006602:	3202      	adds	r2, #2
 8006604:	0092      	lsls	r2, r2, #2
 8006606:	300c      	adds	r0, #12
 8006608:	f000 fd24 	bl	8007054 <memcpy>
 800660c:	2201      	movs	r2, #1
 800660e:	4629      	mov	r1, r5
 8006610:	4620      	mov	r0, r4
 8006612:	f000 ff29 	bl	8007468 <__lshift>
 8006616:	46b9      	mov	r9, r7
 8006618:	4607      	mov	r7, r0
 800661a:	9b06      	ldr	r3, [sp, #24]
 800661c:	9307      	str	r3, [sp, #28]
 800661e:	9b02      	ldr	r3, [sp, #8]
 8006620:	f003 0301 	and.w	r3, r3, #1
 8006624:	9308      	str	r3, [sp, #32]
 8006626:	4631      	mov	r1, r6
 8006628:	4658      	mov	r0, fp
 800662a:	f7ff faa3 	bl	8005b74 <quorem>
 800662e:	4649      	mov	r1, r9
 8006630:	4605      	mov	r5, r0
 8006632:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006636:	4658      	mov	r0, fp
 8006638:	f000 ff6a 	bl	8007510 <__mcmp>
 800663c:	463a      	mov	r2, r7
 800663e:	9002      	str	r0, [sp, #8]
 8006640:	4631      	mov	r1, r6
 8006642:	4620      	mov	r0, r4
 8006644:	f000 ff7e 	bl	8007544 <__mdiff>
 8006648:	68c3      	ldr	r3, [r0, #12]
 800664a:	4602      	mov	r2, r0
 800664c:	bb03      	cbnz	r3, 8006690 <_dtoa_r+0xa00>
 800664e:	4601      	mov	r1, r0
 8006650:	9009      	str	r0, [sp, #36]	; 0x24
 8006652:	4658      	mov	r0, fp
 8006654:	f000 ff5c 	bl	8007510 <__mcmp>
 8006658:	4603      	mov	r3, r0
 800665a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800665c:	4611      	mov	r1, r2
 800665e:	4620      	mov	r0, r4
 8006660:	9309      	str	r3, [sp, #36]	; 0x24
 8006662:	f000 fd36 	bl	80070d2 <_Bfree>
 8006666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006668:	b9a3      	cbnz	r3, 8006694 <_dtoa_r+0xa04>
 800666a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800666c:	b992      	cbnz	r2, 8006694 <_dtoa_r+0xa04>
 800666e:	9a08      	ldr	r2, [sp, #32]
 8006670:	b982      	cbnz	r2, 8006694 <_dtoa_r+0xa04>
 8006672:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006676:	d029      	beq.n	80066cc <_dtoa_r+0xa3c>
 8006678:	9b02      	ldr	r3, [sp, #8]
 800667a:	2b00      	cmp	r3, #0
 800667c:	dd01      	ble.n	8006682 <_dtoa_r+0x9f2>
 800667e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006682:	9b07      	ldr	r3, [sp, #28]
 8006684:	1c5d      	adds	r5, r3, #1
 8006686:	f883 8000 	strb.w	r8, [r3]
 800668a:	e784      	b.n	8006596 <_dtoa_r+0x906>
 800668c:	4638      	mov	r0, r7
 800668e:	e7c2      	b.n	8006616 <_dtoa_r+0x986>
 8006690:	2301      	movs	r3, #1
 8006692:	e7e3      	b.n	800665c <_dtoa_r+0x9cc>
 8006694:	9a02      	ldr	r2, [sp, #8]
 8006696:	2a00      	cmp	r2, #0
 8006698:	db04      	blt.n	80066a4 <_dtoa_r+0xa14>
 800669a:	d123      	bne.n	80066e4 <_dtoa_r+0xa54>
 800669c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800669e:	bb0a      	cbnz	r2, 80066e4 <_dtoa_r+0xa54>
 80066a0:	9a08      	ldr	r2, [sp, #32]
 80066a2:	b9fa      	cbnz	r2, 80066e4 <_dtoa_r+0xa54>
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	ddec      	ble.n	8006682 <_dtoa_r+0x9f2>
 80066a8:	4659      	mov	r1, fp
 80066aa:	2201      	movs	r2, #1
 80066ac:	4620      	mov	r0, r4
 80066ae:	f000 fedb 	bl	8007468 <__lshift>
 80066b2:	4631      	mov	r1, r6
 80066b4:	4683      	mov	fp, r0
 80066b6:	f000 ff2b 	bl	8007510 <__mcmp>
 80066ba:	2800      	cmp	r0, #0
 80066bc:	dc03      	bgt.n	80066c6 <_dtoa_r+0xa36>
 80066be:	d1e0      	bne.n	8006682 <_dtoa_r+0x9f2>
 80066c0:	f018 0f01 	tst.w	r8, #1
 80066c4:	d0dd      	beq.n	8006682 <_dtoa_r+0x9f2>
 80066c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80066ca:	d1d8      	bne.n	800667e <_dtoa_r+0x9ee>
 80066cc:	9b07      	ldr	r3, [sp, #28]
 80066ce:	9a07      	ldr	r2, [sp, #28]
 80066d0:	1c5d      	adds	r5, r3, #1
 80066d2:	2339      	movs	r3, #57	; 0x39
 80066d4:	7013      	strb	r3, [r2, #0]
 80066d6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80066da:	1e6a      	subs	r2, r5, #1
 80066dc:	2b39      	cmp	r3, #57	; 0x39
 80066de:	d04d      	beq.n	800677c <_dtoa_r+0xaec>
 80066e0:	3301      	adds	r3, #1
 80066e2:	e052      	b.n	800678a <_dtoa_r+0xafa>
 80066e4:	9a07      	ldr	r2, [sp, #28]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	f102 0501 	add.w	r5, r2, #1
 80066ec:	dd06      	ble.n	80066fc <_dtoa_r+0xa6c>
 80066ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80066f2:	d0eb      	beq.n	80066cc <_dtoa_r+0xa3c>
 80066f4:	f108 0801 	add.w	r8, r8, #1
 80066f8:	9b07      	ldr	r3, [sp, #28]
 80066fa:	e7c4      	b.n	8006686 <_dtoa_r+0x9f6>
 80066fc:	9b06      	ldr	r3, [sp, #24]
 80066fe:	9a04      	ldr	r2, [sp, #16]
 8006700:	1aeb      	subs	r3, r5, r3
 8006702:	4293      	cmp	r3, r2
 8006704:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006708:	d021      	beq.n	800674e <_dtoa_r+0xabe>
 800670a:	4659      	mov	r1, fp
 800670c:	2300      	movs	r3, #0
 800670e:	220a      	movs	r2, #10
 8006710:	4620      	mov	r0, r4
 8006712:	f000 fcf5 	bl	8007100 <__multadd>
 8006716:	45b9      	cmp	r9, r7
 8006718:	4683      	mov	fp, r0
 800671a:	f04f 0300 	mov.w	r3, #0
 800671e:	f04f 020a 	mov.w	r2, #10
 8006722:	4649      	mov	r1, r9
 8006724:	4620      	mov	r0, r4
 8006726:	d105      	bne.n	8006734 <_dtoa_r+0xaa4>
 8006728:	f000 fcea 	bl	8007100 <__multadd>
 800672c:	4681      	mov	r9, r0
 800672e:	4607      	mov	r7, r0
 8006730:	9507      	str	r5, [sp, #28]
 8006732:	e778      	b.n	8006626 <_dtoa_r+0x996>
 8006734:	f000 fce4 	bl	8007100 <__multadd>
 8006738:	4639      	mov	r1, r7
 800673a:	4681      	mov	r9, r0
 800673c:	2300      	movs	r3, #0
 800673e:	220a      	movs	r2, #10
 8006740:	4620      	mov	r0, r4
 8006742:	f000 fcdd 	bl	8007100 <__multadd>
 8006746:	4607      	mov	r7, r0
 8006748:	e7f2      	b.n	8006730 <_dtoa_r+0xaa0>
 800674a:	f04f 0900 	mov.w	r9, #0
 800674e:	4659      	mov	r1, fp
 8006750:	2201      	movs	r2, #1
 8006752:	4620      	mov	r0, r4
 8006754:	f000 fe88 	bl	8007468 <__lshift>
 8006758:	4631      	mov	r1, r6
 800675a:	4683      	mov	fp, r0
 800675c:	f000 fed8 	bl	8007510 <__mcmp>
 8006760:	2800      	cmp	r0, #0
 8006762:	dcb8      	bgt.n	80066d6 <_dtoa_r+0xa46>
 8006764:	d102      	bne.n	800676c <_dtoa_r+0xadc>
 8006766:	f018 0f01 	tst.w	r8, #1
 800676a:	d1b4      	bne.n	80066d6 <_dtoa_r+0xa46>
 800676c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006770:	1e6a      	subs	r2, r5, #1
 8006772:	2b30      	cmp	r3, #48	; 0x30
 8006774:	f47f af0f 	bne.w	8006596 <_dtoa_r+0x906>
 8006778:	4615      	mov	r5, r2
 800677a:	e7f7      	b.n	800676c <_dtoa_r+0xadc>
 800677c:	9b06      	ldr	r3, [sp, #24]
 800677e:	4293      	cmp	r3, r2
 8006780:	d105      	bne.n	800678e <_dtoa_r+0xafe>
 8006782:	2331      	movs	r3, #49	; 0x31
 8006784:	9a06      	ldr	r2, [sp, #24]
 8006786:	f10a 0a01 	add.w	sl, sl, #1
 800678a:	7013      	strb	r3, [r2, #0]
 800678c:	e703      	b.n	8006596 <_dtoa_r+0x906>
 800678e:	4615      	mov	r5, r2
 8006790:	e7a1      	b.n	80066d6 <_dtoa_r+0xa46>
 8006792:	4b17      	ldr	r3, [pc, #92]	; (80067f0 <_dtoa_r+0xb60>)
 8006794:	f7ff bae1 	b.w	8005d5a <_dtoa_r+0xca>
 8006798:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800679a:	2b00      	cmp	r3, #0
 800679c:	f47f aabb 	bne.w	8005d16 <_dtoa_r+0x86>
 80067a0:	4b14      	ldr	r3, [pc, #80]	; (80067f4 <_dtoa_r+0xb64>)
 80067a2:	f7ff bada 	b.w	8005d5a <_dtoa_r+0xca>
 80067a6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	f77f ae3f 	ble.w	800642c <_dtoa_r+0x79c>
 80067ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067b0:	9308      	str	r3, [sp, #32]
 80067b2:	e653      	b.n	800645c <_dtoa_r+0x7cc>
 80067b4:	9b04      	ldr	r3, [sp, #16]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	dc03      	bgt.n	80067c2 <_dtoa_r+0xb32>
 80067ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80067bc:	2b02      	cmp	r3, #2
 80067be:	f73f aed5 	bgt.w	800656c <_dtoa_r+0x8dc>
 80067c2:	9d06      	ldr	r5, [sp, #24]
 80067c4:	4631      	mov	r1, r6
 80067c6:	4658      	mov	r0, fp
 80067c8:	f7ff f9d4 	bl	8005b74 <quorem>
 80067cc:	9b06      	ldr	r3, [sp, #24]
 80067ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80067d2:	f805 8b01 	strb.w	r8, [r5], #1
 80067d6:	9a04      	ldr	r2, [sp, #16]
 80067d8:	1aeb      	subs	r3, r5, r3
 80067da:	429a      	cmp	r2, r3
 80067dc:	ddb5      	ble.n	800674a <_dtoa_r+0xaba>
 80067de:	4659      	mov	r1, fp
 80067e0:	2300      	movs	r3, #0
 80067e2:	220a      	movs	r2, #10
 80067e4:	4620      	mov	r0, r4
 80067e6:	f000 fc8b 	bl	8007100 <__multadd>
 80067ea:	4683      	mov	fp, r0
 80067ec:	e7ea      	b.n	80067c4 <_dtoa_r+0xb34>
 80067ee:	bf00      	nop
 80067f0:	0800854c 	.word	0x0800854c
 80067f4:	080085c8 	.word	0x080085c8

080067f8 <std>:
 80067f8:	2300      	movs	r3, #0
 80067fa:	b510      	push	{r4, lr}
 80067fc:	4604      	mov	r4, r0
 80067fe:	e9c0 3300 	strd	r3, r3, [r0]
 8006802:	6083      	str	r3, [r0, #8]
 8006804:	8181      	strh	r1, [r0, #12]
 8006806:	6643      	str	r3, [r0, #100]	; 0x64
 8006808:	81c2      	strh	r2, [r0, #14]
 800680a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800680e:	6183      	str	r3, [r0, #24]
 8006810:	4619      	mov	r1, r3
 8006812:	2208      	movs	r2, #8
 8006814:	305c      	adds	r0, #92	; 0x5c
 8006816:	f7fd fc77 	bl	8004108 <memset>
 800681a:	4b05      	ldr	r3, [pc, #20]	; (8006830 <std+0x38>)
 800681c:	6224      	str	r4, [r4, #32]
 800681e:	6263      	str	r3, [r4, #36]	; 0x24
 8006820:	4b04      	ldr	r3, [pc, #16]	; (8006834 <std+0x3c>)
 8006822:	62a3      	str	r3, [r4, #40]	; 0x28
 8006824:	4b04      	ldr	r3, [pc, #16]	; (8006838 <std+0x40>)
 8006826:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006828:	4b04      	ldr	r3, [pc, #16]	; (800683c <std+0x44>)
 800682a:	6323      	str	r3, [r4, #48]	; 0x30
 800682c:	bd10      	pop	{r4, pc}
 800682e:	bf00      	nop
 8006830:	08007f05 	.word	0x08007f05
 8006834:	08007f27 	.word	0x08007f27
 8006838:	08007f5f 	.word	0x08007f5f
 800683c:	08007f83 	.word	0x08007f83

08006840 <_cleanup_r>:
 8006840:	4901      	ldr	r1, [pc, #4]	; (8006848 <_cleanup_r+0x8>)
 8006842:	f000 b885 	b.w	8006950 <_fwalk_reent>
 8006846:	bf00      	nop
 8006848:	0800829d 	.word	0x0800829d

0800684c <__sfmoreglue>:
 800684c:	b570      	push	{r4, r5, r6, lr}
 800684e:	2568      	movs	r5, #104	; 0x68
 8006850:	1e4a      	subs	r2, r1, #1
 8006852:	4355      	muls	r5, r2
 8006854:	460e      	mov	r6, r1
 8006856:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800685a:	f001 f859 	bl	8007910 <_malloc_r>
 800685e:	4604      	mov	r4, r0
 8006860:	b140      	cbz	r0, 8006874 <__sfmoreglue+0x28>
 8006862:	2100      	movs	r1, #0
 8006864:	e9c0 1600 	strd	r1, r6, [r0]
 8006868:	300c      	adds	r0, #12
 800686a:	60a0      	str	r0, [r4, #8]
 800686c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006870:	f7fd fc4a 	bl	8004108 <memset>
 8006874:	4620      	mov	r0, r4
 8006876:	bd70      	pop	{r4, r5, r6, pc}

08006878 <__sinit>:
 8006878:	6983      	ldr	r3, [r0, #24]
 800687a:	b510      	push	{r4, lr}
 800687c:	4604      	mov	r4, r0
 800687e:	bb33      	cbnz	r3, 80068ce <__sinit+0x56>
 8006880:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006884:	6503      	str	r3, [r0, #80]	; 0x50
 8006886:	4b12      	ldr	r3, [pc, #72]	; (80068d0 <__sinit+0x58>)
 8006888:	4a12      	ldr	r2, [pc, #72]	; (80068d4 <__sinit+0x5c>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6282      	str	r2, [r0, #40]	; 0x28
 800688e:	4298      	cmp	r0, r3
 8006890:	bf04      	itt	eq
 8006892:	2301      	moveq	r3, #1
 8006894:	6183      	streq	r3, [r0, #24]
 8006896:	f000 f81f 	bl	80068d8 <__sfp>
 800689a:	6060      	str	r0, [r4, #4]
 800689c:	4620      	mov	r0, r4
 800689e:	f000 f81b 	bl	80068d8 <__sfp>
 80068a2:	60a0      	str	r0, [r4, #8]
 80068a4:	4620      	mov	r0, r4
 80068a6:	f000 f817 	bl	80068d8 <__sfp>
 80068aa:	2200      	movs	r2, #0
 80068ac:	60e0      	str	r0, [r4, #12]
 80068ae:	2104      	movs	r1, #4
 80068b0:	6860      	ldr	r0, [r4, #4]
 80068b2:	f7ff ffa1 	bl	80067f8 <std>
 80068b6:	2201      	movs	r2, #1
 80068b8:	2109      	movs	r1, #9
 80068ba:	68a0      	ldr	r0, [r4, #8]
 80068bc:	f7ff ff9c 	bl	80067f8 <std>
 80068c0:	2202      	movs	r2, #2
 80068c2:	2112      	movs	r1, #18
 80068c4:	68e0      	ldr	r0, [r4, #12]
 80068c6:	f7ff ff97 	bl	80067f8 <std>
 80068ca:	2301      	movs	r3, #1
 80068cc:	61a3      	str	r3, [r4, #24]
 80068ce:	bd10      	pop	{r4, pc}
 80068d0:	08008538 	.word	0x08008538
 80068d4:	08006841 	.word	0x08006841

080068d8 <__sfp>:
 80068d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068da:	4b1b      	ldr	r3, [pc, #108]	; (8006948 <__sfp+0x70>)
 80068dc:	4607      	mov	r7, r0
 80068de:	681e      	ldr	r6, [r3, #0]
 80068e0:	69b3      	ldr	r3, [r6, #24]
 80068e2:	b913      	cbnz	r3, 80068ea <__sfp+0x12>
 80068e4:	4630      	mov	r0, r6
 80068e6:	f7ff ffc7 	bl	8006878 <__sinit>
 80068ea:	3648      	adds	r6, #72	; 0x48
 80068ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80068f0:	3b01      	subs	r3, #1
 80068f2:	d503      	bpl.n	80068fc <__sfp+0x24>
 80068f4:	6833      	ldr	r3, [r6, #0]
 80068f6:	b133      	cbz	r3, 8006906 <__sfp+0x2e>
 80068f8:	6836      	ldr	r6, [r6, #0]
 80068fa:	e7f7      	b.n	80068ec <__sfp+0x14>
 80068fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006900:	b16d      	cbz	r5, 800691e <__sfp+0x46>
 8006902:	3468      	adds	r4, #104	; 0x68
 8006904:	e7f4      	b.n	80068f0 <__sfp+0x18>
 8006906:	2104      	movs	r1, #4
 8006908:	4638      	mov	r0, r7
 800690a:	f7ff ff9f 	bl	800684c <__sfmoreglue>
 800690e:	6030      	str	r0, [r6, #0]
 8006910:	2800      	cmp	r0, #0
 8006912:	d1f1      	bne.n	80068f8 <__sfp+0x20>
 8006914:	230c      	movs	r3, #12
 8006916:	4604      	mov	r4, r0
 8006918:	603b      	str	r3, [r7, #0]
 800691a:	4620      	mov	r0, r4
 800691c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800691e:	4b0b      	ldr	r3, [pc, #44]	; (800694c <__sfp+0x74>)
 8006920:	6665      	str	r5, [r4, #100]	; 0x64
 8006922:	e9c4 5500 	strd	r5, r5, [r4]
 8006926:	60a5      	str	r5, [r4, #8]
 8006928:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800692c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006930:	2208      	movs	r2, #8
 8006932:	4629      	mov	r1, r5
 8006934:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006938:	f7fd fbe6 	bl	8004108 <memset>
 800693c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006940:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006944:	e7e9      	b.n	800691a <__sfp+0x42>
 8006946:	bf00      	nop
 8006948:	08008538 	.word	0x08008538
 800694c:	ffff0001 	.word	0xffff0001

08006950 <_fwalk_reent>:
 8006950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006954:	4680      	mov	r8, r0
 8006956:	4689      	mov	r9, r1
 8006958:	2600      	movs	r6, #0
 800695a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800695e:	b914      	cbnz	r4, 8006966 <_fwalk_reent+0x16>
 8006960:	4630      	mov	r0, r6
 8006962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006966:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800696a:	3f01      	subs	r7, #1
 800696c:	d501      	bpl.n	8006972 <_fwalk_reent+0x22>
 800696e:	6824      	ldr	r4, [r4, #0]
 8006970:	e7f5      	b.n	800695e <_fwalk_reent+0xe>
 8006972:	89ab      	ldrh	r3, [r5, #12]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d907      	bls.n	8006988 <_fwalk_reent+0x38>
 8006978:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800697c:	3301      	adds	r3, #1
 800697e:	d003      	beq.n	8006988 <_fwalk_reent+0x38>
 8006980:	4629      	mov	r1, r5
 8006982:	4640      	mov	r0, r8
 8006984:	47c8      	blx	r9
 8006986:	4306      	orrs	r6, r0
 8006988:	3568      	adds	r5, #104	; 0x68
 800698a:	e7ee      	b.n	800696a <_fwalk_reent+0x1a>

0800698c <rshift>:
 800698c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800698e:	6906      	ldr	r6, [r0, #16]
 8006990:	114b      	asrs	r3, r1, #5
 8006992:	429e      	cmp	r6, r3
 8006994:	f100 0414 	add.w	r4, r0, #20
 8006998:	dd31      	ble.n	80069fe <rshift+0x72>
 800699a:	f011 011f 	ands.w	r1, r1, #31
 800699e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80069a2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80069a6:	d108      	bne.n	80069ba <rshift+0x2e>
 80069a8:	4621      	mov	r1, r4
 80069aa:	42b2      	cmp	r2, r6
 80069ac:	460b      	mov	r3, r1
 80069ae:	d211      	bcs.n	80069d4 <rshift+0x48>
 80069b0:	f852 3b04 	ldr.w	r3, [r2], #4
 80069b4:	f841 3b04 	str.w	r3, [r1], #4
 80069b8:	e7f7      	b.n	80069aa <rshift+0x1e>
 80069ba:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80069be:	4623      	mov	r3, r4
 80069c0:	f1c1 0c20 	rsb	ip, r1, #32
 80069c4:	40cd      	lsrs	r5, r1
 80069c6:	3204      	adds	r2, #4
 80069c8:	42b2      	cmp	r2, r6
 80069ca:	4617      	mov	r7, r2
 80069cc:	d30d      	bcc.n	80069ea <rshift+0x5e>
 80069ce:	601d      	str	r5, [r3, #0]
 80069d0:	b105      	cbz	r5, 80069d4 <rshift+0x48>
 80069d2:	3304      	adds	r3, #4
 80069d4:	42a3      	cmp	r3, r4
 80069d6:	eba3 0204 	sub.w	r2, r3, r4
 80069da:	bf08      	it	eq
 80069dc:	2300      	moveq	r3, #0
 80069de:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80069e2:	6102      	str	r2, [r0, #16]
 80069e4:	bf08      	it	eq
 80069e6:	6143      	streq	r3, [r0, #20]
 80069e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069ea:	683f      	ldr	r7, [r7, #0]
 80069ec:	fa07 f70c 	lsl.w	r7, r7, ip
 80069f0:	433d      	orrs	r5, r7
 80069f2:	f843 5b04 	str.w	r5, [r3], #4
 80069f6:	f852 5b04 	ldr.w	r5, [r2], #4
 80069fa:	40cd      	lsrs	r5, r1
 80069fc:	e7e4      	b.n	80069c8 <rshift+0x3c>
 80069fe:	4623      	mov	r3, r4
 8006a00:	e7e8      	b.n	80069d4 <rshift+0x48>

08006a02 <__hexdig_fun>:
 8006a02:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006a06:	2b09      	cmp	r3, #9
 8006a08:	d802      	bhi.n	8006a10 <__hexdig_fun+0xe>
 8006a0a:	3820      	subs	r0, #32
 8006a0c:	b2c0      	uxtb	r0, r0
 8006a0e:	4770      	bx	lr
 8006a10:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006a14:	2b05      	cmp	r3, #5
 8006a16:	d801      	bhi.n	8006a1c <__hexdig_fun+0x1a>
 8006a18:	3847      	subs	r0, #71	; 0x47
 8006a1a:	e7f7      	b.n	8006a0c <__hexdig_fun+0xa>
 8006a1c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006a20:	2b05      	cmp	r3, #5
 8006a22:	d801      	bhi.n	8006a28 <__hexdig_fun+0x26>
 8006a24:	3827      	subs	r0, #39	; 0x27
 8006a26:	e7f1      	b.n	8006a0c <__hexdig_fun+0xa>
 8006a28:	2000      	movs	r0, #0
 8006a2a:	4770      	bx	lr

08006a2c <__gethex>:
 8006a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a30:	b08b      	sub	sp, #44	; 0x2c
 8006a32:	9002      	str	r0, [sp, #8]
 8006a34:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006a36:	468a      	mov	sl, r1
 8006a38:	4690      	mov	r8, r2
 8006a3a:	9306      	str	r3, [sp, #24]
 8006a3c:	f000 fad1 	bl	8006fe2 <__localeconv_l>
 8006a40:	6803      	ldr	r3, [r0, #0]
 8006a42:	f04f 0b00 	mov.w	fp, #0
 8006a46:	4618      	mov	r0, r3
 8006a48:	9303      	str	r3, [sp, #12]
 8006a4a:	f7f9 fb81 	bl	8000150 <strlen>
 8006a4e:	9b03      	ldr	r3, [sp, #12]
 8006a50:	9001      	str	r0, [sp, #4]
 8006a52:	4403      	add	r3, r0
 8006a54:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006a58:	9307      	str	r3, [sp, #28]
 8006a5a:	f8da 3000 	ldr.w	r3, [sl]
 8006a5e:	3302      	adds	r3, #2
 8006a60:	461f      	mov	r7, r3
 8006a62:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006a66:	2830      	cmp	r0, #48	; 0x30
 8006a68:	d06c      	beq.n	8006b44 <__gethex+0x118>
 8006a6a:	f7ff ffca 	bl	8006a02 <__hexdig_fun>
 8006a6e:	4604      	mov	r4, r0
 8006a70:	2800      	cmp	r0, #0
 8006a72:	d16a      	bne.n	8006b4a <__gethex+0x11e>
 8006a74:	9a01      	ldr	r2, [sp, #4]
 8006a76:	9903      	ldr	r1, [sp, #12]
 8006a78:	4638      	mov	r0, r7
 8006a7a:	f001 fa86 	bl	8007f8a <strncmp>
 8006a7e:	2800      	cmp	r0, #0
 8006a80:	d166      	bne.n	8006b50 <__gethex+0x124>
 8006a82:	9b01      	ldr	r3, [sp, #4]
 8006a84:	5cf8      	ldrb	r0, [r7, r3]
 8006a86:	18fe      	adds	r6, r7, r3
 8006a88:	f7ff ffbb 	bl	8006a02 <__hexdig_fun>
 8006a8c:	2800      	cmp	r0, #0
 8006a8e:	d062      	beq.n	8006b56 <__gethex+0x12a>
 8006a90:	4633      	mov	r3, r6
 8006a92:	7818      	ldrb	r0, [r3, #0]
 8006a94:	461f      	mov	r7, r3
 8006a96:	2830      	cmp	r0, #48	; 0x30
 8006a98:	f103 0301 	add.w	r3, r3, #1
 8006a9c:	d0f9      	beq.n	8006a92 <__gethex+0x66>
 8006a9e:	f7ff ffb0 	bl	8006a02 <__hexdig_fun>
 8006aa2:	fab0 f580 	clz	r5, r0
 8006aa6:	4634      	mov	r4, r6
 8006aa8:	f04f 0b01 	mov.w	fp, #1
 8006aac:	096d      	lsrs	r5, r5, #5
 8006aae:	463a      	mov	r2, r7
 8006ab0:	4616      	mov	r6, r2
 8006ab2:	7830      	ldrb	r0, [r6, #0]
 8006ab4:	3201      	adds	r2, #1
 8006ab6:	f7ff ffa4 	bl	8006a02 <__hexdig_fun>
 8006aba:	2800      	cmp	r0, #0
 8006abc:	d1f8      	bne.n	8006ab0 <__gethex+0x84>
 8006abe:	9a01      	ldr	r2, [sp, #4]
 8006ac0:	9903      	ldr	r1, [sp, #12]
 8006ac2:	4630      	mov	r0, r6
 8006ac4:	f001 fa61 	bl	8007f8a <strncmp>
 8006ac8:	b950      	cbnz	r0, 8006ae0 <__gethex+0xb4>
 8006aca:	b954      	cbnz	r4, 8006ae2 <__gethex+0xb6>
 8006acc:	9b01      	ldr	r3, [sp, #4]
 8006ace:	18f4      	adds	r4, r6, r3
 8006ad0:	4622      	mov	r2, r4
 8006ad2:	4616      	mov	r6, r2
 8006ad4:	7830      	ldrb	r0, [r6, #0]
 8006ad6:	3201      	adds	r2, #1
 8006ad8:	f7ff ff93 	bl	8006a02 <__hexdig_fun>
 8006adc:	2800      	cmp	r0, #0
 8006ade:	d1f8      	bne.n	8006ad2 <__gethex+0xa6>
 8006ae0:	b10c      	cbz	r4, 8006ae6 <__gethex+0xba>
 8006ae2:	1ba4      	subs	r4, r4, r6
 8006ae4:	00a4      	lsls	r4, r4, #2
 8006ae6:	7833      	ldrb	r3, [r6, #0]
 8006ae8:	2b50      	cmp	r3, #80	; 0x50
 8006aea:	d001      	beq.n	8006af0 <__gethex+0xc4>
 8006aec:	2b70      	cmp	r3, #112	; 0x70
 8006aee:	d140      	bne.n	8006b72 <__gethex+0x146>
 8006af0:	7873      	ldrb	r3, [r6, #1]
 8006af2:	2b2b      	cmp	r3, #43	; 0x2b
 8006af4:	d031      	beq.n	8006b5a <__gethex+0x12e>
 8006af6:	2b2d      	cmp	r3, #45	; 0x2d
 8006af8:	d033      	beq.n	8006b62 <__gethex+0x136>
 8006afa:	f04f 0900 	mov.w	r9, #0
 8006afe:	1c71      	adds	r1, r6, #1
 8006b00:	7808      	ldrb	r0, [r1, #0]
 8006b02:	f7ff ff7e 	bl	8006a02 <__hexdig_fun>
 8006b06:	1e43      	subs	r3, r0, #1
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b18      	cmp	r3, #24
 8006b0c:	d831      	bhi.n	8006b72 <__gethex+0x146>
 8006b0e:	f1a0 0210 	sub.w	r2, r0, #16
 8006b12:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006b16:	f7ff ff74 	bl	8006a02 <__hexdig_fun>
 8006b1a:	1e43      	subs	r3, r0, #1
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	2b18      	cmp	r3, #24
 8006b20:	d922      	bls.n	8006b68 <__gethex+0x13c>
 8006b22:	f1b9 0f00 	cmp.w	r9, #0
 8006b26:	d000      	beq.n	8006b2a <__gethex+0xfe>
 8006b28:	4252      	negs	r2, r2
 8006b2a:	4414      	add	r4, r2
 8006b2c:	f8ca 1000 	str.w	r1, [sl]
 8006b30:	b30d      	cbz	r5, 8006b76 <__gethex+0x14a>
 8006b32:	f1bb 0f00 	cmp.w	fp, #0
 8006b36:	bf0c      	ite	eq
 8006b38:	2706      	moveq	r7, #6
 8006b3a:	2700      	movne	r7, #0
 8006b3c:	4638      	mov	r0, r7
 8006b3e:	b00b      	add	sp, #44	; 0x2c
 8006b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b44:	f10b 0b01 	add.w	fp, fp, #1
 8006b48:	e78a      	b.n	8006a60 <__gethex+0x34>
 8006b4a:	2500      	movs	r5, #0
 8006b4c:	462c      	mov	r4, r5
 8006b4e:	e7ae      	b.n	8006aae <__gethex+0x82>
 8006b50:	463e      	mov	r6, r7
 8006b52:	2501      	movs	r5, #1
 8006b54:	e7c7      	b.n	8006ae6 <__gethex+0xba>
 8006b56:	4604      	mov	r4, r0
 8006b58:	e7fb      	b.n	8006b52 <__gethex+0x126>
 8006b5a:	f04f 0900 	mov.w	r9, #0
 8006b5e:	1cb1      	adds	r1, r6, #2
 8006b60:	e7ce      	b.n	8006b00 <__gethex+0xd4>
 8006b62:	f04f 0901 	mov.w	r9, #1
 8006b66:	e7fa      	b.n	8006b5e <__gethex+0x132>
 8006b68:	230a      	movs	r3, #10
 8006b6a:	fb03 0202 	mla	r2, r3, r2, r0
 8006b6e:	3a10      	subs	r2, #16
 8006b70:	e7cf      	b.n	8006b12 <__gethex+0xe6>
 8006b72:	4631      	mov	r1, r6
 8006b74:	e7da      	b.n	8006b2c <__gethex+0x100>
 8006b76:	4629      	mov	r1, r5
 8006b78:	1bf3      	subs	r3, r6, r7
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	2b07      	cmp	r3, #7
 8006b7e:	dc49      	bgt.n	8006c14 <__gethex+0x1e8>
 8006b80:	9802      	ldr	r0, [sp, #8]
 8006b82:	f000 fa72 	bl	800706a <_Balloc>
 8006b86:	f04f 0b00 	mov.w	fp, #0
 8006b8a:	4605      	mov	r5, r0
 8006b8c:	46da      	mov	sl, fp
 8006b8e:	9b01      	ldr	r3, [sp, #4]
 8006b90:	f100 0914 	add.w	r9, r0, #20
 8006b94:	f1c3 0301 	rsb	r3, r3, #1
 8006b98:	f8cd 9010 	str.w	r9, [sp, #16]
 8006b9c:	9308      	str	r3, [sp, #32]
 8006b9e:	42b7      	cmp	r7, r6
 8006ba0:	d33b      	bcc.n	8006c1a <__gethex+0x1ee>
 8006ba2:	9804      	ldr	r0, [sp, #16]
 8006ba4:	f840 ab04 	str.w	sl, [r0], #4
 8006ba8:	eba0 0009 	sub.w	r0, r0, r9
 8006bac:	1080      	asrs	r0, r0, #2
 8006bae:	6128      	str	r0, [r5, #16]
 8006bb0:	0147      	lsls	r7, r0, #5
 8006bb2:	4650      	mov	r0, sl
 8006bb4:	f000 fb1d 	bl	80071f2 <__hi0bits>
 8006bb8:	f8d8 6000 	ldr.w	r6, [r8]
 8006bbc:	1a3f      	subs	r7, r7, r0
 8006bbe:	42b7      	cmp	r7, r6
 8006bc0:	dd64      	ble.n	8006c8c <__gethex+0x260>
 8006bc2:	1bbf      	subs	r7, r7, r6
 8006bc4:	4639      	mov	r1, r7
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	f000 fe27 	bl	800781a <__any_on>
 8006bcc:	4682      	mov	sl, r0
 8006bce:	b178      	cbz	r0, 8006bf0 <__gethex+0x1c4>
 8006bd0:	f04f 0a01 	mov.w	sl, #1
 8006bd4:	1e7b      	subs	r3, r7, #1
 8006bd6:	1159      	asrs	r1, r3, #5
 8006bd8:	f003 021f 	and.w	r2, r3, #31
 8006bdc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006be0:	fa0a f202 	lsl.w	r2, sl, r2
 8006be4:	420a      	tst	r2, r1
 8006be6:	d003      	beq.n	8006bf0 <__gethex+0x1c4>
 8006be8:	4553      	cmp	r3, sl
 8006bea:	dc46      	bgt.n	8006c7a <__gethex+0x24e>
 8006bec:	f04f 0a02 	mov.w	sl, #2
 8006bf0:	4639      	mov	r1, r7
 8006bf2:	4628      	mov	r0, r5
 8006bf4:	f7ff feca 	bl	800698c <rshift>
 8006bf8:	443c      	add	r4, r7
 8006bfa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006bfe:	42a3      	cmp	r3, r4
 8006c00:	da52      	bge.n	8006ca8 <__gethex+0x27c>
 8006c02:	4629      	mov	r1, r5
 8006c04:	9802      	ldr	r0, [sp, #8]
 8006c06:	f000 fa64 	bl	80070d2 <_Bfree>
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006c0e:	27a3      	movs	r7, #163	; 0xa3
 8006c10:	6013      	str	r3, [r2, #0]
 8006c12:	e793      	b.n	8006b3c <__gethex+0x110>
 8006c14:	3101      	adds	r1, #1
 8006c16:	105b      	asrs	r3, r3, #1
 8006c18:	e7b0      	b.n	8006b7c <__gethex+0x150>
 8006c1a:	1e73      	subs	r3, r6, #1
 8006c1c:	9305      	str	r3, [sp, #20]
 8006c1e:	9a07      	ldr	r2, [sp, #28]
 8006c20:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d018      	beq.n	8006c5a <__gethex+0x22e>
 8006c28:	f1bb 0f20 	cmp.w	fp, #32
 8006c2c:	d107      	bne.n	8006c3e <__gethex+0x212>
 8006c2e:	9b04      	ldr	r3, [sp, #16]
 8006c30:	f8c3 a000 	str.w	sl, [r3]
 8006c34:	f04f 0a00 	mov.w	sl, #0
 8006c38:	46d3      	mov	fp, sl
 8006c3a:	3304      	adds	r3, #4
 8006c3c:	9304      	str	r3, [sp, #16]
 8006c3e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006c42:	f7ff fede 	bl	8006a02 <__hexdig_fun>
 8006c46:	f000 000f 	and.w	r0, r0, #15
 8006c4a:	fa00 f00b 	lsl.w	r0, r0, fp
 8006c4e:	ea4a 0a00 	orr.w	sl, sl, r0
 8006c52:	f10b 0b04 	add.w	fp, fp, #4
 8006c56:	9b05      	ldr	r3, [sp, #20]
 8006c58:	e00d      	b.n	8006c76 <__gethex+0x24a>
 8006c5a:	9b05      	ldr	r3, [sp, #20]
 8006c5c:	9a08      	ldr	r2, [sp, #32]
 8006c5e:	4413      	add	r3, r2
 8006c60:	42bb      	cmp	r3, r7
 8006c62:	d3e1      	bcc.n	8006c28 <__gethex+0x1fc>
 8006c64:	4618      	mov	r0, r3
 8006c66:	9a01      	ldr	r2, [sp, #4]
 8006c68:	9903      	ldr	r1, [sp, #12]
 8006c6a:	9309      	str	r3, [sp, #36]	; 0x24
 8006c6c:	f001 f98d 	bl	8007f8a <strncmp>
 8006c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c72:	2800      	cmp	r0, #0
 8006c74:	d1d8      	bne.n	8006c28 <__gethex+0x1fc>
 8006c76:	461e      	mov	r6, r3
 8006c78:	e791      	b.n	8006b9e <__gethex+0x172>
 8006c7a:	1eb9      	subs	r1, r7, #2
 8006c7c:	4628      	mov	r0, r5
 8006c7e:	f000 fdcc 	bl	800781a <__any_on>
 8006c82:	2800      	cmp	r0, #0
 8006c84:	d0b2      	beq.n	8006bec <__gethex+0x1c0>
 8006c86:	f04f 0a03 	mov.w	sl, #3
 8006c8a:	e7b1      	b.n	8006bf0 <__gethex+0x1c4>
 8006c8c:	da09      	bge.n	8006ca2 <__gethex+0x276>
 8006c8e:	1bf7      	subs	r7, r6, r7
 8006c90:	4629      	mov	r1, r5
 8006c92:	463a      	mov	r2, r7
 8006c94:	9802      	ldr	r0, [sp, #8]
 8006c96:	f000 fbe7 	bl	8007468 <__lshift>
 8006c9a:	4605      	mov	r5, r0
 8006c9c:	1be4      	subs	r4, r4, r7
 8006c9e:	f100 0914 	add.w	r9, r0, #20
 8006ca2:	f04f 0a00 	mov.w	sl, #0
 8006ca6:	e7a8      	b.n	8006bfa <__gethex+0x1ce>
 8006ca8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006cac:	42a0      	cmp	r0, r4
 8006cae:	dd6b      	ble.n	8006d88 <__gethex+0x35c>
 8006cb0:	1b04      	subs	r4, r0, r4
 8006cb2:	42a6      	cmp	r6, r4
 8006cb4:	dc2e      	bgt.n	8006d14 <__gethex+0x2e8>
 8006cb6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d022      	beq.n	8006d04 <__gethex+0x2d8>
 8006cbe:	2b03      	cmp	r3, #3
 8006cc0:	d024      	beq.n	8006d0c <__gethex+0x2e0>
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d115      	bne.n	8006cf2 <__gethex+0x2c6>
 8006cc6:	42a6      	cmp	r6, r4
 8006cc8:	d113      	bne.n	8006cf2 <__gethex+0x2c6>
 8006cca:	2e01      	cmp	r6, #1
 8006ccc:	dc0b      	bgt.n	8006ce6 <__gethex+0x2ba>
 8006cce:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006cd2:	9a06      	ldr	r2, [sp, #24]
 8006cd4:	2762      	movs	r7, #98	; 0x62
 8006cd6:	6013      	str	r3, [r2, #0]
 8006cd8:	2301      	movs	r3, #1
 8006cda:	612b      	str	r3, [r5, #16]
 8006cdc:	f8c9 3000 	str.w	r3, [r9]
 8006ce0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006ce2:	601d      	str	r5, [r3, #0]
 8006ce4:	e72a      	b.n	8006b3c <__gethex+0x110>
 8006ce6:	1e71      	subs	r1, r6, #1
 8006ce8:	4628      	mov	r0, r5
 8006cea:	f000 fd96 	bl	800781a <__any_on>
 8006cee:	2800      	cmp	r0, #0
 8006cf0:	d1ed      	bne.n	8006cce <__gethex+0x2a2>
 8006cf2:	4629      	mov	r1, r5
 8006cf4:	9802      	ldr	r0, [sp, #8]
 8006cf6:	f000 f9ec 	bl	80070d2 <_Bfree>
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006cfe:	2750      	movs	r7, #80	; 0x50
 8006d00:	6013      	str	r3, [r2, #0]
 8006d02:	e71b      	b.n	8006b3c <__gethex+0x110>
 8006d04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d0e1      	beq.n	8006cce <__gethex+0x2a2>
 8006d0a:	e7f2      	b.n	8006cf2 <__gethex+0x2c6>
 8006d0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d1dd      	bne.n	8006cce <__gethex+0x2a2>
 8006d12:	e7ee      	b.n	8006cf2 <__gethex+0x2c6>
 8006d14:	1e67      	subs	r7, r4, #1
 8006d16:	f1ba 0f00 	cmp.w	sl, #0
 8006d1a:	d132      	bne.n	8006d82 <__gethex+0x356>
 8006d1c:	b127      	cbz	r7, 8006d28 <__gethex+0x2fc>
 8006d1e:	4639      	mov	r1, r7
 8006d20:	4628      	mov	r0, r5
 8006d22:	f000 fd7a 	bl	800781a <__any_on>
 8006d26:	4682      	mov	sl, r0
 8006d28:	2301      	movs	r3, #1
 8006d2a:	117a      	asrs	r2, r7, #5
 8006d2c:	f007 071f 	and.w	r7, r7, #31
 8006d30:	fa03 f707 	lsl.w	r7, r3, r7
 8006d34:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8006d38:	4621      	mov	r1, r4
 8006d3a:	421f      	tst	r7, r3
 8006d3c:	f04f 0702 	mov.w	r7, #2
 8006d40:	4628      	mov	r0, r5
 8006d42:	bf18      	it	ne
 8006d44:	f04a 0a02 	orrne.w	sl, sl, #2
 8006d48:	1b36      	subs	r6, r6, r4
 8006d4a:	f7ff fe1f 	bl	800698c <rshift>
 8006d4e:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8006d52:	f1ba 0f00 	cmp.w	sl, #0
 8006d56:	d048      	beq.n	8006dea <__gethex+0x3be>
 8006d58:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d015      	beq.n	8006d8c <__gethex+0x360>
 8006d60:	2b03      	cmp	r3, #3
 8006d62:	d017      	beq.n	8006d94 <__gethex+0x368>
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d109      	bne.n	8006d7c <__gethex+0x350>
 8006d68:	f01a 0f02 	tst.w	sl, #2
 8006d6c:	d006      	beq.n	8006d7c <__gethex+0x350>
 8006d6e:	f8d9 3000 	ldr.w	r3, [r9]
 8006d72:	ea4a 0a03 	orr.w	sl, sl, r3
 8006d76:	f01a 0f01 	tst.w	sl, #1
 8006d7a:	d10e      	bne.n	8006d9a <__gethex+0x36e>
 8006d7c:	f047 0710 	orr.w	r7, r7, #16
 8006d80:	e033      	b.n	8006dea <__gethex+0x3be>
 8006d82:	f04f 0a01 	mov.w	sl, #1
 8006d86:	e7cf      	b.n	8006d28 <__gethex+0x2fc>
 8006d88:	2701      	movs	r7, #1
 8006d8a:	e7e2      	b.n	8006d52 <__gethex+0x326>
 8006d8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d8e:	f1c3 0301 	rsb	r3, r3, #1
 8006d92:	9315      	str	r3, [sp, #84]	; 0x54
 8006d94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d0f0      	beq.n	8006d7c <__gethex+0x350>
 8006d9a:	f04f 0c00 	mov.w	ip, #0
 8006d9e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8006da2:	f105 0314 	add.w	r3, r5, #20
 8006da6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8006daa:	eb03 010a 	add.w	r1, r3, sl
 8006dae:	4618      	mov	r0, r3
 8006db0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006db4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006db8:	d01c      	beq.n	8006df4 <__gethex+0x3c8>
 8006dba:	3201      	adds	r2, #1
 8006dbc:	6002      	str	r2, [r0, #0]
 8006dbe:	2f02      	cmp	r7, #2
 8006dc0:	f105 0314 	add.w	r3, r5, #20
 8006dc4:	d138      	bne.n	8006e38 <__gethex+0x40c>
 8006dc6:	f8d8 2000 	ldr.w	r2, [r8]
 8006dca:	3a01      	subs	r2, #1
 8006dcc:	42b2      	cmp	r2, r6
 8006dce:	d10a      	bne.n	8006de6 <__gethex+0x3ba>
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	1171      	asrs	r1, r6, #5
 8006dd4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006dd8:	f006 061f 	and.w	r6, r6, #31
 8006ddc:	fa02 f606 	lsl.w	r6, r2, r6
 8006de0:	421e      	tst	r6, r3
 8006de2:	bf18      	it	ne
 8006de4:	4617      	movne	r7, r2
 8006de6:	f047 0720 	orr.w	r7, r7, #32
 8006dea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006dec:	601d      	str	r5, [r3, #0]
 8006dee:	9b06      	ldr	r3, [sp, #24]
 8006df0:	601c      	str	r4, [r3, #0]
 8006df2:	e6a3      	b.n	8006b3c <__gethex+0x110>
 8006df4:	4299      	cmp	r1, r3
 8006df6:	f843 cc04 	str.w	ip, [r3, #-4]
 8006dfa:	d8d8      	bhi.n	8006dae <__gethex+0x382>
 8006dfc:	68ab      	ldr	r3, [r5, #8]
 8006dfe:	4599      	cmp	r9, r3
 8006e00:	db12      	blt.n	8006e28 <__gethex+0x3fc>
 8006e02:	6869      	ldr	r1, [r5, #4]
 8006e04:	9802      	ldr	r0, [sp, #8]
 8006e06:	3101      	adds	r1, #1
 8006e08:	f000 f92f 	bl	800706a <_Balloc>
 8006e0c:	4683      	mov	fp, r0
 8006e0e:	692a      	ldr	r2, [r5, #16]
 8006e10:	f105 010c 	add.w	r1, r5, #12
 8006e14:	3202      	adds	r2, #2
 8006e16:	0092      	lsls	r2, r2, #2
 8006e18:	300c      	adds	r0, #12
 8006e1a:	f000 f91b 	bl	8007054 <memcpy>
 8006e1e:	4629      	mov	r1, r5
 8006e20:	9802      	ldr	r0, [sp, #8]
 8006e22:	f000 f956 	bl	80070d2 <_Bfree>
 8006e26:	465d      	mov	r5, fp
 8006e28:	692b      	ldr	r3, [r5, #16]
 8006e2a:	1c5a      	adds	r2, r3, #1
 8006e2c:	612a      	str	r2, [r5, #16]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006e34:	615a      	str	r2, [r3, #20]
 8006e36:	e7c2      	b.n	8006dbe <__gethex+0x392>
 8006e38:	692a      	ldr	r2, [r5, #16]
 8006e3a:	454a      	cmp	r2, r9
 8006e3c:	dd0b      	ble.n	8006e56 <__gethex+0x42a>
 8006e3e:	2101      	movs	r1, #1
 8006e40:	4628      	mov	r0, r5
 8006e42:	f7ff fda3 	bl	800698c <rshift>
 8006e46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006e4a:	3401      	adds	r4, #1
 8006e4c:	42a3      	cmp	r3, r4
 8006e4e:	f6ff aed8 	blt.w	8006c02 <__gethex+0x1d6>
 8006e52:	2701      	movs	r7, #1
 8006e54:	e7c7      	b.n	8006de6 <__gethex+0x3ba>
 8006e56:	f016 061f 	ands.w	r6, r6, #31
 8006e5a:	d0fa      	beq.n	8006e52 <__gethex+0x426>
 8006e5c:	449a      	add	sl, r3
 8006e5e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006e62:	f000 f9c6 	bl	80071f2 <__hi0bits>
 8006e66:	f1c6 0620 	rsb	r6, r6, #32
 8006e6a:	42b0      	cmp	r0, r6
 8006e6c:	dbe7      	blt.n	8006e3e <__gethex+0x412>
 8006e6e:	e7f0      	b.n	8006e52 <__gethex+0x426>

08006e70 <L_shift>:
 8006e70:	f1c2 0208 	rsb	r2, r2, #8
 8006e74:	0092      	lsls	r2, r2, #2
 8006e76:	b570      	push	{r4, r5, r6, lr}
 8006e78:	f1c2 0620 	rsb	r6, r2, #32
 8006e7c:	6843      	ldr	r3, [r0, #4]
 8006e7e:	6804      	ldr	r4, [r0, #0]
 8006e80:	fa03 f506 	lsl.w	r5, r3, r6
 8006e84:	432c      	orrs	r4, r5
 8006e86:	40d3      	lsrs	r3, r2
 8006e88:	6004      	str	r4, [r0, #0]
 8006e8a:	f840 3f04 	str.w	r3, [r0, #4]!
 8006e8e:	4288      	cmp	r0, r1
 8006e90:	d3f4      	bcc.n	8006e7c <L_shift+0xc>
 8006e92:	bd70      	pop	{r4, r5, r6, pc}

08006e94 <__match>:
 8006e94:	b530      	push	{r4, r5, lr}
 8006e96:	6803      	ldr	r3, [r0, #0]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e9e:	b914      	cbnz	r4, 8006ea6 <__match+0x12>
 8006ea0:	6003      	str	r3, [r0, #0]
 8006ea2:	2001      	movs	r0, #1
 8006ea4:	bd30      	pop	{r4, r5, pc}
 8006ea6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006eaa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006eae:	2d19      	cmp	r5, #25
 8006eb0:	bf98      	it	ls
 8006eb2:	3220      	addls	r2, #32
 8006eb4:	42a2      	cmp	r2, r4
 8006eb6:	d0f0      	beq.n	8006e9a <__match+0x6>
 8006eb8:	2000      	movs	r0, #0
 8006eba:	e7f3      	b.n	8006ea4 <__match+0x10>

08006ebc <__hexnan>:
 8006ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec0:	2500      	movs	r5, #0
 8006ec2:	680b      	ldr	r3, [r1, #0]
 8006ec4:	4682      	mov	sl, r0
 8006ec6:	115f      	asrs	r7, r3, #5
 8006ec8:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8006ecc:	f013 031f 	ands.w	r3, r3, #31
 8006ed0:	bf18      	it	ne
 8006ed2:	3704      	addne	r7, #4
 8006ed4:	1f3e      	subs	r6, r7, #4
 8006ed6:	4690      	mov	r8, r2
 8006ed8:	46b1      	mov	r9, r6
 8006eda:	4634      	mov	r4, r6
 8006edc:	46ab      	mov	fp, r5
 8006ede:	b087      	sub	sp, #28
 8006ee0:	6801      	ldr	r1, [r0, #0]
 8006ee2:	9301      	str	r3, [sp, #4]
 8006ee4:	f847 5c04 	str.w	r5, [r7, #-4]
 8006ee8:	9502      	str	r5, [sp, #8]
 8006eea:	784a      	ldrb	r2, [r1, #1]
 8006eec:	1c4b      	adds	r3, r1, #1
 8006eee:	9303      	str	r3, [sp, #12]
 8006ef0:	b342      	cbz	r2, 8006f44 <__hexnan+0x88>
 8006ef2:	4610      	mov	r0, r2
 8006ef4:	9105      	str	r1, [sp, #20]
 8006ef6:	9204      	str	r2, [sp, #16]
 8006ef8:	f7ff fd83 	bl	8006a02 <__hexdig_fun>
 8006efc:	2800      	cmp	r0, #0
 8006efe:	d143      	bne.n	8006f88 <__hexnan+0xcc>
 8006f00:	9a04      	ldr	r2, [sp, #16]
 8006f02:	9905      	ldr	r1, [sp, #20]
 8006f04:	2a20      	cmp	r2, #32
 8006f06:	d818      	bhi.n	8006f3a <__hexnan+0x7e>
 8006f08:	9b02      	ldr	r3, [sp, #8]
 8006f0a:	459b      	cmp	fp, r3
 8006f0c:	dd13      	ble.n	8006f36 <__hexnan+0x7a>
 8006f0e:	454c      	cmp	r4, r9
 8006f10:	d206      	bcs.n	8006f20 <__hexnan+0x64>
 8006f12:	2d07      	cmp	r5, #7
 8006f14:	dc04      	bgt.n	8006f20 <__hexnan+0x64>
 8006f16:	462a      	mov	r2, r5
 8006f18:	4649      	mov	r1, r9
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	f7ff ffa8 	bl	8006e70 <L_shift>
 8006f20:	4544      	cmp	r4, r8
 8006f22:	d944      	bls.n	8006fae <__hexnan+0xf2>
 8006f24:	2300      	movs	r3, #0
 8006f26:	f1a4 0904 	sub.w	r9, r4, #4
 8006f2a:	f844 3c04 	str.w	r3, [r4, #-4]
 8006f2e:	461d      	mov	r5, r3
 8006f30:	464c      	mov	r4, r9
 8006f32:	f8cd b008 	str.w	fp, [sp, #8]
 8006f36:	9903      	ldr	r1, [sp, #12]
 8006f38:	e7d7      	b.n	8006eea <__hexnan+0x2e>
 8006f3a:	2a29      	cmp	r2, #41	; 0x29
 8006f3c:	d14a      	bne.n	8006fd4 <__hexnan+0x118>
 8006f3e:	3102      	adds	r1, #2
 8006f40:	f8ca 1000 	str.w	r1, [sl]
 8006f44:	f1bb 0f00 	cmp.w	fp, #0
 8006f48:	d044      	beq.n	8006fd4 <__hexnan+0x118>
 8006f4a:	454c      	cmp	r4, r9
 8006f4c:	d206      	bcs.n	8006f5c <__hexnan+0xa0>
 8006f4e:	2d07      	cmp	r5, #7
 8006f50:	dc04      	bgt.n	8006f5c <__hexnan+0xa0>
 8006f52:	462a      	mov	r2, r5
 8006f54:	4649      	mov	r1, r9
 8006f56:	4620      	mov	r0, r4
 8006f58:	f7ff ff8a 	bl	8006e70 <L_shift>
 8006f5c:	4544      	cmp	r4, r8
 8006f5e:	d928      	bls.n	8006fb2 <__hexnan+0xf6>
 8006f60:	4643      	mov	r3, r8
 8006f62:	f854 2b04 	ldr.w	r2, [r4], #4
 8006f66:	42a6      	cmp	r6, r4
 8006f68:	f843 2b04 	str.w	r2, [r3], #4
 8006f6c:	d2f9      	bcs.n	8006f62 <__hexnan+0xa6>
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f843 2b04 	str.w	r2, [r3], #4
 8006f74:	429e      	cmp	r6, r3
 8006f76:	d2fb      	bcs.n	8006f70 <__hexnan+0xb4>
 8006f78:	6833      	ldr	r3, [r6, #0]
 8006f7a:	b91b      	cbnz	r3, 8006f84 <__hexnan+0xc8>
 8006f7c:	4546      	cmp	r6, r8
 8006f7e:	d127      	bne.n	8006fd0 <__hexnan+0x114>
 8006f80:	2301      	movs	r3, #1
 8006f82:	6033      	str	r3, [r6, #0]
 8006f84:	2005      	movs	r0, #5
 8006f86:	e026      	b.n	8006fd6 <__hexnan+0x11a>
 8006f88:	3501      	adds	r5, #1
 8006f8a:	2d08      	cmp	r5, #8
 8006f8c:	f10b 0b01 	add.w	fp, fp, #1
 8006f90:	dd06      	ble.n	8006fa0 <__hexnan+0xe4>
 8006f92:	4544      	cmp	r4, r8
 8006f94:	d9cf      	bls.n	8006f36 <__hexnan+0x7a>
 8006f96:	2300      	movs	r3, #0
 8006f98:	2501      	movs	r5, #1
 8006f9a:	f844 3c04 	str.w	r3, [r4, #-4]
 8006f9e:	3c04      	subs	r4, #4
 8006fa0:	6822      	ldr	r2, [r4, #0]
 8006fa2:	f000 000f 	and.w	r0, r0, #15
 8006fa6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8006faa:	6020      	str	r0, [r4, #0]
 8006fac:	e7c3      	b.n	8006f36 <__hexnan+0x7a>
 8006fae:	2508      	movs	r5, #8
 8006fb0:	e7c1      	b.n	8006f36 <__hexnan+0x7a>
 8006fb2:	9b01      	ldr	r3, [sp, #4]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d0df      	beq.n	8006f78 <__hexnan+0xbc>
 8006fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8006fbc:	f1c3 0320 	rsb	r3, r3, #32
 8006fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8006fc4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8006fc8:	401a      	ands	r2, r3
 8006fca:	f847 2c04 	str.w	r2, [r7, #-4]
 8006fce:	e7d3      	b.n	8006f78 <__hexnan+0xbc>
 8006fd0:	3e04      	subs	r6, #4
 8006fd2:	e7d1      	b.n	8006f78 <__hexnan+0xbc>
 8006fd4:	2004      	movs	r0, #4
 8006fd6:	b007      	add	sp, #28
 8006fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006fdc <__locale_ctype_ptr_l>:
 8006fdc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006fe0:	4770      	bx	lr

08006fe2 <__localeconv_l>:
 8006fe2:	30f0      	adds	r0, #240	; 0xf0
 8006fe4:	4770      	bx	lr
	...

08006fe8 <_localeconv_r>:
 8006fe8:	4b04      	ldr	r3, [pc, #16]	; (8006ffc <_localeconv_r+0x14>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6a18      	ldr	r0, [r3, #32]
 8006fee:	4b04      	ldr	r3, [pc, #16]	; (8007000 <_localeconv_r+0x18>)
 8006ff0:	2800      	cmp	r0, #0
 8006ff2:	bf08      	it	eq
 8006ff4:	4618      	moveq	r0, r3
 8006ff6:	30f0      	adds	r0, #240	; 0xf0
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	20000014 	.word	0x20000014
 8007000:	20000078 	.word	0x20000078

08007004 <malloc>:
 8007004:	4b02      	ldr	r3, [pc, #8]	; (8007010 <malloc+0xc>)
 8007006:	4601      	mov	r1, r0
 8007008:	6818      	ldr	r0, [r3, #0]
 800700a:	f000 bc81 	b.w	8007910 <_malloc_r>
 800700e:	bf00      	nop
 8007010:	20000014 	.word	0x20000014

08007014 <__ascii_mbtowc>:
 8007014:	b082      	sub	sp, #8
 8007016:	b901      	cbnz	r1, 800701a <__ascii_mbtowc+0x6>
 8007018:	a901      	add	r1, sp, #4
 800701a:	b142      	cbz	r2, 800702e <__ascii_mbtowc+0x1a>
 800701c:	b14b      	cbz	r3, 8007032 <__ascii_mbtowc+0x1e>
 800701e:	7813      	ldrb	r3, [r2, #0]
 8007020:	600b      	str	r3, [r1, #0]
 8007022:	7812      	ldrb	r2, [r2, #0]
 8007024:	1c10      	adds	r0, r2, #0
 8007026:	bf18      	it	ne
 8007028:	2001      	movne	r0, #1
 800702a:	b002      	add	sp, #8
 800702c:	4770      	bx	lr
 800702e:	4610      	mov	r0, r2
 8007030:	e7fb      	b.n	800702a <__ascii_mbtowc+0x16>
 8007032:	f06f 0001 	mvn.w	r0, #1
 8007036:	e7f8      	b.n	800702a <__ascii_mbtowc+0x16>

08007038 <memchr>:
 8007038:	b510      	push	{r4, lr}
 800703a:	b2c9      	uxtb	r1, r1
 800703c:	4402      	add	r2, r0
 800703e:	4290      	cmp	r0, r2
 8007040:	4603      	mov	r3, r0
 8007042:	d101      	bne.n	8007048 <memchr+0x10>
 8007044:	2300      	movs	r3, #0
 8007046:	e003      	b.n	8007050 <memchr+0x18>
 8007048:	781c      	ldrb	r4, [r3, #0]
 800704a:	3001      	adds	r0, #1
 800704c:	428c      	cmp	r4, r1
 800704e:	d1f6      	bne.n	800703e <memchr+0x6>
 8007050:	4618      	mov	r0, r3
 8007052:	bd10      	pop	{r4, pc}

08007054 <memcpy>:
 8007054:	b510      	push	{r4, lr}
 8007056:	1e43      	subs	r3, r0, #1
 8007058:	440a      	add	r2, r1
 800705a:	4291      	cmp	r1, r2
 800705c:	d100      	bne.n	8007060 <memcpy+0xc>
 800705e:	bd10      	pop	{r4, pc}
 8007060:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007064:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007068:	e7f7      	b.n	800705a <memcpy+0x6>

0800706a <_Balloc>:
 800706a:	b570      	push	{r4, r5, r6, lr}
 800706c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800706e:	4604      	mov	r4, r0
 8007070:	460e      	mov	r6, r1
 8007072:	b93d      	cbnz	r5, 8007084 <_Balloc+0x1a>
 8007074:	2010      	movs	r0, #16
 8007076:	f7ff ffc5 	bl	8007004 <malloc>
 800707a:	6260      	str	r0, [r4, #36]	; 0x24
 800707c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007080:	6005      	str	r5, [r0, #0]
 8007082:	60c5      	str	r5, [r0, #12]
 8007084:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007086:	68eb      	ldr	r3, [r5, #12]
 8007088:	b183      	cbz	r3, 80070ac <_Balloc+0x42>
 800708a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007092:	b9b8      	cbnz	r0, 80070c4 <_Balloc+0x5a>
 8007094:	2101      	movs	r1, #1
 8007096:	fa01 f506 	lsl.w	r5, r1, r6
 800709a:	1d6a      	adds	r2, r5, #5
 800709c:	0092      	lsls	r2, r2, #2
 800709e:	4620      	mov	r0, r4
 80070a0:	f000 fbdc 	bl	800785c <_calloc_r>
 80070a4:	b160      	cbz	r0, 80070c0 <_Balloc+0x56>
 80070a6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80070aa:	e00e      	b.n	80070ca <_Balloc+0x60>
 80070ac:	2221      	movs	r2, #33	; 0x21
 80070ae:	2104      	movs	r1, #4
 80070b0:	4620      	mov	r0, r4
 80070b2:	f000 fbd3 	bl	800785c <_calloc_r>
 80070b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070b8:	60e8      	str	r0, [r5, #12]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d1e4      	bne.n	800708a <_Balloc+0x20>
 80070c0:	2000      	movs	r0, #0
 80070c2:	bd70      	pop	{r4, r5, r6, pc}
 80070c4:	6802      	ldr	r2, [r0, #0]
 80070c6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80070ca:	2300      	movs	r3, #0
 80070cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80070d0:	e7f7      	b.n	80070c2 <_Balloc+0x58>

080070d2 <_Bfree>:
 80070d2:	b570      	push	{r4, r5, r6, lr}
 80070d4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80070d6:	4606      	mov	r6, r0
 80070d8:	460d      	mov	r5, r1
 80070da:	b93c      	cbnz	r4, 80070ec <_Bfree+0x1a>
 80070dc:	2010      	movs	r0, #16
 80070de:	f7ff ff91 	bl	8007004 <malloc>
 80070e2:	6270      	str	r0, [r6, #36]	; 0x24
 80070e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80070e8:	6004      	str	r4, [r0, #0]
 80070ea:	60c4      	str	r4, [r0, #12]
 80070ec:	b13d      	cbz	r5, 80070fe <_Bfree+0x2c>
 80070ee:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80070f0:	686a      	ldr	r2, [r5, #4]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80070f8:	6029      	str	r1, [r5, #0]
 80070fa:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80070fe:	bd70      	pop	{r4, r5, r6, pc}

08007100 <__multadd>:
 8007100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007104:	461f      	mov	r7, r3
 8007106:	4606      	mov	r6, r0
 8007108:	460c      	mov	r4, r1
 800710a:	2300      	movs	r3, #0
 800710c:	690d      	ldr	r5, [r1, #16]
 800710e:	f101 0c14 	add.w	ip, r1, #20
 8007112:	f8dc 0000 	ldr.w	r0, [ip]
 8007116:	3301      	adds	r3, #1
 8007118:	b281      	uxth	r1, r0
 800711a:	fb02 7101 	mla	r1, r2, r1, r7
 800711e:	0c00      	lsrs	r0, r0, #16
 8007120:	0c0f      	lsrs	r7, r1, #16
 8007122:	fb02 7000 	mla	r0, r2, r0, r7
 8007126:	b289      	uxth	r1, r1
 8007128:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800712c:	429d      	cmp	r5, r3
 800712e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007132:	f84c 1b04 	str.w	r1, [ip], #4
 8007136:	dcec      	bgt.n	8007112 <__multadd+0x12>
 8007138:	b1d7      	cbz	r7, 8007170 <__multadd+0x70>
 800713a:	68a3      	ldr	r3, [r4, #8]
 800713c:	42ab      	cmp	r3, r5
 800713e:	dc12      	bgt.n	8007166 <__multadd+0x66>
 8007140:	6861      	ldr	r1, [r4, #4]
 8007142:	4630      	mov	r0, r6
 8007144:	3101      	adds	r1, #1
 8007146:	f7ff ff90 	bl	800706a <_Balloc>
 800714a:	4680      	mov	r8, r0
 800714c:	6922      	ldr	r2, [r4, #16]
 800714e:	f104 010c 	add.w	r1, r4, #12
 8007152:	3202      	adds	r2, #2
 8007154:	0092      	lsls	r2, r2, #2
 8007156:	300c      	adds	r0, #12
 8007158:	f7ff ff7c 	bl	8007054 <memcpy>
 800715c:	4621      	mov	r1, r4
 800715e:	4630      	mov	r0, r6
 8007160:	f7ff ffb7 	bl	80070d2 <_Bfree>
 8007164:	4644      	mov	r4, r8
 8007166:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800716a:	3501      	adds	r5, #1
 800716c:	615f      	str	r7, [r3, #20]
 800716e:	6125      	str	r5, [r4, #16]
 8007170:	4620      	mov	r0, r4
 8007172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007176 <__s2b>:
 8007176:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800717a:	4615      	mov	r5, r2
 800717c:	2209      	movs	r2, #9
 800717e:	461f      	mov	r7, r3
 8007180:	3308      	adds	r3, #8
 8007182:	460c      	mov	r4, r1
 8007184:	fb93 f3f2 	sdiv	r3, r3, r2
 8007188:	4606      	mov	r6, r0
 800718a:	2201      	movs	r2, #1
 800718c:	2100      	movs	r1, #0
 800718e:	429a      	cmp	r2, r3
 8007190:	db20      	blt.n	80071d4 <__s2b+0x5e>
 8007192:	4630      	mov	r0, r6
 8007194:	f7ff ff69 	bl	800706a <_Balloc>
 8007198:	9b08      	ldr	r3, [sp, #32]
 800719a:	2d09      	cmp	r5, #9
 800719c:	6143      	str	r3, [r0, #20]
 800719e:	f04f 0301 	mov.w	r3, #1
 80071a2:	6103      	str	r3, [r0, #16]
 80071a4:	dd19      	ble.n	80071da <__s2b+0x64>
 80071a6:	f104 0809 	add.w	r8, r4, #9
 80071aa:	46c1      	mov	r9, r8
 80071ac:	442c      	add	r4, r5
 80071ae:	f819 3b01 	ldrb.w	r3, [r9], #1
 80071b2:	4601      	mov	r1, r0
 80071b4:	3b30      	subs	r3, #48	; 0x30
 80071b6:	220a      	movs	r2, #10
 80071b8:	4630      	mov	r0, r6
 80071ba:	f7ff ffa1 	bl	8007100 <__multadd>
 80071be:	45a1      	cmp	r9, r4
 80071c0:	d1f5      	bne.n	80071ae <__s2b+0x38>
 80071c2:	eb08 0405 	add.w	r4, r8, r5
 80071c6:	3c08      	subs	r4, #8
 80071c8:	1b2d      	subs	r5, r5, r4
 80071ca:	1963      	adds	r3, r4, r5
 80071cc:	42bb      	cmp	r3, r7
 80071ce:	db07      	blt.n	80071e0 <__s2b+0x6a>
 80071d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071d4:	0052      	lsls	r2, r2, #1
 80071d6:	3101      	adds	r1, #1
 80071d8:	e7d9      	b.n	800718e <__s2b+0x18>
 80071da:	340a      	adds	r4, #10
 80071dc:	2509      	movs	r5, #9
 80071de:	e7f3      	b.n	80071c8 <__s2b+0x52>
 80071e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80071e4:	4601      	mov	r1, r0
 80071e6:	3b30      	subs	r3, #48	; 0x30
 80071e8:	220a      	movs	r2, #10
 80071ea:	4630      	mov	r0, r6
 80071ec:	f7ff ff88 	bl	8007100 <__multadd>
 80071f0:	e7eb      	b.n	80071ca <__s2b+0x54>

080071f2 <__hi0bits>:
 80071f2:	0c02      	lsrs	r2, r0, #16
 80071f4:	0412      	lsls	r2, r2, #16
 80071f6:	4603      	mov	r3, r0
 80071f8:	b9b2      	cbnz	r2, 8007228 <__hi0bits+0x36>
 80071fa:	0403      	lsls	r3, r0, #16
 80071fc:	2010      	movs	r0, #16
 80071fe:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007202:	bf04      	itt	eq
 8007204:	021b      	lsleq	r3, r3, #8
 8007206:	3008      	addeq	r0, #8
 8007208:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800720c:	bf04      	itt	eq
 800720e:	011b      	lsleq	r3, r3, #4
 8007210:	3004      	addeq	r0, #4
 8007212:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007216:	bf04      	itt	eq
 8007218:	009b      	lsleq	r3, r3, #2
 800721a:	3002      	addeq	r0, #2
 800721c:	2b00      	cmp	r3, #0
 800721e:	db06      	blt.n	800722e <__hi0bits+0x3c>
 8007220:	005b      	lsls	r3, r3, #1
 8007222:	d503      	bpl.n	800722c <__hi0bits+0x3a>
 8007224:	3001      	adds	r0, #1
 8007226:	4770      	bx	lr
 8007228:	2000      	movs	r0, #0
 800722a:	e7e8      	b.n	80071fe <__hi0bits+0xc>
 800722c:	2020      	movs	r0, #32
 800722e:	4770      	bx	lr

08007230 <__lo0bits>:
 8007230:	6803      	ldr	r3, [r0, #0]
 8007232:	4601      	mov	r1, r0
 8007234:	f013 0207 	ands.w	r2, r3, #7
 8007238:	d00b      	beq.n	8007252 <__lo0bits+0x22>
 800723a:	07da      	lsls	r2, r3, #31
 800723c:	d423      	bmi.n	8007286 <__lo0bits+0x56>
 800723e:	0798      	lsls	r0, r3, #30
 8007240:	bf49      	itett	mi
 8007242:	085b      	lsrmi	r3, r3, #1
 8007244:	089b      	lsrpl	r3, r3, #2
 8007246:	2001      	movmi	r0, #1
 8007248:	600b      	strmi	r3, [r1, #0]
 800724a:	bf5c      	itt	pl
 800724c:	600b      	strpl	r3, [r1, #0]
 800724e:	2002      	movpl	r0, #2
 8007250:	4770      	bx	lr
 8007252:	b298      	uxth	r0, r3
 8007254:	b9a8      	cbnz	r0, 8007282 <__lo0bits+0x52>
 8007256:	2010      	movs	r0, #16
 8007258:	0c1b      	lsrs	r3, r3, #16
 800725a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800725e:	bf04      	itt	eq
 8007260:	0a1b      	lsreq	r3, r3, #8
 8007262:	3008      	addeq	r0, #8
 8007264:	071a      	lsls	r2, r3, #28
 8007266:	bf04      	itt	eq
 8007268:	091b      	lsreq	r3, r3, #4
 800726a:	3004      	addeq	r0, #4
 800726c:	079a      	lsls	r2, r3, #30
 800726e:	bf04      	itt	eq
 8007270:	089b      	lsreq	r3, r3, #2
 8007272:	3002      	addeq	r0, #2
 8007274:	07da      	lsls	r2, r3, #31
 8007276:	d402      	bmi.n	800727e <__lo0bits+0x4e>
 8007278:	085b      	lsrs	r3, r3, #1
 800727a:	d006      	beq.n	800728a <__lo0bits+0x5a>
 800727c:	3001      	adds	r0, #1
 800727e:	600b      	str	r3, [r1, #0]
 8007280:	4770      	bx	lr
 8007282:	4610      	mov	r0, r2
 8007284:	e7e9      	b.n	800725a <__lo0bits+0x2a>
 8007286:	2000      	movs	r0, #0
 8007288:	4770      	bx	lr
 800728a:	2020      	movs	r0, #32
 800728c:	4770      	bx	lr

0800728e <__i2b>:
 800728e:	b510      	push	{r4, lr}
 8007290:	460c      	mov	r4, r1
 8007292:	2101      	movs	r1, #1
 8007294:	f7ff fee9 	bl	800706a <_Balloc>
 8007298:	2201      	movs	r2, #1
 800729a:	6144      	str	r4, [r0, #20]
 800729c:	6102      	str	r2, [r0, #16]
 800729e:	bd10      	pop	{r4, pc}

080072a0 <__multiply>:
 80072a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072a4:	4614      	mov	r4, r2
 80072a6:	690a      	ldr	r2, [r1, #16]
 80072a8:	6923      	ldr	r3, [r4, #16]
 80072aa:	4688      	mov	r8, r1
 80072ac:	429a      	cmp	r2, r3
 80072ae:	bfbe      	ittt	lt
 80072b0:	460b      	movlt	r3, r1
 80072b2:	46a0      	movlt	r8, r4
 80072b4:	461c      	movlt	r4, r3
 80072b6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80072ba:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80072be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80072c2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80072c6:	eb07 0609 	add.w	r6, r7, r9
 80072ca:	42b3      	cmp	r3, r6
 80072cc:	bfb8      	it	lt
 80072ce:	3101      	addlt	r1, #1
 80072d0:	f7ff fecb 	bl	800706a <_Balloc>
 80072d4:	f100 0514 	add.w	r5, r0, #20
 80072d8:	462b      	mov	r3, r5
 80072da:	2200      	movs	r2, #0
 80072dc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80072e0:	4573      	cmp	r3, lr
 80072e2:	d316      	bcc.n	8007312 <__multiply+0x72>
 80072e4:	f104 0214 	add.w	r2, r4, #20
 80072e8:	f108 0114 	add.w	r1, r8, #20
 80072ec:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80072f0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80072f4:	9300      	str	r3, [sp, #0]
 80072f6:	9b00      	ldr	r3, [sp, #0]
 80072f8:	9201      	str	r2, [sp, #4]
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d80c      	bhi.n	8007318 <__multiply+0x78>
 80072fe:	2e00      	cmp	r6, #0
 8007300:	dd03      	ble.n	800730a <__multiply+0x6a>
 8007302:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007306:	2b00      	cmp	r3, #0
 8007308:	d05d      	beq.n	80073c6 <__multiply+0x126>
 800730a:	6106      	str	r6, [r0, #16]
 800730c:	b003      	add	sp, #12
 800730e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007312:	f843 2b04 	str.w	r2, [r3], #4
 8007316:	e7e3      	b.n	80072e0 <__multiply+0x40>
 8007318:	f8b2 b000 	ldrh.w	fp, [r2]
 800731c:	f1bb 0f00 	cmp.w	fp, #0
 8007320:	d023      	beq.n	800736a <__multiply+0xca>
 8007322:	4689      	mov	r9, r1
 8007324:	46ac      	mov	ip, r5
 8007326:	f04f 0800 	mov.w	r8, #0
 800732a:	f859 4b04 	ldr.w	r4, [r9], #4
 800732e:	f8dc a000 	ldr.w	sl, [ip]
 8007332:	b2a3      	uxth	r3, r4
 8007334:	fa1f fa8a 	uxth.w	sl, sl
 8007338:	fb0b a303 	mla	r3, fp, r3, sl
 800733c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007340:	f8dc 4000 	ldr.w	r4, [ip]
 8007344:	4443      	add	r3, r8
 8007346:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800734a:	fb0b 840a 	mla	r4, fp, sl, r8
 800734e:	46e2      	mov	sl, ip
 8007350:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007354:	b29b      	uxth	r3, r3
 8007356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800735a:	454f      	cmp	r7, r9
 800735c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007360:	f84a 3b04 	str.w	r3, [sl], #4
 8007364:	d82b      	bhi.n	80073be <__multiply+0x11e>
 8007366:	f8cc 8004 	str.w	r8, [ip, #4]
 800736a:	9b01      	ldr	r3, [sp, #4]
 800736c:	3204      	adds	r2, #4
 800736e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007372:	f1ba 0f00 	cmp.w	sl, #0
 8007376:	d020      	beq.n	80073ba <__multiply+0x11a>
 8007378:	4689      	mov	r9, r1
 800737a:	46a8      	mov	r8, r5
 800737c:	f04f 0b00 	mov.w	fp, #0
 8007380:	682b      	ldr	r3, [r5, #0]
 8007382:	f8b9 c000 	ldrh.w	ip, [r9]
 8007386:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800738a:	b29b      	uxth	r3, r3
 800738c:	fb0a 440c 	mla	r4, sl, ip, r4
 8007390:	46c4      	mov	ip, r8
 8007392:	445c      	add	r4, fp
 8007394:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007398:	f84c 3b04 	str.w	r3, [ip], #4
 800739c:	f859 3b04 	ldr.w	r3, [r9], #4
 80073a0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80073a4:	0c1b      	lsrs	r3, r3, #16
 80073a6:	fb0a b303 	mla	r3, sl, r3, fp
 80073aa:	454f      	cmp	r7, r9
 80073ac:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80073b0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80073b4:	d805      	bhi.n	80073c2 <__multiply+0x122>
 80073b6:	f8c8 3004 	str.w	r3, [r8, #4]
 80073ba:	3504      	adds	r5, #4
 80073bc:	e79b      	b.n	80072f6 <__multiply+0x56>
 80073be:	46d4      	mov	ip, sl
 80073c0:	e7b3      	b.n	800732a <__multiply+0x8a>
 80073c2:	46e0      	mov	r8, ip
 80073c4:	e7dd      	b.n	8007382 <__multiply+0xe2>
 80073c6:	3e01      	subs	r6, #1
 80073c8:	e799      	b.n	80072fe <__multiply+0x5e>
	...

080073cc <__pow5mult>:
 80073cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073d0:	4615      	mov	r5, r2
 80073d2:	f012 0203 	ands.w	r2, r2, #3
 80073d6:	4606      	mov	r6, r0
 80073d8:	460f      	mov	r7, r1
 80073da:	d007      	beq.n	80073ec <__pow5mult+0x20>
 80073dc:	4c21      	ldr	r4, [pc, #132]	; (8007464 <__pow5mult+0x98>)
 80073de:	3a01      	subs	r2, #1
 80073e0:	2300      	movs	r3, #0
 80073e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80073e6:	f7ff fe8b 	bl	8007100 <__multadd>
 80073ea:	4607      	mov	r7, r0
 80073ec:	10ad      	asrs	r5, r5, #2
 80073ee:	d035      	beq.n	800745c <__pow5mult+0x90>
 80073f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80073f2:	b93c      	cbnz	r4, 8007404 <__pow5mult+0x38>
 80073f4:	2010      	movs	r0, #16
 80073f6:	f7ff fe05 	bl	8007004 <malloc>
 80073fa:	6270      	str	r0, [r6, #36]	; 0x24
 80073fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007400:	6004      	str	r4, [r0, #0]
 8007402:	60c4      	str	r4, [r0, #12]
 8007404:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007408:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800740c:	b94c      	cbnz	r4, 8007422 <__pow5mult+0x56>
 800740e:	f240 2171 	movw	r1, #625	; 0x271
 8007412:	4630      	mov	r0, r6
 8007414:	f7ff ff3b 	bl	800728e <__i2b>
 8007418:	2300      	movs	r3, #0
 800741a:	4604      	mov	r4, r0
 800741c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007420:	6003      	str	r3, [r0, #0]
 8007422:	f04f 0800 	mov.w	r8, #0
 8007426:	07eb      	lsls	r3, r5, #31
 8007428:	d50a      	bpl.n	8007440 <__pow5mult+0x74>
 800742a:	4639      	mov	r1, r7
 800742c:	4622      	mov	r2, r4
 800742e:	4630      	mov	r0, r6
 8007430:	f7ff ff36 	bl	80072a0 <__multiply>
 8007434:	4681      	mov	r9, r0
 8007436:	4639      	mov	r1, r7
 8007438:	4630      	mov	r0, r6
 800743a:	f7ff fe4a 	bl	80070d2 <_Bfree>
 800743e:	464f      	mov	r7, r9
 8007440:	106d      	asrs	r5, r5, #1
 8007442:	d00b      	beq.n	800745c <__pow5mult+0x90>
 8007444:	6820      	ldr	r0, [r4, #0]
 8007446:	b938      	cbnz	r0, 8007458 <__pow5mult+0x8c>
 8007448:	4622      	mov	r2, r4
 800744a:	4621      	mov	r1, r4
 800744c:	4630      	mov	r0, r6
 800744e:	f7ff ff27 	bl	80072a0 <__multiply>
 8007452:	6020      	str	r0, [r4, #0]
 8007454:	f8c0 8000 	str.w	r8, [r0]
 8007458:	4604      	mov	r4, r0
 800745a:	e7e4      	b.n	8007426 <__pow5mult+0x5a>
 800745c:	4638      	mov	r0, r7
 800745e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007462:	bf00      	nop
 8007464:	08008738 	.word	0x08008738

08007468 <__lshift>:
 8007468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800746c:	460c      	mov	r4, r1
 800746e:	4607      	mov	r7, r0
 8007470:	4616      	mov	r6, r2
 8007472:	6923      	ldr	r3, [r4, #16]
 8007474:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007478:	eb0a 0903 	add.w	r9, sl, r3
 800747c:	6849      	ldr	r1, [r1, #4]
 800747e:	68a3      	ldr	r3, [r4, #8]
 8007480:	f109 0501 	add.w	r5, r9, #1
 8007484:	42ab      	cmp	r3, r5
 8007486:	db32      	blt.n	80074ee <__lshift+0x86>
 8007488:	4638      	mov	r0, r7
 800748a:	f7ff fdee 	bl	800706a <_Balloc>
 800748e:	2300      	movs	r3, #0
 8007490:	4680      	mov	r8, r0
 8007492:	461a      	mov	r2, r3
 8007494:	f100 0114 	add.w	r1, r0, #20
 8007498:	4553      	cmp	r3, sl
 800749a:	db2b      	blt.n	80074f4 <__lshift+0x8c>
 800749c:	6920      	ldr	r0, [r4, #16]
 800749e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80074a2:	f104 0314 	add.w	r3, r4, #20
 80074a6:	f016 021f 	ands.w	r2, r6, #31
 80074aa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80074ae:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80074b2:	d025      	beq.n	8007500 <__lshift+0x98>
 80074b4:	2000      	movs	r0, #0
 80074b6:	f1c2 0e20 	rsb	lr, r2, #32
 80074ba:	468a      	mov	sl, r1
 80074bc:	681e      	ldr	r6, [r3, #0]
 80074be:	4096      	lsls	r6, r2
 80074c0:	4330      	orrs	r0, r6
 80074c2:	f84a 0b04 	str.w	r0, [sl], #4
 80074c6:	f853 0b04 	ldr.w	r0, [r3], #4
 80074ca:	459c      	cmp	ip, r3
 80074cc:	fa20 f00e 	lsr.w	r0, r0, lr
 80074d0:	d814      	bhi.n	80074fc <__lshift+0x94>
 80074d2:	6048      	str	r0, [r1, #4]
 80074d4:	b108      	cbz	r0, 80074da <__lshift+0x72>
 80074d6:	f109 0502 	add.w	r5, r9, #2
 80074da:	3d01      	subs	r5, #1
 80074dc:	4638      	mov	r0, r7
 80074de:	f8c8 5010 	str.w	r5, [r8, #16]
 80074e2:	4621      	mov	r1, r4
 80074e4:	f7ff fdf5 	bl	80070d2 <_Bfree>
 80074e8:	4640      	mov	r0, r8
 80074ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074ee:	3101      	adds	r1, #1
 80074f0:	005b      	lsls	r3, r3, #1
 80074f2:	e7c7      	b.n	8007484 <__lshift+0x1c>
 80074f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80074f8:	3301      	adds	r3, #1
 80074fa:	e7cd      	b.n	8007498 <__lshift+0x30>
 80074fc:	4651      	mov	r1, sl
 80074fe:	e7dc      	b.n	80074ba <__lshift+0x52>
 8007500:	3904      	subs	r1, #4
 8007502:	f853 2b04 	ldr.w	r2, [r3], #4
 8007506:	459c      	cmp	ip, r3
 8007508:	f841 2f04 	str.w	r2, [r1, #4]!
 800750c:	d8f9      	bhi.n	8007502 <__lshift+0x9a>
 800750e:	e7e4      	b.n	80074da <__lshift+0x72>

08007510 <__mcmp>:
 8007510:	6903      	ldr	r3, [r0, #16]
 8007512:	690a      	ldr	r2, [r1, #16]
 8007514:	b530      	push	{r4, r5, lr}
 8007516:	1a9b      	subs	r3, r3, r2
 8007518:	d10c      	bne.n	8007534 <__mcmp+0x24>
 800751a:	0092      	lsls	r2, r2, #2
 800751c:	3014      	adds	r0, #20
 800751e:	3114      	adds	r1, #20
 8007520:	1884      	adds	r4, r0, r2
 8007522:	4411      	add	r1, r2
 8007524:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007528:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800752c:	4295      	cmp	r5, r2
 800752e:	d003      	beq.n	8007538 <__mcmp+0x28>
 8007530:	d305      	bcc.n	800753e <__mcmp+0x2e>
 8007532:	2301      	movs	r3, #1
 8007534:	4618      	mov	r0, r3
 8007536:	bd30      	pop	{r4, r5, pc}
 8007538:	42a0      	cmp	r0, r4
 800753a:	d3f3      	bcc.n	8007524 <__mcmp+0x14>
 800753c:	e7fa      	b.n	8007534 <__mcmp+0x24>
 800753e:	f04f 33ff 	mov.w	r3, #4294967295
 8007542:	e7f7      	b.n	8007534 <__mcmp+0x24>

08007544 <__mdiff>:
 8007544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007548:	460d      	mov	r5, r1
 800754a:	4607      	mov	r7, r0
 800754c:	4611      	mov	r1, r2
 800754e:	4628      	mov	r0, r5
 8007550:	4614      	mov	r4, r2
 8007552:	f7ff ffdd 	bl	8007510 <__mcmp>
 8007556:	1e06      	subs	r6, r0, #0
 8007558:	d108      	bne.n	800756c <__mdiff+0x28>
 800755a:	4631      	mov	r1, r6
 800755c:	4638      	mov	r0, r7
 800755e:	f7ff fd84 	bl	800706a <_Balloc>
 8007562:	2301      	movs	r3, #1
 8007564:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800756c:	bfa4      	itt	ge
 800756e:	4623      	movge	r3, r4
 8007570:	462c      	movge	r4, r5
 8007572:	4638      	mov	r0, r7
 8007574:	6861      	ldr	r1, [r4, #4]
 8007576:	bfa6      	itte	ge
 8007578:	461d      	movge	r5, r3
 800757a:	2600      	movge	r6, #0
 800757c:	2601      	movlt	r6, #1
 800757e:	f7ff fd74 	bl	800706a <_Balloc>
 8007582:	f04f 0e00 	mov.w	lr, #0
 8007586:	60c6      	str	r6, [r0, #12]
 8007588:	692b      	ldr	r3, [r5, #16]
 800758a:	6926      	ldr	r6, [r4, #16]
 800758c:	f104 0214 	add.w	r2, r4, #20
 8007590:	f105 0914 	add.w	r9, r5, #20
 8007594:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007598:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800759c:	f100 0114 	add.w	r1, r0, #20
 80075a0:	f852 ab04 	ldr.w	sl, [r2], #4
 80075a4:	f859 5b04 	ldr.w	r5, [r9], #4
 80075a8:	fa1f f38a 	uxth.w	r3, sl
 80075ac:	4473      	add	r3, lr
 80075ae:	b2ac      	uxth	r4, r5
 80075b0:	1b1b      	subs	r3, r3, r4
 80075b2:	0c2c      	lsrs	r4, r5, #16
 80075b4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80075b8:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80075bc:	b29b      	uxth	r3, r3
 80075be:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80075c2:	45c8      	cmp	r8, r9
 80075c4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80075c8:	4694      	mov	ip, r2
 80075ca:	f841 4b04 	str.w	r4, [r1], #4
 80075ce:	d8e7      	bhi.n	80075a0 <__mdiff+0x5c>
 80075d0:	45bc      	cmp	ip, r7
 80075d2:	d304      	bcc.n	80075de <__mdiff+0x9a>
 80075d4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80075d8:	b183      	cbz	r3, 80075fc <__mdiff+0xb8>
 80075da:	6106      	str	r6, [r0, #16]
 80075dc:	e7c4      	b.n	8007568 <__mdiff+0x24>
 80075de:	f85c 4b04 	ldr.w	r4, [ip], #4
 80075e2:	b2a2      	uxth	r2, r4
 80075e4:	4472      	add	r2, lr
 80075e6:	1413      	asrs	r3, r2, #16
 80075e8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80075ec:	b292      	uxth	r2, r2
 80075ee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80075f2:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80075f6:	f841 2b04 	str.w	r2, [r1], #4
 80075fa:	e7e9      	b.n	80075d0 <__mdiff+0x8c>
 80075fc:	3e01      	subs	r6, #1
 80075fe:	e7e9      	b.n	80075d4 <__mdiff+0x90>

08007600 <__ulp>:
 8007600:	4b10      	ldr	r3, [pc, #64]	; (8007644 <__ulp+0x44>)
 8007602:	400b      	ands	r3, r1
 8007604:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007608:	2b00      	cmp	r3, #0
 800760a:	dd02      	ble.n	8007612 <__ulp+0x12>
 800760c:	2000      	movs	r0, #0
 800760e:	4619      	mov	r1, r3
 8007610:	4770      	bx	lr
 8007612:	425b      	negs	r3, r3
 8007614:	151b      	asrs	r3, r3, #20
 8007616:	2b13      	cmp	r3, #19
 8007618:	f04f 0000 	mov.w	r0, #0
 800761c:	f04f 0100 	mov.w	r1, #0
 8007620:	dc04      	bgt.n	800762c <__ulp+0x2c>
 8007622:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007626:	fa42 f103 	asr.w	r1, r2, r3
 800762a:	4770      	bx	lr
 800762c:	2201      	movs	r2, #1
 800762e:	3b14      	subs	r3, #20
 8007630:	2b1e      	cmp	r3, #30
 8007632:	bfce      	itee	gt
 8007634:	4613      	movgt	r3, r2
 8007636:	f1c3 031f 	rsble	r3, r3, #31
 800763a:	fa02 f303 	lslle.w	r3, r2, r3
 800763e:	4618      	mov	r0, r3
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	7ff00000 	.word	0x7ff00000

08007648 <__b2d>:
 8007648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800764c:	6907      	ldr	r7, [r0, #16]
 800764e:	f100 0914 	add.w	r9, r0, #20
 8007652:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8007656:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800765a:	f1a7 0804 	sub.w	r8, r7, #4
 800765e:	4630      	mov	r0, r6
 8007660:	f7ff fdc7 	bl	80071f2 <__hi0bits>
 8007664:	f1c0 0320 	rsb	r3, r0, #32
 8007668:	280a      	cmp	r0, #10
 800766a:	600b      	str	r3, [r1, #0]
 800766c:	491e      	ldr	r1, [pc, #120]	; (80076e8 <__b2d+0xa0>)
 800766e:	dc17      	bgt.n	80076a0 <__b2d+0x58>
 8007670:	45c1      	cmp	r9, r8
 8007672:	bf28      	it	cs
 8007674:	2200      	movcs	r2, #0
 8007676:	f1c0 0c0b 	rsb	ip, r0, #11
 800767a:	fa26 f30c 	lsr.w	r3, r6, ip
 800767e:	bf38      	it	cc
 8007680:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007684:	ea43 0501 	orr.w	r5, r3, r1
 8007688:	f100 0315 	add.w	r3, r0, #21
 800768c:	fa06 f303 	lsl.w	r3, r6, r3
 8007690:	fa22 f20c 	lsr.w	r2, r2, ip
 8007694:	ea43 0402 	orr.w	r4, r3, r2
 8007698:	4620      	mov	r0, r4
 800769a:	4629      	mov	r1, r5
 800769c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076a0:	45c1      	cmp	r9, r8
 80076a2:	bf3a      	itte	cc
 80076a4:	f1a7 0808 	subcc.w	r8, r7, #8
 80076a8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80076ac:	2200      	movcs	r2, #0
 80076ae:	f1b0 030b 	subs.w	r3, r0, #11
 80076b2:	d015      	beq.n	80076e0 <__b2d+0x98>
 80076b4:	409e      	lsls	r6, r3
 80076b6:	f1c3 0720 	rsb	r7, r3, #32
 80076ba:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 80076be:	fa22 f107 	lsr.w	r1, r2, r7
 80076c2:	45c8      	cmp	r8, r9
 80076c4:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 80076c8:	ea46 0501 	orr.w	r5, r6, r1
 80076cc:	bf94      	ite	ls
 80076ce:	2100      	movls	r1, #0
 80076d0:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80076d4:	fa02 f003 	lsl.w	r0, r2, r3
 80076d8:	40f9      	lsrs	r1, r7
 80076da:	ea40 0401 	orr.w	r4, r0, r1
 80076de:	e7db      	b.n	8007698 <__b2d+0x50>
 80076e0:	ea46 0501 	orr.w	r5, r6, r1
 80076e4:	4614      	mov	r4, r2
 80076e6:	e7d7      	b.n	8007698 <__b2d+0x50>
 80076e8:	3ff00000 	.word	0x3ff00000

080076ec <__d2b>:
 80076ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80076f0:	461c      	mov	r4, r3
 80076f2:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80076f6:	2101      	movs	r1, #1
 80076f8:	4690      	mov	r8, r2
 80076fa:	f7ff fcb6 	bl	800706a <_Balloc>
 80076fe:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8007702:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007706:	4607      	mov	r7, r0
 8007708:	bb34      	cbnz	r4, 8007758 <__d2b+0x6c>
 800770a:	9201      	str	r2, [sp, #4]
 800770c:	f1b8 0200 	subs.w	r2, r8, #0
 8007710:	d027      	beq.n	8007762 <__d2b+0x76>
 8007712:	a802      	add	r0, sp, #8
 8007714:	f840 2d08 	str.w	r2, [r0, #-8]!
 8007718:	f7ff fd8a 	bl	8007230 <__lo0bits>
 800771c:	9900      	ldr	r1, [sp, #0]
 800771e:	b1f0      	cbz	r0, 800775e <__d2b+0x72>
 8007720:	9a01      	ldr	r2, [sp, #4]
 8007722:	f1c0 0320 	rsb	r3, r0, #32
 8007726:	fa02 f303 	lsl.w	r3, r2, r3
 800772a:	430b      	orrs	r3, r1
 800772c:	40c2      	lsrs	r2, r0
 800772e:	617b      	str	r3, [r7, #20]
 8007730:	9201      	str	r2, [sp, #4]
 8007732:	9b01      	ldr	r3, [sp, #4]
 8007734:	2b00      	cmp	r3, #0
 8007736:	bf14      	ite	ne
 8007738:	2102      	movne	r1, #2
 800773a:	2101      	moveq	r1, #1
 800773c:	61bb      	str	r3, [r7, #24]
 800773e:	6139      	str	r1, [r7, #16]
 8007740:	b1c4      	cbz	r4, 8007774 <__d2b+0x88>
 8007742:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007746:	4404      	add	r4, r0
 8007748:	6034      	str	r4, [r6, #0]
 800774a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800774e:	6028      	str	r0, [r5, #0]
 8007750:	4638      	mov	r0, r7
 8007752:	b002      	add	sp, #8
 8007754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007758:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800775c:	e7d5      	b.n	800770a <__d2b+0x1e>
 800775e:	6179      	str	r1, [r7, #20]
 8007760:	e7e7      	b.n	8007732 <__d2b+0x46>
 8007762:	a801      	add	r0, sp, #4
 8007764:	f7ff fd64 	bl	8007230 <__lo0bits>
 8007768:	2101      	movs	r1, #1
 800776a:	9b01      	ldr	r3, [sp, #4]
 800776c:	6139      	str	r1, [r7, #16]
 800776e:	617b      	str	r3, [r7, #20]
 8007770:	3020      	adds	r0, #32
 8007772:	e7e5      	b.n	8007740 <__d2b+0x54>
 8007774:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007778:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800777c:	6030      	str	r0, [r6, #0]
 800777e:	6918      	ldr	r0, [r3, #16]
 8007780:	f7ff fd37 	bl	80071f2 <__hi0bits>
 8007784:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007788:	e7e1      	b.n	800774e <__d2b+0x62>

0800778a <__ratio>:
 800778a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800778e:	4688      	mov	r8, r1
 8007790:	4669      	mov	r1, sp
 8007792:	4681      	mov	r9, r0
 8007794:	f7ff ff58 	bl	8007648 <__b2d>
 8007798:	468b      	mov	fp, r1
 800779a:	4606      	mov	r6, r0
 800779c:	460f      	mov	r7, r1
 800779e:	4640      	mov	r0, r8
 80077a0:	a901      	add	r1, sp, #4
 80077a2:	f7ff ff51 	bl	8007648 <__b2d>
 80077a6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80077aa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80077ae:	460d      	mov	r5, r1
 80077b0:	eba3 0c02 	sub.w	ip, r3, r2
 80077b4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80077b8:	1a9b      	subs	r3, r3, r2
 80077ba:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80077be:	2b00      	cmp	r3, #0
 80077c0:	bfd5      	itete	le
 80077c2:	460a      	movle	r2, r1
 80077c4:	463a      	movgt	r2, r7
 80077c6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80077ca:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80077ce:	bfd8      	it	le
 80077d0:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 80077d4:	462b      	mov	r3, r5
 80077d6:	4602      	mov	r2, r0
 80077d8:	4659      	mov	r1, fp
 80077da:	4630      	mov	r0, r6
 80077dc:	f7f8 ffa6 	bl	800072c <__aeabi_ddiv>
 80077e0:	b003      	add	sp, #12
 80077e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080077e6 <__copybits>:
 80077e6:	3901      	subs	r1, #1
 80077e8:	b510      	push	{r4, lr}
 80077ea:	1149      	asrs	r1, r1, #5
 80077ec:	6914      	ldr	r4, [r2, #16]
 80077ee:	3101      	adds	r1, #1
 80077f0:	f102 0314 	add.w	r3, r2, #20
 80077f4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80077f8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80077fc:	42a3      	cmp	r3, r4
 80077fe:	4602      	mov	r2, r0
 8007800:	d303      	bcc.n	800780a <__copybits+0x24>
 8007802:	2300      	movs	r3, #0
 8007804:	428a      	cmp	r2, r1
 8007806:	d305      	bcc.n	8007814 <__copybits+0x2e>
 8007808:	bd10      	pop	{r4, pc}
 800780a:	f853 2b04 	ldr.w	r2, [r3], #4
 800780e:	f840 2b04 	str.w	r2, [r0], #4
 8007812:	e7f3      	b.n	80077fc <__copybits+0x16>
 8007814:	f842 3b04 	str.w	r3, [r2], #4
 8007818:	e7f4      	b.n	8007804 <__copybits+0x1e>

0800781a <__any_on>:
 800781a:	f100 0214 	add.w	r2, r0, #20
 800781e:	6900      	ldr	r0, [r0, #16]
 8007820:	114b      	asrs	r3, r1, #5
 8007822:	4298      	cmp	r0, r3
 8007824:	b510      	push	{r4, lr}
 8007826:	db11      	blt.n	800784c <__any_on+0x32>
 8007828:	dd0a      	ble.n	8007840 <__any_on+0x26>
 800782a:	f011 011f 	ands.w	r1, r1, #31
 800782e:	d007      	beq.n	8007840 <__any_on+0x26>
 8007830:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007834:	fa24 f001 	lsr.w	r0, r4, r1
 8007838:	fa00 f101 	lsl.w	r1, r0, r1
 800783c:	428c      	cmp	r4, r1
 800783e:	d10b      	bne.n	8007858 <__any_on+0x3e>
 8007840:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007844:	4293      	cmp	r3, r2
 8007846:	d803      	bhi.n	8007850 <__any_on+0x36>
 8007848:	2000      	movs	r0, #0
 800784a:	bd10      	pop	{r4, pc}
 800784c:	4603      	mov	r3, r0
 800784e:	e7f7      	b.n	8007840 <__any_on+0x26>
 8007850:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007854:	2900      	cmp	r1, #0
 8007856:	d0f5      	beq.n	8007844 <__any_on+0x2a>
 8007858:	2001      	movs	r0, #1
 800785a:	e7f6      	b.n	800784a <__any_on+0x30>

0800785c <_calloc_r>:
 800785c:	b538      	push	{r3, r4, r5, lr}
 800785e:	fb02 f401 	mul.w	r4, r2, r1
 8007862:	4621      	mov	r1, r4
 8007864:	f000 f854 	bl	8007910 <_malloc_r>
 8007868:	4605      	mov	r5, r0
 800786a:	b118      	cbz	r0, 8007874 <_calloc_r+0x18>
 800786c:	4622      	mov	r2, r4
 800786e:	2100      	movs	r1, #0
 8007870:	f7fc fc4a 	bl	8004108 <memset>
 8007874:	4628      	mov	r0, r5
 8007876:	bd38      	pop	{r3, r4, r5, pc}

08007878 <_free_r>:
 8007878:	b538      	push	{r3, r4, r5, lr}
 800787a:	4605      	mov	r5, r0
 800787c:	2900      	cmp	r1, #0
 800787e:	d043      	beq.n	8007908 <_free_r+0x90>
 8007880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007884:	1f0c      	subs	r4, r1, #4
 8007886:	2b00      	cmp	r3, #0
 8007888:	bfb8      	it	lt
 800788a:	18e4      	addlt	r4, r4, r3
 800788c:	f000 fdbf 	bl	800840e <__malloc_lock>
 8007890:	4a1e      	ldr	r2, [pc, #120]	; (800790c <_free_r+0x94>)
 8007892:	6813      	ldr	r3, [r2, #0]
 8007894:	4610      	mov	r0, r2
 8007896:	b933      	cbnz	r3, 80078a6 <_free_r+0x2e>
 8007898:	6063      	str	r3, [r4, #4]
 800789a:	6014      	str	r4, [r2, #0]
 800789c:	4628      	mov	r0, r5
 800789e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078a2:	f000 bdb5 	b.w	8008410 <__malloc_unlock>
 80078a6:	42a3      	cmp	r3, r4
 80078a8:	d90b      	bls.n	80078c2 <_free_r+0x4a>
 80078aa:	6821      	ldr	r1, [r4, #0]
 80078ac:	1862      	adds	r2, r4, r1
 80078ae:	4293      	cmp	r3, r2
 80078b0:	bf01      	itttt	eq
 80078b2:	681a      	ldreq	r2, [r3, #0]
 80078b4:	685b      	ldreq	r3, [r3, #4]
 80078b6:	1852      	addeq	r2, r2, r1
 80078b8:	6022      	streq	r2, [r4, #0]
 80078ba:	6063      	str	r3, [r4, #4]
 80078bc:	6004      	str	r4, [r0, #0]
 80078be:	e7ed      	b.n	800789c <_free_r+0x24>
 80078c0:	4613      	mov	r3, r2
 80078c2:	685a      	ldr	r2, [r3, #4]
 80078c4:	b10a      	cbz	r2, 80078ca <_free_r+0x52>
 80078c6:	42a2      	cmp	r2, r4
 80078c8:	d9fa      	bls.n	80078c0 <_free_r+0x48>
 80078ca:	6819      	ldr	r1, [r3, #0]
 80078cc:	1858      	adds	r0, r3, r1
 80078ce:	42a0      	cmp	r0, r4
 80078d0:	d10b      	bne.n	80078ea <_free_r+0x72>
 80078d2:	6820      	ldr	r0, [r4, #0]
 80078d4:	4401      	add	r1, r0
 80078d6:	1858      	adds	r0, r3, r1
 80078d8:	4282      	cmp	r2, r0
 80078da:	6019      	str	r1, [r3, #0]
 80078dc:	d1de      	bne.n	800789c <_free_r+0x24>
 80078de:	6810      	ldr	r0, [r2, #0]
 80078e0:	6852      	ldr	r2, [r2, #4]
 80078e2:	4401      	add	r1, r0
 80078e4:	6019      	str	r1, [r3, #0]
 80078e6:	605a      	str	r2, [r3, #4]
 80078e8:	e7d8      	b.n	800789c <_free_r+0x24>
 80078ea:	d902      	bls.n	80078f2 <_free_r+0x7a>
 80078ec:	230c      	movs	r3, #12
 80078ee:	602b      	str	r3, [r5, #0]
 80078f0:	e7d4      	b.n	800789c <_free_r+0x24>
 80078f2:	6820      	ldr	r0, [r4, #0]
 80078f4:	1821      	adds	r1, r4, r0
 80078f6:	428a      	cmp	r2, r1
 80078f8:	bf01      	itttt	eq
 80078fa:	6811      	ldreq	r1, [r2, #0]
 80078fc:	6852      	ldreq	r2, [r2, #4]
 80078fe:	1809      	addeq	r1, r1, r0
 8007900:	6021      	streq	r1, [r4, #0]
 8007902:	6062      	str	r2, [r4, #4]
 8007904:	605c      	str	r4, [r3, #4]
 8007906:	e7c9      	b.n	800789c <_free_r+0x24>
 8007908:	bd38      	pop	{r3, r4, r5, pc}
 800790a:	bf00      	nop
 800790c:	20000210 	.word	0x20000210

08007910 <_malloc_r>:
 8007910:	b570      	push	{r4, r5, r6, lr}
 8007912:	1ccd      	adds	r5, r1, #3
 8007914:	f025 0503 	bic.w	r5, r5, #3
 8007918:	3508      	adds	r5, #8
 800791a:	2d0c      	cmp	r5, #12
 800791c:	bf38      	it	cc
 800791e:	250c      	movcc	r5, #12
 8007920:	2d00      	cmp	r5, #0
 8007922:	4606      	mov	r6, r0
 8007924:	db01      	blt.n	800792a <_malloc_r+0x1a>
 8007926:	42a9      	cmp	r1, r5
 8007928:	d903      	bls.n	8007932 <_malloc_r+0x22>
 800792a:	230c      	movs	r3, #12
 800792c:	6033      	str	r3, [r6, #0]
 800792e:	2000      	movs	r0, #0
 8007930:	bd70      	pop	{r4, r5, r6, pc}
 8007932:	f000 fd6c 	bl	800840e <__malloc_lock>
 8007936:	4a21      	ldr	r2, [pc, #132]	; (80079bc <_malloc_r+0xac>)
 8007938:	6814      	ldr	r4, [r2, #0]
 800793a:	4621      	mov	r1, r4
 800793c:	b991      	cbnz	r1, 8007964 <_malloc_r+0x54>
 800793e:	4c20      	ldr	r4, [pc, #128]	; (80079c0 <_malloc_r+0xb0>)
 8007940:	6823      	ldr	r3, [r4, #0]
 8007942:	b91b      	cbnz	r3, 800794c <_malloc_r+0x3c>
 8007944:	4630      	mov	r0, r6
 8007946:	f000 facd 	bl	8007ee4 <_sbrk_r>
 800794a:	6020      	str	r0, [r4, #0]
 800794c:	4629      	mov	r1, r5
 800794e:	4630      	mov	r0, r6
 8007950:	f000 fac8 	bl	8007ee4 <_sbrk_r>
 8007954:	1c43      	adds	r3, r0, #1
 8007956:	d124      	bne.n	80079a2 <_malloc_r+0x92>
 8007958:	230c      	movs	r3, #12
 800795a:	4630      	mov	r0, r6
 800795c:	6033      	str	r3, [r6, #0]
 800795e:	f000 fd57 	bl	8008410 <__malloc_unlock>
 8007962:	e7e4      	b.n	800792e <_malloc_r+0x1e>
 8007964:	680b      	ldr	r3, [r1, #0]
 8007966:	1b5b      	subs	r3, r3, r5
 8007968:	d418      	bmi.n	800799c <_malloc_r+0x8c>
 800796a:	2b0b      	cmp	r3, #11
 800796c:	d90f      	bls.n	800798e <_malloc_r+0x7e>
 800796e:	600b      	str	r3, [r1, #0]
 8007970:	18cc      	adds	r4, r1, r3
 8007972:	50cd      	str	r5, [r1, r3]
 8007974:	4630      	mov	r0, r6
 8007976:	f000 fd4b 	bl	8008410 <__malloc_unlock>
 800797a:	f104 000b 	add.w	r0, r4, #11
 800797e:	1d23      	adds	r3, r4, #4
 8007980:	f020 0007 	bic.w	r0, r0, #7
 8007984:	1ac3      	subs	r3, r0, r3
 8007986:	d0d3      	beq.n	8007930 <_malloc_r+0x20>
 8007988:	425a      	negs	r2, r3
 800798a:	50e2      	str	r2, [r4, r3]
 800798c:	e7d0      	b.n	8007930 <_malloc_r+0x20>
 800798e:	684b      	ldr	r3, [r1, #4]
 8007990:	428c      	cmp	r4, r1
 8007992:	bf16      	itet	ne
 8007994:	6063      	strne	r3, [r4, #4]
 8007996:	6013      	streq	r3, [r2, #0]
 8007998:	460c      	movne	r4, r1
 800799a:	e7eb      	b.n	8007974 <_malloc_r+0x64>
 800799c:	460c      	mov	r4, r1
 800799e:	6849      	ldr	r1, [r1, #4]
 80079a0:	e7cc      	b.n	800793c <_malloc_r+0x2c>
 80079a2:	1cc4      	adds	r4, r0, #3
 80079a4:	f024 0403 	bic.w	r4, r4, #3
 80079a8:	42a0      	cmp	r0, r4
 80079aa:	d005      	beq.n	80079b8 <_malloc_r+0xa8>
 80079ac:	1a21      	subs	r1, r4, r0
 80079ae:	4630      	mov	r0, r6
 80079b0:	f000 fa98 	bl	8007ee4 <_sbrk_r>
 80079b4:	3001      	adds	r0, #1
 80079b6:	d0cf      	beq.n	8007958 <_malloc_r+0x48>
 80079b8:	6025      	str	r5, [r4, #0]
 80079ba:	e7db      	b.n	8007974 <_malloc_r+0x64>
 80079bc:	20000210 	.word	0x20000210
 80079c0:	20000214 	.word	0x20000214

080079c4 <__ssputs_r>:
 80079c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079c8:	688e      	ldr	r6, [r1, #8]
 80079ca:	4682      	mov	sl, r0
 80079cc:	429e      	cmp	r6, r3
 80079ce:	460c      	mov	r4, r1
 80079d0:	4690      	mov	r8, r2
 80079d2:	4699      	mov	r9, r3
 80079d4:	d837      	bhi.n	8007a46 <__ssputs_r+0x82>
 80079d6:	898a      	ldrh	r2, [r1, #12]
 80079d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80079dc:	d031      	beq.n	8007a42 <__ssputs_r+0x7e>
 80079de:	2302      	movs	r3, #2
 80079e0:	6825      	ldr	r5, [r4, #0]
 80079e2:	6909      	ldr	r1, [r1, #16]
 80079e4:	1a6f      	subs	r7, r5, r1
 80079e6:	6965      	ldr	r5, [r4, #20]
 80079e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80079ec:	fb95 f5f3 	sdiv	r5, r5, r3
 80079f0:	f109 0301 	add.w	r3, r9, #1
 80079f4:	443b      	add	r3, r7
 80079f6:	429d      	cmp	r5, r3
 80079f8:	bf38      	it	cc
 80079fa:	461d      	movcc	r5, r3
 80079fc:	0553      	lsls	r3, r2, #21
 80079fe:	d530      	bpl.n	8007a62 <__ssputs_r+0x9e>
 8007a00:	4629      	mov	r1, r5
 8007a02:	f7ff ff85 	bl	8007910 <_malloc_r>
 8007a06:	4606      	mov	r6, r0
 8007a08:	b950      	cbnz	r0, 8007a20 <__ssputs_r+0x5c>
 8007a0a:	230c      	movs	r3, #12
 8007a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a10:	f8ca 3000 	str.w	r3, [sl]
 8007a14:	89a3      	ldrh	r3, [r4, #12]
 8007a16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a1a:	81a3      	strh	r3, [r4, #12]
 8007a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a20:	463a      	mov	r2, r7
 8007a22:	6921      	ldr	r1, [r4, #16]
 8007a24:	f7ff fb16 	bl	8007054 <memcpy>
 8007a28:	89a3      	ldrh	r3, [r4, #12]
 8007a2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a32:	81a3      	strh	r3, [r4, #12]
 8007a34:	6126      	str	r6, [r4, #16]
 8007a36:	443e      	add	r6, r7
 8007a38:	6026      	str	r6, [r4, #0]
 8007a3a:	464e      	mov	r6, r9
 8007a3c:	6165      	str	r5, [r4, #20]
 8007a3e:	1bed      	subs	r5, r5, r7
 8007a40:	60a5      	str	r5, [r4, #8]
 8007a42:	454e      	cmp	r6, r9
 8007a44:	d900      	bls.n	8007a48 <__ssputs_r+0x84>
 8007a46:	464e      	mov	r6, r9
 8007a48:	4632      	mov	r2, r6
 8007a4a:	4641      	mov	r1, r8
 8007a4c:	6820      	ldr	r0, [r4, #0]
 8007a4e:	f000 fcc5 	bl	80083dc <memmove>
 8007a52:	68a3      	ldr	r3, [r4, #8]
 8007a54:	2000      	movs	r0, #0
 8007a56:	1b9b      	subs	r3, r3, r6
 8007a58:	60a3      	str	r3, [r4, #8]
 8007a5a:	6823      	ldr	r3, [r4, #0]
 8007a5c:	441e      	add	r6, r3
 8007a5e:	6026      	str	r6, [r4, #0]
 8007a60:	e7dc      	b.n	8007a1c <__ssputs_r+0x58>
 8007a62:	462a      	mov	r2, r5
 8007a64:	f000 fcd5 	bl	8008412 <_realloc_r>
 8007a68:	4606      	mov	r6, r0
 8007a6a:	2800      	cmp	r0, #0
 8007a6c:	d1e2      	bne.n	8007a34 <__ssputs_r+0x70>
 8007a6e:	6921      	ldr	r1, [r4, #16]
 8007a70:	4650      	mov	r0, sl
 8007a72:	f7ff ff01 	bl	8007878 <_free_r>
 8007a76:	e7c8      	b.n	8007a0a <__ssputs_r+0x46>

08007a78 <_svfiprintf_r>:
 8007a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a7c:	461d      	mov	r5, r3
 8007a7e:	898b      	ldrh	r3, [r1, #12]
 8007a80:	b09d      	sub	sp, #116	; 0x74
 8007a82:	061f      	lsls	r7, r3, #24
 8007a84:	4680      	mov	r8, r0
 8007a86:	460c      	mov	r4, r1
 8007a88:	4616      	mov	r6, r2
 8007a8a:	d50f      	bpl.n	8007aac <_svfiprintf_r+0x34>
 8007a8c:	690b      	ldr	r3, [r1, #16]
 8007a8e:	b96b      	cbnz	r3, 8007aac <_svfiprintf_r+0x34>
 8007a90:	2140      	movs	r1, #64	; 0x40
 8007a92:	f7ff ff3d 	bl	8007910 <_malloc_r>
 8007a96:	6020      	str	r0, [r4, #0]
 8007a98:	6120      	str	r0, [r4, #16]
 8007a9a:	b928      	cbnz	r0, 8007aa8 <_svfiprintf_r+0x30>
 8007a9c:	230c      	movs	r3, #12
 8007a9e:	f8c8 3000 	str.w	r3, [r8]
 8007aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa6:	e0c8      	b.n	8007c3a <_svfiprintf_r+0x1c2>
 8007aa8:	2340      	movs	r3, #64	; 0x40
 8007aaa:	6163      	str	r3, [r4, #20]
 8007aac:	2300      	movs	r3, #0
 8007aae:	9309      	str	r3, [sp, #36]	; 0x24
 8007ab0:	2320      	movs	r3, #32
 8007ab2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ab6:	2330      	movs	r3, #48	; 0x30
 8007ab8:	f04f 0b01 	mov.w	fp, #1
 8007abc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ac0:	9503      	str	r5, [sp, #12]
 8007ac2:	4637      	mov	r7, r6
 8007ac4:	463d      	mov	r5, r7
 8007ac6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007aca:	b10b      	cbz	r3, 8007ad0 <_svfiprintf_r+0x58>
 8007acc:	2b25      	cmp	r3, #37	; 0x25
 8007ace:	d13e      	bne.n	8007b4e <_svfiprintf_r+0xd6>
 8007ad0:	ebb7 0a06 	subs.w	sl, r7, r6
 8007ad4:	d00b      	beq.n	8007aee <_svfiprintf_r+0x76>
 8007ad6:	4653      	mov	r3, sl
 8007ad8:	4632      	mov	r2, r6
 8007ada:	4621      	mov	r1, r4
 8007adc:	4640      	mov	r0, r8
 8007ade:	f7ff ff71 	bl	80079c4 <__ssputs_r>
 8007ae2:	3001      	adds	r0, #1
 8007ae4:	f000 80a4 	beq.w	8007c30 <_svfiprintf_r+0x1b8>
 8007ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aea:	4453      	add	r3, sl
 8007aec:	9309      	str	r3, [sp, #36]	; 0x24
 8007aee:	783b      	ldrb	r3, [r7, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f000 809d 	beq.w	8007c30 <_svfiprintf_r+0x1b8>
 8007af6:	2300      	movs	r3, #0
 8007af8:	f04f 32ff 	mov.w	r2, #4294967295
 8007afc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b00:	9304      	str	r3, [sp, #16]
 8007b02:	9307      	str	r3, [sp, #28]
 8007b04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b08:	931a      	str	r3, [sp, #104]	; 0x68
 8007b0a:	462f      	mov	r7, r5
 8007b0c:	2205      	movs	r2, #5
 8007b0e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007b12:	4850      	ldr	r0, [pc, #320]	; (8007c54 <_svfiprintf_r+0x1dc>)
 8007b14:	f7ff fa90 	bl	8007038 <memchr>
 8007b18:	9b04      	ldr	r3, [sp, #16]
 8007b1a:	b9d0      	cbnz	r0, 8007b52 <_svfiprintf_r+0xda>
 8007b1c:	06d9      	lsls	r1, r3, #27
 8007b1e:	bf44      	itt	mi
 8007b20:	2220      	movmi	r2, #32
 8007b22:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007b26:	071a      	lsls	r2, r3, #28
 8007b28:	bf44      	itt	mi
 8007b2a:	222b      	movmi	r2, #43	; 0x2b
 8007b2c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007b30:	782a      	ldrb	r2, [r5, #0]
 8007b32:	2a2a      	cmp	r2, #42	; 0x2a
 8007b34:	d015      	beq.n	8007b62 <_svfiprintf_r+0xea>
 8007b36:	462f      	mov	r7, r5
 8007b38:	2000      	movs	r0, #0
 8007b3a:	250a      	movs	r5, #10
 8007b3c:	9a07      	ldr	r2, [sp, #28]
 8007b3e:	4639      	mov	r1, r7
 8007b40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b44:	3b30      	subs	r3, #48	; 0x30
 8007b46:	2b09      	cmp	r3, #9
 8007b48:	d94d      	bls.n	8007be6 <_svfiprintf_r+0x16e>
 8007b4a:	b1b8      	cbz	r0, 8007b7c <_svfiprintf_r+0x104>
 8007b4c:	e00f      	b.n	8007b6e <_svfiprintf_r+0xf6>
 8007b4e:	462f      	mov	r7, r5
 8007b50:	e7b8      	b.n	8007ac4 <_svfiprintf_r+0x4c>
 8007b52:	4a40      	ldr	r2, [pc, #256]	; (8007c54 <_svfiprintf_r+0x1dc>)
 8007b54:	463d      	mov	r5, r7
 8007b56:	1a80      	subs	r0, r0, r2
 8007b58:	fa0b f000 	lsl.w	r0, fp, r0
 8007b5c:	4318      	orrs	r0, r3
 8007b5e:	9004      	str	r0, [sp, #16]
 8007b60:	e7d3      	b.n	8007b0a <_svfiprintf_r+0x92>
 8007b62:	9a03      	ldr	r2, [sp, #12]
 8007b64:	1d11      	adds	r1, r2, #4
 8007b66:	6812      	ldr	r2, [r2, #0]
 8007b68:	9103      	str	r1, [sp, #12]
 8007b6a:	2a00      	cmp	r2, #0
 8007b6c:	db01      	blt.n	8007b72 <_svfiprintf_r+0xfa>
 8007b6e:	9207      	str	r2, [sp, #28]
 8007b70:	e004      	b.n	8007b7c <_svfiprintf_r+0x104>
 8007b72:	4252      	negs	r2, r2
 8007b74:	f043 0302 	orr.w	r3, r3, #2
 8007b78:	9207      	str	r2, [sp, #28]
 8007b7a:	9304      	str	r3, [sp, #16]
 8007b7c:	783b      	ldrb	r3, [r7, #0]
 8007b7e:	2b2e      	cmp	r3, #46	; 0x2e
 8007b80:	d10c      	bne.n	8007b9c <_svfiprintf_r+0x124>
 8007b82:	787b      	ldrb	r3, [r7, #1]
 8007b84:	2b2a      	cmp	r3, #42	; 0x2a
 8007b86:	d133      	bne.n	8007bf0 <_svfiprintf_r+0x178>
 8007b88:	9b03      	ldr	r3, [sp, #12]
 8007b8a:	3702      	adds	r7, #2
 8007b8c:	1d1a      	adds	r2, r3, #4
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	9203      	str	r2, [sp, #12]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	bfb8      	it	lt
 8007b96:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b9a:	9305      	str	r3, [sp, #20]
 8007b9c:	4d2e      	ldr	r5, [pc, #184]	; (8007c58 <_svfiprintf_r+0x1e0>)
 8007b9e:	2203      	movs	r2, #3
 8007ba0:	7839      	ldrb	r1, [r7, #0]
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	f7ff fa48 	bl	8007038 <memchr>
 8007ba8:	b138      	cbz	r0, 8007bba <_svfiprintf_r+0x142>
 8007baa:	2340      	movs	r3, #64	; 0x40
 8007bac:	1b40      	subs	r0, r0, r5
 8007bae:	fa03 f000 	lsl.w	r0, r3, r0
 8007bb2:	9b04      	ldr	r3, [sp, #16]
 8007bb4:	3701      	adds	r7, #1
 8007bb6:	4303      	orrs	r3, r0
 8007bb8:	9304      	str	r3, [sp, #16]
 8007bba:	7839      	ldrb	r1, [r7, #0]
 8007bbc:	2206      	movs	r2, #6
 8007bbe:	4827      	ldr	r0, [pc, #156]	; (8007c5c <_svfiprintf_r+0x1e4>)
 8007bc0:	1c7e      	adds	r6, r7, #1
 8007bc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bc6:	f7ff fa37 	bl	8007038 <memchr>
 8007bca:	2800      	cmp	r0, #0
 8007bcc:	d038      	beq.n	8007c40 <_svfiprintf_r+0x1c8>
 8007bce:	4b24      	ldr	r3, [pc, #144]	; (8007c60 <_svfiprintf_r+0x1e8>)
 8007bd0:	bb13      	cbnz	r3, 8007c18 <_svfiprintf_r+0x1a0>
 8007bd2:	9b03      	ldr	r3, [sp, #12]
 8007bd4:	3307      	adds	r3, #7
 8007bd6:	f023 0307 	bic.w	r3, r3, #7
 8007bda:	3308      	adds	r3, #8
 8007bdc:	9303      	str	r3, [sp, #12]
 8007bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007be0:	444b      	add	r3, r9
 8007be2:	9309      	str	r3, [sp, #36]	; 0x24
 8007be4:	e76d      	b.n	8007ac2 <_svfiprintf_r+0x4a>
 8007be6:	fb05 3202 	mla	r2, r5, r2, r3
 8007bea:	2001      	movs	r0, #1
 8007bec:	460f      	mov	r7, r1
 8007bee:	e7a6      	b.n	8007b3e <_svfiprintf_r+0xc6>
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	250a      	movs	r5, #10
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	3701      	adds	r7, #1
 8007bf8:	9305      	str	r3, [sp, #20]
 8007bfa:	4638      	mov	r0, r7
 8007bfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c00:	3a30      	subs	r2, #48	; 0x30
 8007c02:	2a09      	cmp	r2, #9
 8007c04:	d903      	bls.n	8007c0e <_svfiprintf_r+0x196>
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d0c8      	beq.n	8007b9c <_svfiprintf_r+0x124>
 8007c0a:	9105      	str	r1, [sp, #20]
 8007c0c:	e7c6      	b.n	8007b9c <_svfiprintf_r+0x124>
 8007c0e:	fb05 2101 	mla	r1, r5, r1, r2
 8007c12:	2301      	movs	r3, #1
 8007c14:	4607      	mov	r7, r0
 8007c16:	e7f0      	b.n	8007bfa <_svfiprintf_r+0x182>
 8007c18:	ab03      	add	r3, sp, #12
 8007c1a:	9300      	str	r3, [sp, #0]
 8007c1c:	4622      	mov	r2, r4
 8007c1e:	4b11      	ldr	r3, [pc, #68]	; (8007c64 <_svfiprintf_r+0x1ec>)
 8007c20:	a904      	add	r1, sp, #16
 8007c22:	4640      	mov	r0, r8
 8007c24:	f7fc fb0a 	bl	800423c <_printf_float>
 8007c28:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007c2c:	4681      	mov	r9, r0
 8007c2e:	d1d6      	bne.n	8007bde <_svfiprintf_r+0x166>
 8007c30:	89a3      	ldrh	r3, [r4, #12]
 8007c32:	065b      	lsls	r3, r3, #25
 8007c34:	f53f af35 	bmi.w	8007aa2 <_svfiprintf_r+0x2a>
 8007c38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c3a:	b01d      	add	sp, #116	; 0x74
 8007c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c40:	ab03      	add	r3, sp, #12
 8007c42:	9300      	str	r3, [sp, #0]
 8007c44:	4622      	mov	r2, r4
 8007c46:	4b07      	ldr	r3, [pc, #28]	; (8007c64 <_svfiprintf_r+0x1ec>)
 8007c48:	a904      	add	r1, sp, #16
 8007c4a:	4640      	mov	r0, r8
 8007c4c:	f7fc fda2 	bl	8004794 <_printf_i>
 8007c50:	e7ea      	b.n	8007c28 <_svfiprintf_r+0x1b0>
 8007c52:	bf00      	nop
 8007c54:	08008744 	.word	0x08008744
 8007c58:	0800874a 	.word	0x0800874a
 8007c5c:	0800874e 	.word	0x0800874e
 8007c60:	0800423d 	.word	0x0800423d
 8007c64:	080079c5 	.word	0x080079c5

08007c68 <__sfputc_r>:
 8007c68:	6893      	ldr	r3, [r2, #8]
 8007c6a:	b410      	push	{r4}
 8007c6c:	3b01      	subs	r3, #1
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	6093      	str	r3, [r2, #8]
 8007c72:	da07      	bge.n	8007c84 <__sfputc_r+0x1c>
 8007c74:	6994      	ldr	r4, [r2, #24]
 8007c76:	42a3      	cmp	r3, r4
 8007c78:	db01      	blt.n	8007c7e <__sfputc_r+0x16>
 8007c7a:	290a      	cmp	r1, #10
 8007c7c:	d102      	bne.n	8007c84 <__sfputc_r+0x1c>
 8007c7e:	bc10      	pop	{r4}
 8007c80:	f000 b996 	b.w	8007fb0 <__swbuf_r>
 8007c84:	6813      	ldr	r3, [r2, #0]
 8007c86:	1c58      	adds	r0, r3, #1
 8007c88:	6010      	str	r0, [r2, #0]
 8007c8a:	7019      	strb	r1, [r3, #0]
 8007c8c:	4608      	mov	r0, r1
 8007c8e:	bc10      	pop	{r4}
 8007c90:	4770      	bx	lr

08007c92 <__sfputs_r>:
 8007c92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c94:	4606      	mov	r6, r0
 8007c96:	460f      	mov	r7, r1
 8007c98:	4614      	mov	r4, r2
 8007c9a:	18d5      	adds	r5, r2, r3
 8007c9c:	42ac      	cmp	r4, r5
 8007c9e:	d101      	bne.n	8007ca4 <__sfputs_r+0x12>
 8007ca0:	2000      	movs	r0, #0
 8007ca2:	e007      	b.n	8007cb4 <__sfputs_r+0x22>
 8007ca4:	463a      	mov	r2, r7
 8007ca6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007caa:	4630      	mov	r0, r6
 8007cac:	f7ff ffdc 	bl	8007c68 <__sfputc_r>
 8007cb0:	1c43      	adds	r3, r0, #1
 8007cb2:	d1f3      	bne.n	8007c9c <__sfputs_r+0xa>
 8007cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007cb8 <_vfiprintf_r>:
 8007cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cbc:	460c      	mov	r4, r1
 8007cbe:	b09d      	sub	sp, #116	; 0x74
 8007cc0:	4617      	mov	r7, r2
 8007cc2:	461d      	mov	r5, r3
 8007cc4:	4606      	mov	r6, r0
 8007cc6:	b118      	cbz	r0, 8007cd0 <_vfiprintf_r+0x18>
 8007cc8:	6983      	ldr	r3, [r0, #24]
 8007cca:	b90b      	cbnz	r3, 8007cd0 <_vfiprintf_r+0x18>
 8007ccc:	f7fe fdd4 	bl	8006878 <__sinit>
 8007cd0:	4b7c      	ldr	r3, [pc, #496]	; (8007ec4 <_vfiprintf_r+0x20c>)
 8007cd2:	429c      	cmp	r4, r3
 8007cd4:	d158      	bne.n	8007d88 <_vfiprintf_r+0xd0>
 8007cd6:	6874      	ldr	r4, [r6, #4]
 8007cd8:	89a3      	ldrh	r3, [r4, #12]
 8007cda:	0718      	lsls	r0, r3, #28
 8007cdc:	d55e      	bpl.n	8007d9c <_vfiprintf_r+0xe4>
 8007cde:	6923      	ldr	r3, [r4, #16]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d05b      	beq.n	8007d9c <_vfiprintf_r+0xe4>
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ce8:	2320      	movs	r3, #32
 8007cea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007cee:	2330      	movs	r3, #48	; 0x30
 8007cf0:	f04f 0b01 	mov.w	fp, #1
 8007cf4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007cf8:	9503      	str	r5, [sp, #12]
 8007cfa:	46b8      	mov	r8, r7
 8007cfc:	4645      	mov	r5, r8
 8007cfe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007d02:	b10b      	cbz	r3, 8007d08 <_vfiprintf_r+0x50>
 8007d04:	2b25      	cmp	r3, #37	; 0x25
 8007d06:	d154      	bne.n	8007db2 <_vfiprintf_r+0xfa>
 8007d08:	ebb8 0a07 	subs.w	sl, r8, r7
 8007d0c:	d00b      	beq.n	8007d26 <_vfiprintf_r+0x6e>
 8007d0e:	4653      	mov	r3, sl
 8007d10:	463a      	mov	r2, r7
 8007d12:	4621      	mov	r1, r4
 8007d14:	4630      	mov	r0, r6
 8007d16:	f7ff ffbc 	bl	8007c92 <__sfputs_r>
 8007d1a:	3001      	adds	r0, #1
 8007d1c:	f000 80c2 	beq.w	8007ea4 <_vfiprintf_r+0x1ec>
 8007d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d22:	4453      	add	r3, sl
 8007d24:	9309      	str	r3, [sp, #36]	; 0x24
 8007d26:	f898 3000 	ldrb.w	r3, [r8]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	f000 80ba 	beq.w	8007ea4 <_vfiprintf_r+0x1ec>
 8007d30:	2300      	movs	r3, #0
 8007d32:	f04f 32ff 	mov.w	r2, #4294967295
 8007d36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d3a:	9304      	str	r3, [sp, #16]
 8007d3c:	9307      	str	r3, [sp, #28]
 8007d3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d42:	931a      	str	r3, [sp, #104]	; 0x68
 8007d44:	46a8      	mov	r8, r5
 8007d46:	2205      	movs	r2, #5
 8007d48:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007d4c:	485e      	ldr	r0, [pc, #376]	; (8007ec8 <_vfiprintf_r+0x210>)
 8007d4e:	f7ff f973 	bl	8007038 <memchr>
 8007d52:	9b04      	ldr	r3, [sp, #16]
 8007d54:	bb78      	cbnz	r0, 8007db6 <_vfiprintf_r+0xfe>
 8007d56:	06d9      	lsls	r1, r3, #27
 8007d58:	bf44      	itt	mi
 8007d5a:	2220      	movmi	r2, #32
 8007d5c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007d60:	071a      	lsls	r2, r3, #28
 8007d62:	bf44      	itt	mi
 8007d64:	222b      	movmi	r2, #43	; 0x2b
 8007d66:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007d6a:	782a      	ldrb	r2, [r5, #0]
 8007d6c:	2a2a      	cmp	r2, #42	; 0x2a
 8007d6e:	d02a      	beq.n	8007dc6 <_vfiprintf_r+0x10e>
 8007d70:	46a8      	mov	r8, r5
 8007d72:	2000      	movs	r0, #0
 8007d74:	250a      	movs	r5, #10
 8007d76:	9a07      	ldr	r2, [sp, #28]
 8007d78:	4641      	mov	r1, r8
 8007d7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d7e:	3b30      	subs	r3, #48	; 0x30
 8007d80:	2b09      	cmp	r3, #9
 8007d82:	d969      	bls.n	8007e58 <_vfiprintf_r+0x1a0>
 8007d84:	b360      	cbz	r0, 8007de0 <_vfiprintf_r+0x128>
 8007d86:	e024      	b.n	8007dd2 <_vfiprintf_r+0x11a>
 8007d88:	4b50      	ldr	r3, [pc, #320]	; (8007ecc <_vfiprintf_r+0x214>)
 8007d8a:	429c      	cmp	r4, r3
 8007d8c:	d101      	bne.n	8007d92 <_vfiprintf_r+0xda>
 8007d8e:	68b4      	ldr	r4, [r6, #8]
 8007d90:	e7a2      	b.n	8007cd8 <_vfiprintf_r+0x20>
 8007d92:	4b4f      	ldr	r3, [pc, #316]	; (8007ed0 <_vfiprintf_r+0x218>)
 8007d94:	429c      	cmp	r4, r3
 8007d96:	bf08      	it	eq
 8007d98:	68f4      	ldreq	r4, [r6, #12]
 8007d9a:	e79d      	b.n	8007cd8 <_vfiprintf_r+0x20>
 8007d9c:	4621      	mov	r1, r4
 8007d9e:	4630      	mov	r0, r6
 8007da0:	f000 f978 	bl	8008094 <__swsetup_r>
 8007da4:	2800      	cmp	r0, #0
 8007da6:	d09d      	beq.n	8007ce4 <_vfiprintf_r+0x2c>
 8007da8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dac:	b01d      	add	sp, #116	; 0x74
 8007dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007db2:	46a8      	mov	r8, r5
 8007db4:	e7a2      	b.n	8007cfc <_vfiprintf_r+0x44>
 8007db6:	4a44      	ldr	r2, [pc, #272]	; (8007ec8 <_vfiprintf_r+0x210>)
 8007db8:	4645      	mov	r5, r8
 8007dba:	1a80      	subs	r0, r0, r2
 8007dbc:	fa0b f000 	lsl.w	r0, fp, r0
 8007dc0:	4318      	orrs	r0, r3
 8007dc2:	9004      	str	r0, [sp, #16]
 8007dc4:	e7be      	b.n	8007d44 <_vfiprintf_r+0x8c>
 8007dc6:	9a03      	ldr	r2, [sp, #12]
 8007dc8:	1d11      	adds	r1, r2, #4
 8007dca:	6812      	ldr	r2, [r2, #0]
 8007dcc:	9103      	str	r1, [sp, #12]
 8007dce:	2a00      	cmp	r2, #0
 8007dd0:	db01      	blt.n	8007dd6 <_vfiprintf_r+0x11e>
 8007dd2:	9207      	str	r2, [sp, #28]
 8007dd4:	e004      	b.n	8007de0 <_vfiprintf_r+0x128>
 8007dd6:	4252      	negs	r2, r2
 8007dd8:	f043 0302 	orr.w	r3, r3, #2
 8007ddc:	9207      	str	r2, [sp, #28]
 8007dde:	9304      	str	r3, [sp, #16]
 8007de0:	f898 3000 	ldrb.w	r3, [r8]
 8007de4:	2b2e      	cmp	r3, #46	; 0x2e
 8007de6:	d10e      	bne.n	8007e06 <_vfiprintf_r+0x14e>
 8007de8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007dec:	2b2a      	cmp	r3, #42	; 0x2a
 8007dee:	d138      	bne.n	8007e62 <_vfiprintf_r+0x1aa>
 8007df0:	9b03      	ldr	r3, [sp, #12]
 8007df2:	f108 0802 	add.w	r8, r8, #2
 8007df6:	1d1a      	adds	r2, r3, #4
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	9203      	str	r2, [sp, #12]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	bfb8      	it	lt
 8007e00:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e04:	9305      	str	r3, [sp, #20]
 8007e06:	4d33      	ldr	r5, [pc, #204]	; (8007ed4 <_vfiprintf_r+0x21c>)
 8007e08:	2203      	movs	r2, #3
 8007e0a:	f898 1000 	ldrb.w	r1, [r8]
 8007e0e:	4628      	mov	r0, r5
 8007e10:	f7ff f912 	bl	8007038 <memchr>
 8007e14:	b140      	cbz	r0, 8007e28 <_vfiprintf_r+0x170>
 8007e16:	2340      	movs	r3, #64	; 0x40
 8007e18:	1b40      	subs	r0, r0, r5
 8007e1a:	fa03 f000 	lsl.w	r0, r3, r0
 8007e1e:	9b04      	ldr	r3, [sp, #16]
 8007e20:	f108 0801 	add.w	r8, r8, #1
 8007e24:	4303      	orrs	r3, r0
 8007e26:	9304      	str	r3, [sp, #16]
 8007e28:	f898 1000 	ldrb.w	r1, [r8]
 8007e2c:	2206      	movs	r2, #6
 8007e2e:	482a      	ldr	r0, [pc, #168]	; (8007ed8 <_vfiprintf_r+0x220>)
 8007e30:	f108 0701 	add.w	r7, r8, #1
 8007e34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e38:	f7ff f8fe 	bl	8007038 <memchr>
 8007e3c:	2800      	cmp	r0, #0
 8007e3e:	d037      	beq.n	8007eb0 <_vfiprintf_r+0x1f8>
 8007e40:	4b26      	ldr	r3, [pc, #152]	; (8007edc <_vfiprintf_r+0x224>)
 8007e42:	bb1b      	cbnz	r3, 8007e8c <_vfiprintf_r+0x1d4>
 8007e44:	9b03      	ldr	r3, [sp, #12]
 8007e46:	3307      	adds	r3, #7
 8007e48:	f023 0307 	bic.w	r3, r3, #7
 8007e4c:	3308      	adds	r3, #8
 8007e4e:	9303      	str	r3, [sp, #12]
 8007e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e52:	444b      	add	r3, r9
 8007e54:	9309      	str	r3, [sp, #36]	; 0x24
 8007e56:	e750      	b.n	8007cfa <_vfiprintf_r+0x42>
 8007e58:	fb05 3202 	mla	r2, r5, r2, r3
 8007e5c:	2001      	movs	r0, #1
 8007e5e:	4688      	mov	r8, r1
 8007e60:	e78a      	b.n	8007d78 <_vfiprintf_r+0xc0>
 8007e62:	2300      	movs	r3, #0
 8007e64:	250a      	movs	r5, #10
 8007e66:	4619      	mov	r1, r3
 8007e68:	f108 0801 	add.w	r8, r8, #1
 8007e6c:	9305      	str	r3, [sp, #20]
 8007e6e:	4640      	mov	r0, r8
 8007e70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e74:	3a30      	subs	r2, #48	; 0x30
 8007e76:	2a09      	cmp	r2, #9
 8007e78:	d903      	bls.n	8007e82 <_vfiprintf_r+0x1ca>
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d0c3      	beq.n	8007e06 <_vfiprintf_r+0x14e>
 8007e7e:	9105      	str	r1, [sp, #20]
 8007e80:	e7c1      	b.n	8007e06 <_vfiprintf_r+0x14e>
 8007e82:	fb05 2101 	mla	r1, r5, r1, r2
 8007e86:	2301      	movs	r3, #1
 8007e88:	4680      	mov	r8, r0
 8007e8a:	e7f0      	b.n	8007e6e <_vfiprintf_r+0x1b6>
 8007e8c:	ab03      	add	r3, sp, #12
 8007e8e:	9300      	str	r3, [sp, #0]
 8007e90:	4622      	mov	r2, r4
 8007e92:	4b13      	ldr	r3, [pc, #76]	; (8007ee0 <_vfiprintf_r+0x228>)
 8007e94:	a904      	add	r1, sp, #16
 8007e96:	4630      	mov	r0, r6
 8007e98:	f7fc f9d0 	bl	800423c <_printf_float>
 8007e9c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007ea0:	4681      	mov	r9, r0
 8007ea2:	d1d5      	bne.n	8007e50 <_vfiprintf_r+0x198>
 8007ea4:	89a3      	ldrh	r3, [r4, #12]
 8007ea6:	065b      	lsls	r3, r3, #25
 8007ea8:	f53f af7e 	bmi.w	8007da8 <_vfiprintf_r+0xf0>
 8007eac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007eae:	e77d      	b.n	8007dac <_vfiprintf_r+0xf4>
 8007eb0:	ab03      	add	r3, sp, #12
 8007eb2:	9300      	str	r3, [sp, #0]
 8007eb4:	4622      	mov	r2, r4
 8007eb6:	4b0a      	ldr	r3, [pc, #40]	; (8007ee0 <_vfiprintf_r+0x228>)
 8007eb8:	a904      	add	r1, sp, #16
 8007eba:	4630      	mov	r0, r6
 8007ebc:	f7fc fc6a 	bl	8004794 <_printf_i>
 8007ec0:	e7ec      	b.n	8007e9c <_vfiprintf_r+0x1e4>
 8007ec2:	bf00      	nop
 8007ec4:	080085f8 	.word	0x080085f8
 8007ec8:	08008744 	.word	0x08008744
 8007ecc:	08008618 	.word	0x08008618
 8007ed0:	080085d8 	.word	0x080085d8
 8007ed4:	0800874a 	.word	0x0800874a
 8007ed8:	0800874e 	.word	0x0800874e
 8007edc:	0800423d 	.word	0x0800423d
 8007ee0:	08007c93 	.word	0x08007c93

08007ee4 <_sbrk_r>:
 8007ee4:	b538      	push	{r3, r4, r5, lr}
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	4c05      	ldr	r4, [pc, #20]	; (8007f00 <_sbrk_r+0x1c>)
 8007eea:	4605      	mov	r5, r0
 8007eec:	4608      	mov	r0, r1
 8007eee:	6023      	str	r3, [r4, #0]
 8007ef0:	f7f9 fcea 	bl	80018c8 <_sbrk>
 8007ef4:	1c43      	adds	r3, r0, #1
 8007ef6:	d102      	bne.n	8007efe <_sbrk_r+0x1a>
 8007ef8:	6823      	ldr	r3, [r4, #0]
 8007efa:	b103      	cbz	r3, 8007efe <_sbrk_r+0x1a>
 8007efc:	602b      	str	r3, [r5, #0]
 8007efe:	bd38      	pop	{r3, r4, r5, pc}
 8007f00:	200002cc 	.word	0x200002cc

08007f04 <__sread>:
 8007f04:	b510      	push	{r4, lr}
 8007f06:	460c      	mov	r4, r1
 8007f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f0c:	f000 faa8 	bl	8008460 <_read_r>
 8007f10:	2800      	cmp	r0, #0
 8007f12:	bfab      	itete	ge
 8007f14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007f16:	89a3      	ldrhlt	r3, [r4, #12]
 8007f18:	181b      	addge	r3, r3, r0
 8007f1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007f1e:	bfac      	ite	ge
 8007f20:	6563      	strge	r3, [r4, #84]	; 0x54
 8007f22:	81a3      	strhlt	r3, [r4, #12]
 8007f24:	bd10      	pop	{r4, pc}

08007f26 <__swrite>:
 8007f26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f2a:	461f      	mov	r7, r3
 8007f2c:	898b      	ldrh	r3, [r1, #12]
 8007f2e:	4605      	mov	r5, r0
 8007f30:	05db      	lsls	r3, r3, #23
 8007f32:	460c      	mov	r4, r1
 8007f34:	4616      	mov	r6, r2
 8007f36:	d505      	bpl.n	8007f44 <__swrite+0x1e>
 8007f38:	2302      	movs	r3, #2
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f40:	f000 f9d6 	bl	80082f0 <_lseek_r>
 8007f44:	89a3      	ldrh	r3, [r4, #12]
 8007f46:	4632      	mov	r2, r6
 8007f48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f4c:	81a3      	strh	r3, [r4, #12]
 8007f4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f52:	463b      	mov	r3, r7
 8007f54:	4628      	mov	r0, r5
 8007f56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f5a:	f000 b889 	b.w	8008070 <_write_r>

08007f5e <__sseek>:
 8007f5e:	b510      	push	{r4, lr}
 8007f60:	460c      	mov	r4, r1
 8007f62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f66:	f000 f9c3 	bl	80082f0 <_lseek_r>
 8007f6a:	1c43      	adds	r3, r0, #1
 8007f6c:	89a3      	ldrh	r3, [r4, #12]
 8007f6e:	bf15      	itete	ne
 8007f70:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f7a:	81a3      	strheq	r3, [r4, #12]
 8007f7c:	bf18      	it	ne
 8007f7e:	81a3      	strhne	r3, [r4, #12]
 8007f80:	bd10      	pop	{r4, pc}

08007f82 <__sclose>:
 8007f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f86:	f000 b8f3 	b.w	8008170 <_close_r>

08007f8a <strncmp>:
 8007f8a:	b510      	push	{r4, lr}
 8007f8c:	b16a      	cbz	r2, 8007faa <strncmp+0x20>
 8007f8e:	3901      	subs	r1, #1
 8007f90:	1884      	adds	r4, r0, r2
 8007f92:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007f96:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d103      	bne.n	8007fa6 <strncmp+0x1c>
 8007f9e:	42a0      	cmp	r0, r4
 8007fa0:	d001      	beq.n	8007fa6 <strncmp+0x1c>
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d1f5      	bne.n	8007f92 <strncmp+0x8>
 8007fa6:	1a98      	subs	r0, r3, r2
 8007fa8:	bd10      	pop	{r4, pc}
 8007faa:	4610      	mov	r0, r2
 8007fac:	e7fc      	b.n	8007fa8 <strncmp+0x1e>
	...

08007fb0 <__swbuf_r>:
 8007fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fb2:	460e      	mov	r6, r1
 8007fb4:	4614      	mov	r4, r2
 8007fb6:	4605      	mov	r5, r0
 8007fb8:	b118      	cbz	r0, 8007fc2 <__swbuf_r+0x12>
 8007fba:	6983      	ldr	r3, [r0, #24]
 8007fbc:	b90b      	cbnz	r3, 8007fc2 <__swbuf_r+0x12>
 8007fbe:	f7fe fc5b 	bl	8006878 <__sinit>
 8007fc2:	4b21      	ldr	r3, [pc, #132]	; (8008048 <__swbuf_r+0x98>)
 8007fc4:	429c      	cmp	r4, r3
 8007fc6:	d12a      	bne.n	800801e <__swbuf_r+0x6e>
 8007fc8:	686c      	ldr	r4, [r5, #4]
 8007fca:	69a3      	ldr	r3, [r4, #24]
 8007fcc:	60a3      	str	r3, [r4, #8]
 8007fce:	89a3      	ldrh	r3, [r4, #12]
 8007fd0:	071a      	lsls	r2, r3, #28
 8007fd2:	d52e      	bpl.n	8008032 <__swbuf_r+0x82>
 8007fd4:	6923      	ldr	r3, [r4, #16]
 8007fd6:	b363      	cbz	r3, 8008032 <__swbuf_r+0x82>
 8007fd8:	6923      	ldr	r3, [r4, #16]
 8007fda:	6820      	ldr	r0, [r4, #0]
 8007fdc:	b2f6      	uxtb	r6, r6
 8007fde:	1ac0      	subs	r0, r0, r3
 8007fe0:	6963      	ldr	r3, [r4, #20]
 8007fe2:	4637      	mov	r7, r6
 8007fe4:	4283      	cmp	r3, r0
 8007fe6:	dc04      	bgt.n	8007ff2 <__swbuf_r+0x42>
 8007fe8:	4621      	mov	r1, r4
 8007fea:	4628      	mov	r0, r5
 8007fec:	f000 f956 	bl	800829c <_fflush_r>
 8007ff0:	bb28      	cbnz	r0, 800803e <__swbuf_r+0x8e>
 8007ff2:	68a3      	ldr	r3, [r4, #8]
 8007ff4:	3001      	adds	r0, #1
 8007ff6:	3b01      	subs	r3, #1
 8007ff8:	60a3      	str	r3, [r4, #8]
 8007ffa:	6823      	ldr	r3, [r4, #0]
 8007ffc:	1c5a      	adds	r2, r3, #1
 8007ffe:	6022      	str	r2, [r4, #0]
 8008000:	701e      	strb	r6, [r3, #0]
 8008002:	6963      	ldr	r3, [r4, #20]
 8008004:	4283      	cmp	r3, r0
 8008006:	d004      	beq.n	8008012 <__swbuf_r+0x62>
 8008008:	89a3      	ldrh	r3, [r4, #12]
 800800a:	07db      	lsls	r3, r3, #31
 800800c:	d519      	bpl.n	8008042 <__swbuf_r+0x92>
 800800e:	2e0a      	cmp	r6, #10
 8008010:	d117      	bne.n	8008042 <__swbuf_r+0x92>
 8008012:	4621      	mov	r1, r4
 8008014:	4628      	mov	r0, r5
 8008016:	f000 f941 	bl	800829c <_fflush_r>
 800801a:	b190      	cbz	r0, 8008042 <__swbuf_r+0x92>
 800801c:	e00f      	b.n	800803e <__swbuf_r+0x8e>
 800801e:	4b0b      	ldr	r3, [pc, #44]	; (800804c <__swbuf_r+0x9c>)
 8008020:	429c      	cmp	r4, r3
 8008022:	d101      	bne.n	8008028 <__swbuf_r+0x78>
 8008024:	68ac      	ldr	r4, [r5, #8]
 8008026:	e7d0      	b.n	8007fca <__swbuf_r+0x1a>
 8008028:	4b09      	ldr	r3, [pc, #36]	; (8008050 <__swbuf_r+0xa0>)
 800802a:	429c      	cmp	r4, r3
 800802c:	bf08      	it	eq
 800802e:	68ec      	ldreq	r4, [r5, #12]
 8008030:	e7cb      	b.n	8007fca <__swbuf_r+0x1a>
 8008032:	4621      	mov	r1, r4
 8008034:	4628      	mov	r0, r5
 8008036:	f000 f82d 	bl	8008094 <__swsetup_r>
 800803a:	2800      	cmp	r0, #0
 800803c:	d0cc      	beq.n	8007fd8 <__swbuf_r+0x28>
 800803e:	f04f 37ff 	mov.w	r7, #4294967295
 8008042:	4638      	mov	r0, r7
 8008044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008046:	bf00      	nop
 8008048:	080085f8 	.word	0x080085f8
 800804c:	08008618 	.word	0x08008618
 8008050:	080085d8 	.word	0x080085d8

08008054 <__ascii_wctomb>:
 8008054:	b149      	cbz	r1, 800806a <__ascii_wctomb+0x16>
 8008056:	2aff      	cmp	r2, #255	; 0xff
 8008058:	bf8b      	itete	hi
 800805a:	238a      	movhi	r3, #138	; 0x8a
 800805c:	700a      	strbls	r2, [r1, #0]
 800805e:	6003      	strhi	r3, [r0, #0]
 8008060:	2001      	movls	r0, #1
 8008062:	bf88      	it	hi
 8008064:	f04f 30ff 	movhi.w	r0, #4294967295
 8008068:	4770      	bx	lr
 800806a:	4608      	mov	r0, r1
 800806c:	4770      	bx	lr
	...

08008070 <_write_r>:
 8008070:	b538      	push	{r3, r4, r5, lr}
 8008072:	4605      	mov	r5, r0
 8008074:	4608      	mov	r0, r1
 8008076:	4611      	mov	r1, r2
 8008078:	2200      	movs	r2, #0
 800807a:	4c05      	ldr	r4, [pc, #20]	; (8008090 <_write_r+0x20>)
 800807c:	6022      	str	r2, [r4, #0]
 800807e:	461a      	mov	r2, r3
 8008080:	f7f9 fbd5 	bl	800182e <_write>
 8008084:	1c43      	adds	r3, r0, #1
 8008086:	d102      	bne.n	800808e <_write_r+0x1e>
 8008088:	6823      	ldr	r3, [r4, #0]
 800808a:	b103      	cbz	r3, 800808e <_write_r+0x1e>
 800808c:	602b      	str	r3, [r5, #0]
 800808e:	bd38      	pop	{r3, r4, r5, pc}
 8008090:	200002cc 	.word	0x200002cc

08008094 <__swsetup_r>:
 8008094:	4b32      	ldr	r3, [pc, #200]	; (8008160 <__swsetup_r+0xcc>)
 8008096:	b570      	push	{r4, r5, r6, lr}
 8008098:	681d      	ldr	r5, [r3, #0]
 800809a:	4606      	mov	r6, r0
 800809c:	460c      	mov	r4, r1
 800809e:	b125      	cbz	r5, 80080aa <__swsetup_r+0x16>
 80080a0:	69ab      	ldr	r3, [r5, #24]
 80080a2:	b913      	cbnz	r3, 80080aa <__swsetup_r+0x16>
 80080a4:	4628      	mov	r0, r5
 80080a6:	f7fe fbe7 	bl	8006878 <__sinit>
 80080aa:	4b2e      	ldr	r3, [pc, #184]	; (8008164 <__swsetup_r+0xd0>)
 80080ac:	429c      	cmp	r4, r3
 80080ae:	d10f      	bne.n	80080d0 <__swsetup_r+0x3c>
 80080b0:	686c      	ldr	r4, [r5, #4]
 80080b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080b6:	b29a      	uxth	r2, r3
 80080b8:	0715      	lsls	r5, r2, #28
 80080ba:	d42c      	bmi.n	8008116 <__swsetup_r+0x82>
 80080bc:	06d0      	lsls	r0, r2, #27
 80080be:	d411      	bmi.n	80080e4 <__swsetup_r+0x50>
 80080c0:	2209      	movs	r2, #9
 80080c2:	6032      	str	r2, [r6, #0]
 80080c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080c8:	81a3      	strh	r3, [r4, #12]
 80080ca:	f04f 30ff 	mov.w	r0, #4294967295
 80080ce:	e03e      	b.n	800814e <__swsetup_r+0xba>
 80080d0:	4b25      	ldr	r3, [pc, #148]	; (8008168 <__swsetup_r+0xd4>)
 80080d2:	429c      	cmp	r4, r3
 80080d4:	d101      	bne.n	80080da <__swsetup_r+0x46>
 80080d6:	68ac      	ldr	r4, [r5, #8]
 80080d8:	e7eb      	b.n	80080b2 <__swsetup_r+0x1e>
 80080da:	4b24      	ldr	r3, [pc, #144]	; (800816c <__swsetup_r+0xd8>)
 80080dc:	429c      	cmp	r4, r3
 80080de:	bf08      	it	eq
 80080e0:	68ec      	ldreq	r4, [r5, #12]
 80080e2:	e7e6      	b.n	80080b2 <__swsetup_r+0x1e>
 80080e4:	0751      	lsls	r1, r2, #29
 80080e6:	d512      	bpl.n	800810e <__swsetup_r+0x7a>
 80080e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080ea:	b141      	cbz	r1, 80080fe <__swsetup_r+0x6a>
 80080ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080f0:	4299      	cmp	r1, r3
 80080f2:	d002      	beq.n	80080fa <__swsetup_r+0x66>
 80080f4:	4630      	mov	r0, r6
 80080f6:	f7ff fbbf 	bl	8007878 <_free_r>
 80080fa:	2300      	movs	r3, #0
 80080fc:	6363      	str	r3, [r4, #52]	; 0x34
 80080fe:	89a3      	ldrh	r3, [r4, #12]
 8008100:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008104:	81a3      	strh	r3, [r4, #12]
 8008106:	2300      	movs	r3, #0
 8008108:	6063      	str	r3, [r4, #4]
 800810a:	6923      	ldr	r3, [r4, #16]
 800810c:	6023      	str	r3, [r4, #0]
 800810e:	89a3      	ldrh	r3, [r4, #12]
 8008110:	f043 0308 	orr.w	r3, r3, #8
 8008114:	81a3      	strh	r3, [r4, #12]
 8008116:	6923      	ldr	r3, [r4, #16]
 8008118:	b94b      	cbnz	r3, 800812e <__swsetup_r+0x9a>
 800811a:	89a3      	ldrh	r3, [r4, #12]
 800811c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008124:	d003      	beq.n	800812e <__swsetup_r+0x9a>
 8008126:	4621      	mov	r1, r4
 8008128:	4630      	mov	r0, r6
 800812a:	f000 f917 	bl	800835c <__smakebuf_r>
 800812e:	89a2      	ldrh	r2, [r4, #12]
 8008130:	f012 0301 	ands.w	r3, r2, #1
 8008134:	d00c      	beq.n	8008150 <__swsetup_r+0xbc>
 8008136:	2300      	movs	r3, #0
 8008138:	60a3      	str	r3, [r4, #8]
 800813a:	6963      	ldr	r3, [r4, #20]
 800813c:	425b      	negs	r3, r3
 800813e:	61a3      	str	r3, [r4, #24]
 8008140:	6923      	ldr	r3, [r4, #16]
 8008142:	b953      	cbnz	r3, 800815a <__swsetup_r+0xc6>
 8008144:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008148:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800814c:	d1ba      	bne.n	80080c4 <__swsetup_r+0x30>
 800814e:	bd70      	pop	{r4, r5, r6, pc}
 8008150:	0792      	lsls	r2, r2, #30
 8008152:	bf58      	it	pl
 8008154:	6963      	ldrpl	r3, [r4, #20]
 8008156:	60a3      	str	r3, [r4, #8]
 8008158:	e7f2      	b.n	8008140 <__swsetup_r+0xac>
 800815a:	2000      	movs	r0, #0
 800815c:	e7f7      	b.n	800814e <__swsetup_r+0xba>
 800815e:	bf00      	nop
 8008160:	20000014 	.word	0x20000014
 8008164:	080085f8 	.word	0x080085f8
 8008168:	08008618 	.word	0x08008618
 800816c:	080085d8 	.word	0x080085d8

08008170 <_close_r>:
 8008170:	b538      	push	{r3, r4, r5, lr}
 8008172:	2300      	movs	r3, #0
 8008174:	4c05      	ldr	r4, [pc, #20]	; (800818c <_close_r+0x1c>)
 8008176:	4605      	mov	r5, r0
 8008178:	4608      	mov	r0, r1
 800817a:	6023      	str	r3, [r4, #0]
 800817c:	f7f9 fb73 	bl	8001866 <_close>
 8008180:	1c43      	adds	r3, r0, #1
 8008182:	d102      	bne.n	800818a <_close_r+0x1a>
 8008184:	6823      	ldr	r3, [r4, #0]
 8008186:	b103      	cbz	r3, 800818a <_close_r+0x1a>
 8008188:	602b      	str	r3, [r5, #0]
 800818a:	bd38      	pop	{r3, r4, r5, pc}
 800818c:	200002cc 	.word	0x200002cc

08008190 <__sflush_r>:
 8008190:	898a      	ldrh	r2, [r1, #12]
 8008192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008196:	4605      	mov	r5, r0
 8008198:	0710      	lsls	r0, r2, #28
 800819a:	460c      	mov	r4, r1
 800819c:	d458      	bmi.n	8008250 <__sflush_r+0xc0>
 800819e:	684b      	ldr	r3, [r1, #4]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	dc05      	bgt.n	80081b0 <__sflush_r+0x20>
 80081a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	dc02      	bgt.n	80081b0 <__sflush_r+0x20>
 80081aa:	2000      	movs	r0, #0
 80081ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081b2:	2e00      	cmp	r6, #0
 80081b4:	d0f9      	beq.n	80081aa <__sflush_r+0x1a>
 80081b6:	2300      	movs	r3, #0
 80081b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80081bc:	682f      	ldr	r7, [r5, #0]
 80081be:	6a21      	ldr	r1, [r4, #32]
 80081c0:	602b      	str	r3, [r5, #0]
 80081c2:	d032      	beq.n	800822a <__sflush_r+0x9a>
 80081c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80081c6:	89a3      	ldrh	r3, [r4, #12]
 80081c8:	075a      	lsls	r2, r3, #29
 80081ca:	d505      	bpl.n	80081d8 <__sflush_r+0x48>
 80081cc:	6863      	ldr	r3, [r4, #4]
 80081ce:	1ac0      	subs	r0, r0, r3
 80081d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80081d2:	b10b      	cbz	r3, 80081d8 <__sflush_r+0x48>
 80081d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80081d6:	1ac0      	subs	r0, r0, r3
 80081d8:	2300      	movs	r3, #0
 80081da:	4602      	mov	r2, r0
 80081dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081de:	6a21      	ldr	r1, [r4, #32]
 80081e0:	4628      	mov	r0, r5
 80081e2:	47b0      	blx	r6
 80081e4:	1c43      	adds	r3, r0, #1
 80081e6:	89a3      	ldrh	r3, [r4, #12]
 80081e8:	d106      	bne.n	80081f8 <__sflush_r+0x68>
 80081ea:	6829      	ldr	r1, [r5, #0]
 80081ec:	291d      	cmp	r1, #29
 80081ee:	d848      	bhi.n	8008282 <__sflush_r+0xf2>
 80081f0:	4a29      	ldr	r2, [pc, #164]	; (8008298 <__sflush_r+0x108>)
 80081f2:	40ca      	lsrs	r2, r1
 80081f4:	07d6      	lsls	r6, r2, #31
 80081f6:	d544      	bpl.n	8008282 <__sflush_r+0xf2>
 80081f8:	2200      	movs	r2, #0
 80081fa:	6062      	str	r2, [r4, #4]
 80081fc:	6922      	ldr	r2, [r4, #16]
 80081fe:	04d9      	lsls	r1, r3, #19
 8008200:	6022      	str	r2, [r4, #0]
 8008202:	d504      	bpl.n	800820e <__sflush_r+0x7e>
 8008204:	1c42      	adds	r2, r0, #1
 8008206:	d101      	bne.n	800820c <__sflush_r+0x7c>
 8008208:	682b      	ldr	r3, [r5, #0]
 800820a:	b903      	cbnz	r3, 800820e <__sflush_r+0x7e>
 800820c:	6560      	str	r0, [r4, #84]	; 0x54
 800820e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008210:	602f      	str	r7, [r5, #0]
 8008212:	2900      	cmp	r1, #0
 8008214:	d0c9      	beq.n	80081aa <__sflush_r+0x1a>
 8008216:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800821a:	4299      	cmp	r1, r3
 800821c:	d002      	beq.n	8008224 <__sflush_r+0x94>
 800821e:	4628      	mov	r0, r5
 8008220:	f7ff fb2a 	bl	8007878 <_free_r>
 8008224:	2000      	movs	r0, #0
 8008226:	6360      	str	r0, [r4, #52]	; 0x34
 8008228:	e7c0      	b.n	80081ac <__sflush_r+0x1c>
 800822a:	2301      	movs	r3, #1
 800822c:	4628      	mov	r0, r5
 800822e:	47b0      	blx	r6
 8008230:	1c41      	adds	r1, r0, #1
 8008232:	d1c8      	bne.n	80081c6 <__sflush_r+0x36>
 8008234:	682b      	ldr	r3, [r5, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d0c5      	beq.n	80081c6 <__sflush_r+0x36>
 800823a:	2b1d      	cmp	r3, #29
 800823c:	d001      	beq.n	8008242 <__sflush_r+0xb2>
 800823e:	2b16      	cmp	r3, #22
 8008240:	d101      	bne.n	8008246 <__sflush_r+0xb6>
 8008242:	602f      	str	r7, [r5, #0]
 8008244:	e7b1      	b.n	80081aa <__sflush_r+0x1a>
 8008246:	89a3      	ldrh	r3, [r4, #12]
 8008248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800824c:	81a3      	strh	r3, [r4, #12]
 800824e:	e7ad      	b.n	80081ac <__sflush_r+0x1c>
 8008250:	690f      	ldr	r7, [r1, #16]
 8008252:	2f00      	cmp	r7, #0
 8008254:	d0a9      	beq.n	80081aa <__sflush_r+0x1a>
 8008256:	0793      	lsls	r3, r2, #30
 8008258:	bf18      	it	ne
 800825a:	2300      	movne	r3, #0
 800825c:	680e      	ldr	r6, [r1, #0]
 800825e:	bf08      	it	eq
 8008260:	694b      	ldreq	r3, [r1, #20]
 8008262:	eba6 0807 	sub.w	r8, r6, r7
 8008266:	600f      	str	r7, [r1, #0]
 8008268:	608b      	str	r3, [r1, #8]
 800826a:	f1b8 0f00 	cmp.w	r8, #0
 800826e:	dd9c      	ble.n	80081aa <__sflush_r+0x1a>
 8008270:	4643      	mov	r3, r8
 8008272:	463a      	mov	r2, r7
 8008274:	6a21      	ldr	r1, [r4, #32]
 8008276:	4628      	mov	r0, r5
 8008278:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800827a:	47b0      	blx	r6
 800827c:	2800      	cmp	r0, #0
 800827e:	dc06      	bgt.n	800828e <__sflush_r+0xfe>
 8008280:	89a3      	ldrh	r3, [r4, #12]
 8008282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008286:	81a3      	strh	r3, [r4, #12]
 8008288:	f04f 30ff 	mov.w	r0, #4294967295
 800828c:	e78e      	b.n	80081ac <__sflush_r+0x1c>
 800828e:	4407      	add	r7, r0
 8008290:	eba8 0800 	sub.w	r8, r8, r0
 8008294:	e7e9      	b.n	800826a <__sflush_r+0xda>
 8008296:	bf00      	nop
 8008298:	20400001 	.word	0x20400001

0800829c <_fflush_r>:
 800829c:	b538      	push	{r3, r4, r5, lr}
 800829e:	690b      	ldr	r3, [r1, #16]
 80082a0:	4605      	mov	r5, r0
 80082a2:	460c      	mov	r4, r1
 80082a4:	b1db      	cbz	r3, 80082de <_fflush_r+0x42>
 80082a6:	b118      	cbz	r0, 80082b0 <_fflush_r+0x14>
 80082a8:	6983      	ldr	r3, [r0, #24]
 80082aa:	b90b      	cbnz	r3, 80082b0 <_fflush_r+0x14>
 80082ac:	f7fe fae4 	bl	8006878 <__sinit>
 80082b0:	4b0c      	ldr	r3, [pc, #48]	; (80082e4 <_fflush_r+0x48>)
 80082b2:	429c      	cmp	r4, r3
 80082b4:	d109      	bne.n	80082ca <_fflush_r+0x2e>
 80082b6:	686c      	ldr	r4, [r5, #4]
 80082b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082bc:	b17b      	cbz	r3, 80082de <_fflush_r+0x42>
 80082be:	4621      	mov	r1, r4
 80082c0:	4628      	mov	r0, r5
 80082c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082c6:	f7ff bf63 	b.w	8008190 <__sflush_r>
 80082ca:	4b07      	ldr	r3, [pc, #28]	; (80082e8 <_fflush_r+0x4c>)
 80082cc:	429c      	cmp	r4, r3
 80082ce:	d101      	bne.n	80082d4 <_fflush_r+0x38>
 80082d0:	68ac      	ldr	r4, [r5, #8]
 80082d2:	e7f1      	b.n	80082b8 <_fflush_r+0x1c>
 80082d4:	4b05      	ldr	r3, [pc, #20]	; (80082ec <_fflush_r+0x50>)
 80082d6:	429c      	cmp	r4, r3
 80082d8:	bf08      	it	eq
 80082da:	68ec      	ldreq	r4, [r5, #12]
 80082dc:	e7ec      	b.n	80082b8 <_fflush_r+0x1c>
 80082de:	2000      	movs	r0, #0
 80082e0:	bd38      	pop	{r3, r4, r5, pc}
 80082e2:	bf00      	nop
 80082e4:	080085f8 	.word	0x080085f8
 80082e8:	08008618 	.word	0x08008618
 80082ec:	080085d8 	.word	0x080085d8

080082f0 <_lseek_r>:
 80082f0:	b538      	push	{r3, r4, r5, lr}
 80082f2:	4605      	mov	r5, r0
 80082f4:	4608      	mov	r0, r1
 80082f6:	4611      	mov	r1, r2
 80082f8:	2200      	movs	r2, #0
 80082fa:	4c05      	ldr	r4, [pc, #20]	; (8008310 <_lseek_r+0x20>)
 80082fc:	6022      	str	r2, [r4, #0]
 80082fe:	461a      	mov	r2, r3
 8008300:	f7f9 fad5 	bl	80018ae <_lseek>
 8008304:	1c43      	adds	r3, r0, #1
 8008306:	d102      	bne.n	800830e <_lseek_r+0x1e>
 8008308:	6823      	ldr	r3, [r4, #0]
 800830a:	b103      	cbz	r3, 800830e <_lseek_r+0x1e>
 800830c:	602b      	str	r3, [r5, #0]
 800830e:	bd38      	pop	{r3, r4, r5, pc}
 8008310:	200002cc 	.word	0x200002cc

08008314 <__swhatbuf_r>:
 8008314:	b570      	push	{r4, r5, r6, lr}
 8008316:	460e      	mov	r6, r1
 8008318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800831c:	b096      	sub	sp, #88	; 0x58
 800831e:	2900      	cmp	r1, #0
 8008320:	4614      	mov	r4, r2
 8008322:	461d      	mov	r5, r3
 8008324:	da07      	bge.n	8008336 <__swhatbuf_r+0x22>
 8008326:	2300      	movs	r3, #0
 8008328:	602b      	str	r3, [r5, #0]
 800832a:	89b3      	ldrh	r3, [r6, #12]
 800832c:	061a      	lsls	r2, r3, #24
 800832e:	d410      	bmi.n	8008352 <__swhatbuf_r+0x3e>
 8008330:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008334:	e00e      	b.n	8008354 <__swhatbuf_r+0x40>
 8008336:	466a      	mov	r2, sp
 8008338:	f000 f8a4 	bl	8008484 <_fstat_r>
 800833c:	2800      	cmp	r0, #0
 800833e:	dbf2      	blt.n	8008326 <__swhatbuf_r+0x12>
 8008340:	9a01      	ldr	r2, [sp, #4]
 8008342:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008346:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800834a:	425a      	negs	r2, r3
 800834c:	415a      	adcs	r2, r3
 800834e:	602a      	str	r2, [r5, #0]
 8008350:	e7ee      	b.n	8008330 <__swhatbuf_r+0x1c>
 8008352:	2340      	movs	r3, #64	; 0x40
 8008354:	2000      	movs	r0, #0
 8008356:	6023      	str	r3, [r4, #0]
 8008358:	b016      	add	sp, #88	; 0x58
 800835a:	bd70      	pop	{r4, r5, r6, pc}

0800835c <__smakebuf_r>:
 800835c:	898b      	ldrh	r3, [r1, #12]
 800835e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008360:	079d      	lsls	r5, r3, #30
 8008362:	4606      	mov	r6, r0
 8008364:	460c      	mov	r4, r1
 8008366:	d507      	bpl.n	8008378 <__smakebuf_r+0x1c>
 8008368:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800836c:	6023      	str	r3, [r4, #0]
 800836e:	6123      	str	r3, [r4, #16]
 8008370:	2301      	movs	r3, #1
 8008372:	6163      	str	r3, [r4, #20]
 8008374:	b002      	add	sp, #8
 8008376:	bd70      	pop	{r4, r5, r6, pc}
 8008378:	ab01      	add	r3, sp, #4
 800837a:	466a      	mov	r2, sp
 800837c:	f7ff ffca 	bl	8008314 <__swhatbuf_r>
 8008380:	9900      	ldr	r1, [sp, #0]
 8008382:	4605      	mov	r5, r0
 8008384:	4630      	mov	r0, r6
 8008386:	f7ff fac3 	bl	8007910 <_malloc_r>
 800838a:	b948      	cbnz	r0, 80083a0 <__smakebuf_r+0x44>
 800838c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008390:	059a      	lsls	r2, r3, #22
 8008392:	d4ef      	bmi.n	8008374 <__smakebuf_r+0x18>
 8008394:	f023 0303 	bic.w	r3, r3, #3
 8008398:	f043 0302 	orr.w	r3, r3, #2
 800839c:	81a3      	strh	r3, [r4, #12]
 800839e:	e7e3      	b.n	8008368 <__smakebuf_r+0xc>
 80083a0:	4b0d      	ldr	r3, [pc, #52]	; (80083d8 <__smakebuf_r+0x7c>)
 80083a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80083a4:	89a3      	ldrh	r3, [r4, #12]
 80083a6:	6020      	str	r0, [r4, #0]
 80083a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083ac:	81a3      	strh	r3, [r4, #12]
 80083ae:	9b00      	ldr	r3, [sp, #0]
 80083b0:	6120      	str	r0, [r4, #16]
 80083b2:	6163      	str	r3, [r4, #20]
 80083b4:	9b01      	ldr	r3, [sp, #4]
 80083b6:	b15b      	cbz	r3, 80083d0 <__smakebuf_r+0x74>
 80083b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083bc:	4630      	mov	r0, r6
 80083be:	f000 f873 	bl	80084a8 <_isatty_r>
 80083c2:	b128      	cbz	r0, 80083d0 <__smakebuf_r+0x74>
 80083c4:	89a3      	ldrh	r3, [r4, #12]
 80083c6:	f023 0303 	bic.w	r3, r3, #3
 80083ca:	f043 0301 	orr.w	r3, r3, #1
 80083ce:	81a3      	strh	r3, [r4, #12]
 80083d0:	89a3      	ldrh	r3, [r4, #12]
 80083d2:	431d      	orrs	r5, r3
 80083d4:	81a5      	strh	r5, [r4, #12]
 80083d6:	e7cd      	b.n	8008374 <__smakebuf_r+0x18>
 80083d8:	08006841 	.word	0x08006841

080083dc <memmove>:
 80083dc:	4288      	cmp	r0, r1
 80083de:	b510      	push	{r4, lr}
 80083e0:	eb01 0302 	add.w	r3, r1, r2
 80083e4:	d807      	bhi.n	80083f6 <memmove+0x1a>
 80083e6:	1e42      	subs	r2, r0, #1
 80083e8:	4299      	cmp	r1, r3
 80083ea:	d00a      	beq.n	8008402 <memmove+0x26>
 80083ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083f0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80083f4:	e7f8      	b.n	80083e8 <memmove+0xc>
 80083f6:	4283      	cmp	r3, r0
 80083f8:	d9f5      	bls.n	80083e6 <memmove+0xa>
 80083fa:	1881      	adds	r1, r0, r2
 80083fc:	1ad2      	subs	r2, r2, r3
 80083fe:	42d3      	cmn	r3, r2
 8008400:	d100      	bne.n	8008404 <memmove+0x28>
 8008402:	bd10      	pop	{r4, pc}
 8008404:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008408:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800840c:	e7f7      	b.n	80083fe <memmove+0x22>

0800840e <__malloc_lock>:
 800840e:	4770      	bx	lr

08008410 <__malloc_unlock>:
 8008410:	4770      	bx	lr

08008412 <_realloc_r>:
 8008412:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008414:	4607      	mov	r7, r0
 8008416:	4614      	mov	r4, r2
 8008418:	460e      	mov	r6, r1
 800841a:	b921      	cbnz	r1, 8008426 <_realloc_r+0x14>
 800841c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008420:	4611      	mov	r1, r2
 8008422:	f7ff ba75 	b.w	8007910 <_malloc_r>
 8008426:	b922      	cbnz	r2, 8008432 <_realloc_r+0x20>
 8008428:	f7ff fa26 	bl	8007878 <_free_r>
 800842c:	4625      	mov	r5, r4
 800842e:	4628      	mov	r0, r5
 8008430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008432:	f000 f849 	bl	80084c8 <_malloc_usable_size_r>
 8008436:	42a0      	cmp	r0, r4
 8008438:	d20f      	bcs.n	800845a <_realloc_r+0x48>
 800843a:	4621      	mov	r1, r4
 800843c:	4638      	mov	r0, r7
 800843e:	f7ff fa67 	bl	8007910 <_malloc_r>
 8008442:	4605      	mov	r5, r0
 8008444:	2800      	cmp	r0, #0
 8008446:	d0f2      	beq.n	800842e <_realloc_r+0x1c>
 8008448:	4631      	mov	r1, r6
 800844a:	4622      	mov	r2, r4
 800844c:	f7fe fe02 	bl	8007054 <memcpy>
 8008450:	4631      	mov	r1, r6
 8008452:	4638      	mov	r0, r7
 8008454:	f7ff fa10 	bl	8007878 <_free_r>
 8008458:	e7e9      	b.n	800842e <_realloc_r+0x1c>
 800845a:	4635      	mov	r5, r6
 800845c:	e7e7      	b.n	800842e <_realloc_r+0x1c>
	...

08008460 <_read_r>:
 8008460:	b538      	push	{r3, r4, r5, lr}
 8008462:	4605      	mov	r5, r0
 8008464:	4608      	mov	r0, r1
 8008466:	4611      	mov	r1, r2
 8008468:	2200      	movs	r2, #0
 800846a:	4c05      	ldr	r4, [pc, #20]	; (8008480 <_read_r+0x20>)
 800846c:	6022      	str	r2, [r4, #0]
 800846e:	461a      	mov	r2, r3
 8008470:	f7f9 f9c0 	bl	80017f4 <_read>
 8008474:	1c43      	adds	r3, r0, #1
 8008476:	d102      	bne.n	800847e <_read_r+0x1e>
 8008478:	6823      	ldr	r3, [r4, #0]
 800847a:	b103      	cbz	r3, 800847e <_read_r+0x1e>
 800847c:	602b      	str	r3, [r5, #0]
 800847e:	bd38      	pop	{r3, r4, r5, pc}
 8008480:	200002cc 	.word	0x200002cc

08008484 <_fstat_r>:
 8008484:	b538      	push	{r3, r4, r5, lr}
 8008486:	2300      	movs	r3, #0
 8008488:	4c06      	ldr	r4, [pc, #24]	; (80084a4 <_fstat_r+0x20>)
 800848a:	4605      	mov	r5, r0
 800848c:	4608      	mov	r0, r1
 800848e:	4611      	mov	r1, r2
 8008490:	6023      	str	r3, [r4, #0]
 8008492:	f7f9 f9f3 	bl	800187c <_fstat>
 8008496:	1c43      	adds	r3, r0, #1
 8008498:	d102      	bne.n	80084a0 <_fstat_r+0x1c>
 800849a:	6823      	ldr	r3, [r4, #0]
 800849c:	b103      	cbz	r3, 80084a0 <_fstat_r+0x1c>
 800849e:	602b      	str	r3, [r5, #0]
 80084a0:	bd38      	pop	{r3, r4, r5, pc}
 80084a2:	bf00      	nop
 80084a4:	200002cc 	.word	0x200002cc

080084a8 <_isatty_r>:
 80084a8:	b538      	push	{r3, r4, r5, lr}
 80084aa:	2300      	movs	r3, #0
 80084ac:	4c05      	ldr	r4, [pc, #20]	; (80084c4 <_isatty_r+0x1c>)
 80084ae:	4605      	mov	r5, r0
 80084b0:	4608      	mov	r0, r1
 80084b2:	6023      	str	r3, [r4, #0]
 80084b4:	f7f9 f9f1 	bl	800189a <_isatty>
 80084b8:	1c43      	adds	r3, r0, #1
 80084ba:	d102      	bne.n	80084c2 <_isatty_r+0x1a>
 80084bc:	6823      	ldr	r3, [r4, #0]
 80084be:	b103      	cbz	r3, 80084c2 <_isatty_r+0x1a>
 80084c0:	602b      	str	r3, [r5, #0]
 80084c2:	bd38      	pop	{r3, r4, r5, pc}
 80084c4:	200002cc 	.word	0x200002cc

080084c8 <_malloc_usable_size_r>:
 80084c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084cc:	1f18      	subs	r0, r3, #4
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	bfbc      	itt	lt
 80084d2:	580b      	ldrlt	r3, [r1, r0]
 80084d4:	18c0      	addlt	r0, r0, r3
 80084d6:	4770      	bx	lr

080084d8 <_init>:
 80084d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084da:	bf00      	nop
 80084dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084de:	bc08      	pop	{r3}
 80084e0:	469e      	mov	lr, r3
 80084e2:	4770      	bx	lr

080084e4 <_fini>:
 80084e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084e6:	bf00      	nop
 80084e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ea:	bc08      	pop	{r3}
 80084ec:	469e      	mov	lr, r3
 80084ee:	4770      	bx	lr
